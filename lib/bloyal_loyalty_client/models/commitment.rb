=begin
#bLoyal.LoyaltyService

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module BloyalLoyaltyClient
  class Commitment
    attr_accessor :cart_uid

    attr_accessor :loyalty_points_accrued

    attr_accessor :loyalty_points_redeemed

    attr_accessor :loyalty_currency_accrued

    attr_accessor :loyalty_summary

    attr_accessor :receipt_message

    attr_accessor :loyalty_points_accruals

    attr_accessor :loyalty_points_redemptions

    attr_accessor :loyalty_currency_accruals

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cart_uid' => :'CartUid',
        :'loyalty_points_accrued' => :'LoyaltyPointsAccrued',
        :'loyalty_points_redeemed' => :'LoyaltyPointsRedeemed',
        :'loyalty_currency_accrued' => :'LoyaltyCurrencyAccrued',
        :'loyalty_summary' => :'LoyaltySummary',
        :'receipt_message' => :'ReceiptMessage',
        :'loyalty_points_accruals' => :'LoyaltyPointsAccruals',
        :'loyalty_points_redemptions' => :'LoyaltyPointsRedemptions',
        :'loyalty_currency_accruals' => :'LoyaltyCurrencyAccruals'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'cart_uid' => :'Object',
        :'loyalty_points_accrued' => :'Object',
        :'loyalty_points_redeemed' => :'Object',
        :'loyalty_currency_accrued' => :'Object',
        :'loyalty_summary' => :'Object',
        :'receipt_message' => :'Object',
        :'loyalty_points_accruals' => :'Object',
        :'loyalty_points_redemptions' => :'Object',
        :'loyalty_currency_accruals' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `BloyalLoyaltyClient::Commitment` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `BloyalLoyaltyClient::Commitment`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'cart_uid')
        self.cart_uid = attributes[:'cart_uid']
      end

      if attributes.key?(:'loyalty_points_accrued')
        self.loyalty_points_accrued = attributes[:'loyalty_points_accrued']
      end

      if attributes.key?(:'loyalty_points_redeemed')
        self.loyalty_points_redeemed = attributes[:'loyalty_points_redeemed']
      end

      if attributes.key?(:'loyalty_currency_accrued')
        self.loyalty_currency_accrued = attributes[:'loyalty_currency_accrued']
      end

      if attributes.key?(:'loyalty_summary')
        self.loyalty_summary = attributes[:'loyalty_summary']
      end

      if attributes.key?(:'receipt_message')
        if (value = attributes[:'receipt_message']).is_a?(Array)
          self.receipt_message = value
        end
      end

      if attributes.key?(:'loyalty_points_accruals')
        if (value = attributes[:'loyalty_points_accruals']).is_a?(Array)
          self.loyalty_points_accruals = value
        end
      end

      if attributes.key?(:'loyalty_points_redemptions')
        if (value = attributes[:'loyalty_points_redemptions']).is_a?(Array)
          self.loyalty_points_redemptions = value
        end
      end

      if attributes.key?(:'loyalty_currency_accruals')
        if (value = attributes[:'loyalty_currency_accruals']).is_a?(Array)
          self.loyalty_currency_accruals = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cart_uid == o.cart_uid &&
          loyalty_points_accrued == o.loyalty_points_accrued &&
          loyalty_points_redeemed == o.loyalty_points_redeemed &&
          loyalty_currency_accrued == o.loyalty_currency_accrued &&
          loyalty_summary == o.loyalty_summary &&
          receipt_message == o.receipt_message &&
          loyalty_points_accruals == o.loyalty_points_accruals &&
          loyalty_points_redemptions == o.loyalty_points_redemptions &&
          loyalty_currency_accruals == o.loyalty_currency_accruals
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [cart_uid, loyalty_points_accrued, loyalty_points_redeemed, loyalty_currency_accrued, loyalty_summary, receipt_message, loyalty_points_accruals, loyalty_points_redemptions, loyalty_currency_accruals].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        BloyalLoyaltyClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
