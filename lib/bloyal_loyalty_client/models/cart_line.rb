=begin
#bLoyal.LoyaltyService

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module BloyalLoyaltyClient
  class CartLine
    attr_accessor :uid

    attr_accessor :parent_uid

    attr_accessor :external_id

    attr_accessor :parent_external_id

    attr_accessor :number

    attr_accessor :parent_number

    attr_accessor :product_uid

    attr_accessor :product_code

    attr_accessor :product_external_id

    attr_accessor :product_name

    attr_accessor :category_uid

    attr_accessor :category_code

    attr_accessor :category_external_id

    attr_accessor :department_uid

    attr_accessor :department_code

    attr_accessor :department_external_id

    attr_accessor :sub_category1_uid

    attr_accessor :sub_category1_code

    attr_accessor :sub_category1_external_id

    attr_accessor :sub_category2_uid

    attr_accessor :sub_category2_code

    attr_accessor :sub_category2_external_id

    attr_accessor :sub_category3_uid

    attr_accessor :sub_category3_code

    attr_accessor :sub_category3_external_id

    attr_accessor :sub_category4_uid

    attr_accessor :sub_category4_code

    attr_accessor :sub_category4_external_id

    attr_accessor :sales_rep_code

    attr_accessor :shipment_uid

    attr_accessor :shipment_number

    attr_accessor :quantity

    attr_accessor :full_price

    attr_accessor :price

    attr_accessor :externally_applied_sale_price

    attr_accessor :sale_price

    attr_accessor :sale_price_reason_code

    attr_accessor :sale_price_reason_name

    attr_accessor :externally_applied_discount

    attr_accessor :discount

    attr_accessor :discount_reason_code

    attr_accessor :discount_reason_name

    attr_accessor :discount_details

    attr_accessor :net_price

    attr_accessor :extended_net_price

    attr_accessor :cost

    attr_accessor :replacement_cost

    attr_accessor :last_cost

    attr_accessor :return_reason_code

    attr_accessor :order_discount

    attr_accessor :description

    attr_accessor :comment

    attr_accessor :weight

    attr_accessor :tax_exempt

    attr_accessor :externally_applied_tax

    attr_accessor :tax_details

    attr_accessor :price_source

    attr_accessor :gift_card_number

    attr_accessor :gift_card_amount

    attr_accessor :do_not_tax

    attr_accessor :serial_number

    attr_accessor :line_options

    attr_accessor :assembly_items

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'uid' => :'Uid',
        :'parent_uid' => :'ParentUid',
        :'external_id' => :'ExternalId',
        :'parent_external_id' => :'ParentExternalId',
        :'number' => :'Number',
        :'parent_number' => :'ParentNumber',
        :'product_uid' => :'ProductUid',
        :'product_code' => :'ProductCode',
        :'product_external_id' => :'ProductExternalId',
        :'product_name' => :'ProductName',
        :'category_uid' => :'CategoryUid',
        :'category_code' => :'CategoryCode',
        :'category_external_id' => :'CategoryExternalId',
        :'department_uid' => :'DepartmentUid',
        :'department_code' => :'DepartmentCode',
        :'department_external_id' => :'DepartmentExternalId',
        :'sub_category1_uid' => :'SubCategory1Uid',
        :'sub_category1_code' => :'SubCategory1Code',
        :'sub_category1_external_id' => :'SubCategory1ExternalId',
        :'sub_category2_uid' => :'SubCategory2Uid',
        :'sub_category2_code' => :'SubCategory2Code',
        :'sub_category2_external_id' => :'SubCategory2ExternalId',
        :'sub_category3_uid' => :'SubCategory3Uid',
        :'sub_category3_code' => :'SubCategory3Code',
        :'sub_category3_external_id' => :'SubCategory3ExternalId',
        :'sub_category4_uid' => :'SubCategory4Uid',
        :'sub_category4_code' => :'SubCategory4Code',
        :'sub_category4_external_id' => :'SubCategory4ExternalId',
        :'sales_rep_code' => :'SalesRepCode',
        :'shipment_uid' => :'ShipmentUid',
        :'shipment_number' => :'ShipmentNumber',
        :'quantity' => :'Quantity',
        :'full_price' => :'FullPrice',
        :'price' => :'Price',
        :'externally_applied_sale_price' => :'ExternallyAppliedSalePrice',
        :'sale_price' => :'SalePrice',
        :'sale_price_reason_code' => :'SalePriceReasonCode',
        :'sale_price_reason_name' => :'SalePriceReasonName',
        :'externally_applied_discount' => :'ExternallyAppliedDiscount',
        :'discount' => :'Discount',
        :'discount_reason_code' => :'DiscountReasonCode',
        :'discount_reason_name' => :'DiscountReasonName',
        :'discount_details' => :'DiscountDetails',
        :'net_price' => :'NetPrice',
        :'extended_net_price' => :'ExtendedNetPrice',
        :'cost' => :'Cost',
        :'replacement_cost' => :'ReplacementCost',
        :'last_cost' => :'LastCost',
        :'return_reason_code' => :'ReturnReasonCode',
        :'order_discount' => :'OrderDiscount',
        :'description' => :'Description',
        :'comment' => :'Comment',
        :'weight' => :'Weight',
        :'tax_exempt' => :'TaxExempt',
        :'externally_applied_tax' => :'ExternallyAppliedTax',
        :'tax_details' => :'TaxDetails',
        :'price_source' => :'PriceSource',
        :'gift_card_number' => :'GiftCardNumber',
        :'gift_card_amount' => :'GiftCardAmount',
        :'do_not_tax' => :'DoNotTax',
        :'serial_number' => :'SerialNumber',
        :'line_options' => :'LineOptions',
        :'assembly_items' => :'AssemblyItems'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'uid' => :'Object',
        :'parent_uid' => :'Object',
        :'external_id' => :'Object',
        :'parent_external_id' => :'Object',
        :'number' => :'Object',
        :'parent_number' => :'Object',
        :'product_uid' => :'Object',
        :'product_code' => :'Object',
        :'product_external_id' => :'Object',
        :'product_name' => :'Object',
        :'category_uid' => :'Object',
        :'category_code' => :'Object',
        :'category_external_id' => :'Object',
        :'department_uid' => :'Object',
        :'department_code' => :'Object',
        :'department_external_id' => :'Object',
        :'sub_category1_uid' => :'Object',
        :'sub_category1_code' => :'Object',
        :'sub_category1_external_id' => :'Object',
        :'sub_category2_uid' => :'Object',
        :'sub_category2_code' => :'Object',
        :'sub_category2_external_id' => :'Object',
        :'sub_category3_uid' => :'Object',
        :'sub_category3_code' => :'Object',
        :'sub_category3_external_id' => :'Object',
        :'sub_category4_uid' => :'Object',
        :'sub_category4_code' => :'Object',
        :'sub_category4_external_id' => :'Object',
        :'sales_rep_code' => :'Object',
        :'shipment_uid' => :'Object',
        :'shipment_number' => :'Object',
        :'quantity' => :'Object',
        :'full_price' => :'Object',
        :'price' => :'Object',
        :'externally_applied_sale_price' => :'Object',
        :'sale_price' => :'Object',
        :'sale_price_reason_code' => :'Object',
        :'sale_price_reason_name' => :'Object',
        :'externally_applied_discount' => :'Object',
        :'discount' => :'Object',
        :'discount_reason_code' => :'Object',
        :'discount_reason_name' => :'Object',
        :'discount_details' => :'Object',
        :'net_price' => :'Object',
        :'extended_net_price' => :'Object',
        :'cost' => :'Object',
        :'replacement_cost' => :'Object',
        :'last_cost' => :'Object',
        :'return_reason_code' => :'Object',
        :'order_discount' => :'Object',
        :'description' => :'Object',
        :'comment' => :'Object',
        :'weight' => :'Object',
        :'tax_exempt' => :'Object',
        :'externally_applied_tax' => :'Object',
        :'tax_details' => :'Object',
        :'price_source' => :'Object',
        :'gift_card_number' => :'Object',
        :'gift_card_amount' => :'Object',
        :'do_not_tax' => :'Object',
        :'serial_number' => :'Object',
        :'line_options' => :'Object',
        :'assembly_items' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `BloyalLoyaltyClient::CartLine` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `BloyalLoyaltyClient::CartLine`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'uid')
        self.uid = attributes[:'uid']
      end

      if attributes.key?(:'parent_uid')
        self.parent_uid = attributes[:'parent_uid']
      end

      if attributes.key?(:'external_id')
        self.external_id = attributes[:'external_id']
      end

      if attributes.key?(:'parent_external_id')
        self.parent_external_id = attributes[:'parent_external_id']
      end

      if attributes.key?(:'number')
        self.number = attributes[:'number']
      end

      if attributes.key?(:'parent_number')
        self.parent_number = attributes[:'parent_number']
      end

      if attributes.key?(:'product_uid')
        self.product_uid = attributes[:'product_uid']
      end

      if attributes.key?(:'product_code')
        self.product_code = attributes[:'product_code']
      end

      if attributes.key?(:'product_external_id')
        self.product_external_id = attributes[:'product_external_id']
      end

      if attributes.key?(:'product_name')
        self.product_name = attributes[:'product_name']
      end

      if attributes.key?(:'category_uid')
        self.category_uid = attributes[:'category_uid']
      end

      if attributes.key?(:'category_code')
        self.category_code = attributes[:'category_code']
      end

      if attributes.key?(:'category_external_id')
        self.category_external_id = attributes[:'category_external_id']
      end

      if attributes.key?(:'department_uid')
        self.department_uid = attributes[:'department_uid']
      end

      if attributes.key?(:'department_code')
        self.department_code = attributes[:'department_code']
      end

      if attributes.key?(:'department_external_id')
        self.department_external_id = attributes[:'department_external_id']
      end

      if attributes.key?(:'sub_category1_uid')
        self.sub_category1_uid = attributes[:'sub_category1_uid']
      end

      if attributes.key?(:'sub_category1_code')
        self.sub_category1_code = attributes[:'sub_category1_code']
      end

      if attributes.key?(:'sub_category1_external_id')
        self.sub_category1_external_id = attributes[:'sub_category1_external_id']
      end

      if attributes.key?(:'sub_category2_uid')
        self.sub_category2_uid = attributes[:'sub_category2_uid']
      end

      if attributes.key?(:'sub_category2_code')
        self.sub_category2_code = attributes[:'sub_category2_code']
      end

      if attributes.key?(:'sub_category2_external_id')
        self.sub_category2_external_id = attributes[:'sub_category2_external_id']
      end

      if attributes.key?(:'sub_category3_uid')
        self.sub_category3_uid = attributes[:'sub_category3_uid']
      end

      if attributes.key?(:'sub_category3_code')
        self.sub_category3_code = attributes[:'sub_category3_code']
      end

      if attributes.key?(:'sub_category3_external_id')
        self.sub_category3_external_id = attributes[:'sub_category3_external_id']
      end

      if attributes.key?(:'sub_category4_uid')
        self.sub_category4_uid = attributes[:'sub_category4_uid']
      end

      if attributes.key?(:'sub_category4_code')
        self.sub_category4_code = attributes[:'sub_category4_code']
      end

      if attributes.key?(:'sub_category4_external_id')
        self.sub_category4_external_id = attributes[:'sub_category4_external_id']
      end

      if attributes.key?(:'sales_rep_code')
        self.sales_rep_code = attributes[:'sales_rep_code']
      end

      if attributes.key?(:'shipment_uid')
        self.shipment_uid = attributes[:'shipment_uid']
      end

      if attributes.key?(:'shipment_number')
        self.shipment_number = attributes[:'shipment_number']
      end

      if attributes.key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.key?(:'full_price')
        self.full_price = attributes[:'full_price']
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.key?(:'externally_applied_sale_price')
        self.externally_applied_sale_price = attributes[:'externally_applied_sale_price']
      end

      if attributes.key?(:'sale_price')
        self.sale_price = attributes[:'sale_price']
      end

      if attributes.key?(:'sale_price_reason_code')
        self.sale_price_reason_code = attributes[:'sale_price_reason_code']
      end

      if attributes.key?(:'sale_price_reason_name')
        self.sale_price_reason_name = attributes[:'sale_price_reason_name']
      end

      if attributes.key?(:'externally_applied_discount')
        self.externally_applied_discount = attributes[:'externally_applied_discount']
      end

      if attributes.key?(:'discount')
        self.discount = attributes[:'discount']
      end

      if attributes.key?(:'discount_reason_code')
        self.discount_reason_code = attributes[:'discount_reason_code']
      end

      if attributes.key?(:'discount_reason_name')
        self.discount_reason_name = attributes[:'discount_reason_name']
      end

      if attributes.key?(:'discount_details')
        if (value = attributes[:'discount_details']).is_a?(Array)
          self.discount_details = value
        end
      end

      if attributes.key?(:'net_price')
        self.net_price = attributes[:'net_price']
      end

      if attributes.key?(:'extended_net_price')
        self.extended_net_price = attributes[:'extended_net_price']
      end

      if attributes.key?(:'cost')
        self.cost = attributes[:'cost']
      end

      if attributes.key?(:'replacement_cost')
        self.replacement_cost = attributes[:'replacement_cost']
      end

      if attributes.key?(:'last_cost')
        self.last_cost = attributes[:'last_cost']
      end

      if attributes.key?(:'return_reason_code')
        self.return_reason_code = attributes[:'return_reason_code']
      end

      if attributes.key?(:'order_discount')
        self.order_discount = attributes[:'order_discount']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'comment')
        self.comment = attributes[:'comment']
      end

      if attributes.key?(:'weight')
        self.weight = attributes[:'weight']
      end

      if attributes.key?(:'tax_exempt')
        self.tax_exempt = attributes[:'tax_exempt']
      end

      if attributes.key?(:'externally_applied_tax')
        self.externally_applied_tax = attributes[:'externally_applied_tax']
      end

      if attributes.key?(:'tax_details')
        if (value = attributes[:'tax_details']).is_a?(Array)
          self.tax_details = value
        end
      end

      if attributes.key?(:'price_source')
        self.price_source = attributes[:'price_source']
      end

      if attributes.key?(:'gift_card_number')
        self.gift_card_number = attributes[:'gift_card_number']
      end

      if attributes.key?(:'gift_card_amount')
        self.gift_card_amount = attributes[:'gift_card_amount']
      end

      if attributes.key?(:'do_not_tax')
        self.do_not_tax = attributes[:'do_not_tax']
      end

      if attributes.key?(:'serial_number')
        self.serial_number = attributes[:'serial_number']
      end

      if attributes.key?(:'line_options')
        if (value = attributes[:'line_options']).is_a?(Array)
          self.line_options = value
        end
      end

      if attributes.key?(:'assembly_items')
        if (value = attributes[:'assembly_items']).is_a?(Array)
          self.assembly_items = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      price_source_validator = EnumAttributeValidator.new('Object', ['Undefined', 'Specified', 'Base', 'LevelA', 'LevelB', 'LevelC'])
      return false unless price_source_validator.valid?(@price_source)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] price_source Object to be assigned
    def price_source=(price_source)
      validator = EnumAttributeValidator.new('Object', ['Undefined', 'Specified', 'Base', 'LevelA', 'LevelB', 'LevelC'])
      unless validator.valid?(price_source)
        fail ArgumentError, "invalid value for \"price_source\", must be one of #{validator.allowable_values}."
      end
      @price_source = price_source
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          uid == o.uid &&
          parent_uid == o.parent_uid &&
          external_id == o.external_id &&
          parent_external_id == o.parent_external_id &&
          number == o.number &&
          parent_number == o.parent_number &&
          product_uid == o.product_uid &&
          product_code == o.product_code &&
          product_external_id == o.product_external_id &&
          product_name == o.product_name &&
          category_uid == o.category_uid &&
          category_code == o.category_code &&
          category_external_id == o.category_external_id &&
          department_uid == o.department_uid &&
          department_code == o.department_code &&
          department_external_id == o.department_external_id &&
          sub_category1_uid == o.sub_category1_uid &&
          sub_category1_code == o.sub_category1_code &&
          sub_category1_external_id == o.sub_category1_external_id &&
          sub_category2_uid == o.sub_category2_uid &&
          sub_category2_code == o.sub_category2_code &&
          sub_category2_external_id == o.sub_category2_external_id &&
          sub_category3_uid == o.sub_category3_uid &&
          sub_category3_code == o.sub_category3_code &&
          sub_category3_external_id == o.sub_category3_external_id &&
          sub_category4_uid == o.sub_category4_uid &&
          sub_category4_code == o.sub_category4_code &&
          sub_category4_external_id == o.sub_category4_external_id &&
          sales_rep_code == o.sales_rep_code &&
          shipment_uid == o.shipment_uid &&
          shipment_number == o.shipment_number &&
          quantity == o.quantity &&
          full_price == o.full_price &&
          price == o.price &&
          externally_applied_sale_price == o.externally_applied_sale_price &&
          sale_price == o.sale_price &&
          sale_price_reason_code == o.sale_price_reason_code &&
          sale_price_reason_name == o.sale_price_reason_name &&
          externally_applied_discount == o.externally_applied_discount &&
          discount == o.discount &&
          discount_reason_code == o.discount_reason_code &&
          discount_reason_name == o.discount_reason_name &&
          discount_details == o.discount_details &&
          net_price == o.net_price &&
          extended_net_price == o.extended_net_price &&
          cost == o.cost &&
          replacement_cost == o.replacement_cost &&
          last_cost == o.last_cost &&
          return_reason_code == o.return_reason_code &&
          order_discount == o.order_discount &&
          description == o.description &&
          comment == o.comment &&
          weight == o.weight &&
          tax_exempt == o.tax_exempt &&
          externally_applied_tax == o.externally_applied_tax &&
          tax_details == o.tax_details &&
          price_source == o.price_source &&
          gift_card_number == o.gift_card_number &&
          gift_card_amount == o.gift_card_amount &&
          do_not_tax == o.do_not_tax &&
          serial_number == o.serial_number &&
          line_options == o.line_options &&
          assembly_items == o.assembly_items
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [uid, parent_uid, external_id, parent_external_id, number, parent_number, product_uid, product_code, product_external_id, product_name, category_uid, category_code, category_external_id, department_uid, department_code, department_external_id, sub_category1_uid, sub_category1_code, sub_category1_external_id, sub_category2_uid, sub_category2_code, sub_category2_external_id, sub_category3_uid, sub_category3_code, sub_category3_external_id, sub_category4_uid, sub_category4_code, sub_category4_external_id, sales_rep_code, shipment_uid, shipment_number, quantity, full_price, price, externally_applied_sale_price, sale_price, sale_price_reason_code, sale_price_reason_name, externally_applied_discount, discount, discount_reason_code, discount_reason_name, discount_details, net_price, extended_net_price, cost, replacement_cost, last_cost, return_reason_code, order_discount, description, comment, weight, tax_exempt, externally_applied_tax, tax_details, price_source, gift_card_number, gift_card_amount, do_not_tax, serial_number, line_options, assembly_items].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        BloyalLoyaltyClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
