=begin
#bLoyal.LoyaltyService

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module BloyalLoyaltyClient
  class POSSnippetSettings
    attr_accessor :labels

    attr_accessor :capabilities

    attr_accessor :purchase_history_columns

    attr_accessor :customer_search_columns

    attr_accessor :find_customer_options

    attr_accessor :customer_view_sections

    attr_accessor :frequent_buyer_trans_columns

    attr_accessor :loyalty_points_trans_columns

    attr_accessor :loyalty_currency_trans_columns

    attr_accessor :quick_signup_fields_enabled

    attr_accessor :quick_signup_fields_required

    attr_accessor :quick_edit_fields_enabled

    attr_accessor :quick_edit_fields_required

    attr_accessor :quick_signup_fields

    attr_accessor :quick_signup_groups

    attr_accessor :quick_edit_fields

    attr_accessor :quick_edit_groups

    attr_accessor :quick_set_commands

    attr_accessor :enable_auto_customer_selection

    attr_accessor :require_customer_selection

    attr_accessor :allow_pickup_order_creation

    attr_accessor :show_pending_pickup_orders

    attr_accessor :show_pending_shipping_orders

    attr_accessor :enable_on_screen_keyboard

    attr_accessor :allow_customer_pricing_updates

    attr_accessor :read_only

    attr_accessor :adjust_loyalty_points

    attr_accessor :adjust_loyalty_currency

    attr_accessor :adjust_frequent_buyer_balances

    attr_accessor :transfer_frequent_buyer_balances

    attr_accessor :coupon_lookup

    attr_accessor :device_settings

    attr_accessor :device_profile_capabilities

    attr_accessor :device_profile_capability_ordered_lists

    attr_accessor :device_profile_capability_dictionaries

    attr_accessor :device_profile_permissions

    attr_accessor :device_profile_permission_levels

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'labels' => :'Labels',
        :'capabilities' => :'Capabilities',
        :'purchase_history_columns' => :'PurchaseHistoryColumns',
        :'customer_search_columns' => :'CustomerSearchColumns',
        :'find_customer_options' => :'FindCustomerOptions',
        :'customer_view_sections' => :'CustomerViewSections',
        :'frequent_buyer_trans_columns' => :'FrequentBuyerTransColumns',
        :'loyalty_points_trans_columns' => :'LoyaltyPointsTransColumns',
        :'loyalty_currency_trans_columns' => :'LoyaltyCurrencyTransColumns',
        :'quick_signup_fields_enabled' => :'QuickSignupFieldsEnabled',
        :'quick_signup_fields_required' => :'QuickSignupFieldsRequired',
        :'quick_edit_fields_enabled' => :'QuickEditFieldsEnabled',
        :'quick_edit_fields_required' => :'QuickEditFieldsRequired',
        :'quick_signup_fields' => :'QuickSignupFields',
        :'quick_signup_groups' => :'QuickSignupGroups',
        :'quick_edit_fields' => :'QuickEditFields',
        :'quick_edit_groups' => :'QuickEditGroups',
        :'quick_set_commands' => :'QuickSetCommands',
        :'enable_auto_customer_selection' => :'EnableAutoCustomerSelection',
        :'require_customer_selection' => :'RequireCustomerSelection',
        :'allow_pickup_order_creation' => :'AllowPickupOrderCreation',
        :'show_pending_pickup_orders' => :'ShowPendingPickupOrders',
        :'show_pending_shipping_orders' => :'ShowPendingShippingOrders',
        :'enable_on_screen_keyboard' => :'EnableOnScreenKeyboard',
        :'allow_customer_pricing_updates' => :'AllowCustomerPricingUpdates',
        :'read_only' => :'ReadOnly',
        :'adjust_loyalty_points' => :'AdjustLoyaltyPoints',
        :'adjust_loyalty_currency' => :'AdjustLoyaltyCurrency',
        :'adjust_frequent_buyer_balances' => :'AdjustFrequentBuyerBalances',
        :'transfer_frequent_buyer_balances' => :'TransferFrequentBuyerBalances',
        :'coupon_lookup' => :'CouponLookup',
        :'device_settings' => :'DeviceSettings',
        :'device_profile_capabilities' => :'DeviceProfileCapabilities',
        :'device_profile_capability_ordered_lists' => :'DeviceProfileCapabilityOrderedLists',
        :'device_profile_capability_dictionaries' => :'DeviceProfileCapabilityDictionaries',
        :'device_profile_permissions' => :'DeviceProfilePermissions',
        :'device_profile_permission_levels' => :'DeviceProfilePermissionLevels'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'labels' => :'Object',
        :'capabilities' => :'Object',
        :'purchase_history_columns' => :'Object',
        :'customer_search_columns' => :'Object',
        :'find_customer_options' => :'Object',
        :'customer_view_sections' => :'Object',
        :'frequent_buyer_trans_columns' => :'Object',
        :'loyalty_points_trans_columns' => :'Object',
        :'loyalty_currency_trans_columns' => :'Object',
        :'quick_signup_fields_enabled' => :'Object',
        :'quick_signup_fields_required' => :'Object',
        :'quick_edit_fields_enabled' => :'Object',
        :'quick_edit_fields_required' => :'Object',
        :'quick_signup_fields' => :'Object',
        :'quick_signup_groups' => :'Object',
        :'quick_edit_fields' => :'Object',
        :'quick_edit_groups' => :'Object',
        :'quick_set_commands' => :'Object',
        :'enable_auto_customer_selection' => :'Object',
        :'require_customer_selection' => :'Object',
        :'allow_pickup_order_creation' => :'Object',
        :'show_pending_pickup_orders' => :'Object',
        :'show_pending_shipping_orders' => :'Object',
        :'enable_on_screen_keyboard' => :'Object',
        :'allow_customer_pricing_updates' => :'Object',
        :'read_only' => :'Object',
        :'adjust_loyalty_points' => :'Object',
        :'adjust_loyalty_currency' => :'Object',
        :'adjust_frequent_buyer_balances' => :'Object',
        :'transfer_frequent_buyer_balances' => :'Object',
        :'coupon_lookup' => :'Object',
        :'device_settings' => :'Object',
        :'device_profile_capabilities' => :'Object',
        :'device_profile_capability_ordered_lists' => :'Object',
        :'device_profile_capability_dictionaries' => :'Object',
        :'device_profile_permissions' => :'Object',
        :'device_profile_permission_levels' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `BloyalLoyaltyClient::POSSnippetSettings` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `BloyalLoyaltyClient::POSSnippetSettings`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'labels')
        self.labels = attributes[:'labels']
      end

      if attributes.key?(:'capabilities')
        if (value = attributes[:'capabilities']).is_a?(Array)
          self.capabilities = value
        end
      end

      if attributes.key?(:'purchase_history_columns')
        if (value = attributes[:'purchase_history_columns']).is_a?(Array)
          self.purchase_history_columns = value
        end
      end

      if attributes.key?(:'customer_search_columns')
        if (value = attributes[:'customer_search_columns']).is_a?(Array)
          self.customer_search_columns = value
        end
      end

      if attributes.key?(:'find_customer_options')
        if (value = attributes[:'find_customer_options']).is_a?(Array)
          self.find_customer_options = value
        end
      end

      if attributes.key?(:'customer_view_sections')
        if (value = attributes[:'customer_view_sections']).is_a?(Array)
          self.customer_view_sections = value
        end
      end

      if attributes.key?(:'frequent_buyer_trans_columns')
        if (value = attributes[:'frequent_buyer_trans_columns']).is_a?(Array)
          self.frequent_buyer_trans_columns = value
        end
      end

      if attributes.key?(:'loyalty_points_trans_columns')
        if (value = attributes[:'loyalty_points_trans_columns']).is_a?(Array)
          self.loyalty_points_trans_columns = value
        end
      end

      if attributes.key?(:'loyalty_currency_trans_columns')
        if (value = attributes[:'loyalty_currency_trans_columns']).is_a?(Array)
          self.loyalty_currency_trans_columns = value
        end
      end

      if attributes.key?(:'quick_signup_fields_enabled')
        if (value = attributes[:'quick_signup_fields_enabled']).is_a?(Array)
          self.quick_signup_fields_enabled = value
        end
      end

      if attributes.key?(:'quick_signup_fields_required')
        if (value = attributes[:'quick_signup_fields_required']).is_a?(Array)
          self.quick_signup_fields_required = value
        end
      end

      if attributes.key?(:'quick_edit_fields_enabled')
        if (value = attributes[:'quick_edit_fields_enabled']).is_a?(Array)
          self.quick_edit_fields_enabled = value
        end
      end

      if attributes.key?(:'quick_edit_fields_required')
        if (value = attributes[:'quick_edit_fields_required']).is_a?(Array)
          self.quick_edit_fields_required = value
        end
      end

      if attributes.key?(:'quick_signup_fields')
        if (value = attributes[:'quick_signup_fields']).is_a?(Array)
          self.quick_signup_fields = value
        end
      end

      if attributes.key?(:'quick_signup_groups')
        if (value = attributes[:'quick_signup_groups']).is_a?(Array)
          self.quick_signup_groups = value
        end
      end

      if attributes.key?(:'quick_edit_fields')
        if (value = attributes[:'quick_edit_fields']).is_a?(Array)
          self.quick_edit_fields = value
        end
      end

      if attributes.key?(:'quick_edit_groups')
        if (value = attributes[:'quick_edit_groups']).is_a?(Array)
          self.quick_edit_groups = value
        end
      end

      if attributes.key?(:'quick_set_commands')
        if (value = attributes[:'quick_set_commands']).is_a?(Array)
          self.quick_set_commands = value
        end
      end

      if attributes.key?(:'enable_auto_customer_selection')
        self.enable_auto_customer_selection = attributes[:'enable_auto_customer_selection']
      end

      if attributes.key?(:'require_customer_selection')
        self.require_customer_selection = attributes[:'require_customer_selection']
      end

      if attributes.key?(:'allow_pickup_order_creation')
        self.allow_pickup_order_creation = attributes[:'allow_pickup_order_creation']
      end

      if attributes.key?(:'show_pending_pickup_orders')
        self.show_pending_pickup_orders = attributes[:'show_pending_pickup_orders']
      end

      if attributes.key?(:'show_pending_shipping_orders')
        self.show_pending_shipping_orders = attributes[:'show_pending_shipping_orders']
      end

      if attributes.key?(:'enable_on_screen_keyboard')
        self.enable_on_screen_keyboard = attributes[:'enable_on_screen_keyboard']
      end

      if attributes.key?(:'allow_customer_pricing_updates')
        self.allow_customer_pricing_updates = attributes[:'allow_customer_pricing_updates']
      end

      if attributes.key?(:'read_only')
        self.read_only = attributes[:'read_only']
      end

      if attributes.key?(:'adjust_loyalty_points')
        self.adjust_loyalty_points = attributes[:'adjust_loyalty_points']
      end

      if attributes.key?(:'adjust_loyalty_currency')
        self.adjust_loyalty_currency = attributes[:'adjust_loyalty_currency']
      end

      if attributes.key?(:'adjust_frequent_buyer_balances')
        self.adjust_frequent_buyer_balances = attributes[:'adjust_frequent_buyer_balances']
      end

      if attributes.key?(:'transfer_frequent_buyer_balances')
        self.transfer_frequent_buyer_balances = attributes[:'transfer_frequent_buyer_balances']
      end

      if attributes.key?(:'coupon_lookup')
        self.coupon_lookup = attributes[:'coupon_lookup']
      end

      if attributes.key?(:'device_settings')
        if (value = attributes[:'device_settings']).is_a?(Hash)
          self.device_settings = value
        end
      end

      if attributes.key?(:'device_profile_capabilities')
        if (value = attributes[:'device_profile_capabilities']).is_a?(Hash)
          self.device_profile_capabilities = value
        end
      end

      if attributes.key?(:'device_profile_capability_ordered_lists')
        if (value = attributes[:'device_profile_capability_ordered_lists']).is_a?(Hash)
          self.device_profile_capability_ordered_lists = value
        end
      end

      if attributes.key?(:'device_profile_capability_dictionaries')
        if (value = attributes[:'device_profile_capability_dictionaries']).is_a?(Hash)
          self.device_profile_capability_dictionaries = value
        end
      end

      if attributes.key?(:'device_profile_permissions')
        if (value = attributes[:'device_profile_permissions']).is_a?(Hash)
          self.device_profile_permissions = value
        end
      end

      if attributes.key?(:'device_profile_permission_levels')
        if (value = attributes[:'device_profile_permission_levels']).is_a?(Hash)
          self.device_profile_permission_levels = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          labels == o.labels &&
          capabilities == o.capabilities &&
          purchase_history_columns == o.purchase_history_columns &&
          customer_search_columns == o.customer_search_columns &&
          find_customer_options == o.find_customer_options &&
          customer_view_sections == o.customer_view_sections &&
          frequent_buyer_trans_columns == o.frequent_buyer_trans_columns &&
          loyalty_points_trans_columns == o.loyalty_points_trans_columns &&
          loyalty_currency_trans_columns == o.loyalty_currency_trans_columns &&
          quick_signup_fields_enabled == o.quick_signup_fields_enabled &&
          quick_signup_fields_required == o.quick_signup_fields_required &&
          quick_edit_fields_enabled == o.quick_edit_fields_enabled &&
          quick_edit_fields_required == o.quick_edit_fields_required &&
          quick_signup_fields == o.quick_signup_fields &&
          quick_signup_groups == o.quick_signup_groups &&
          quick_edit_fields == o.quick_edit_fields &&
          quick_edit_groups == o.quick_edit_groups &&
          quick_set_commands == o.quick_set_commands &&
          enable_auto_customer_selection == o.enable_auto_customer_selection &&
          require_customer_selection == o.require_customer_selection &&
          allow_pickup_order_creation == o.allow_pickup_order_creation &&
          show_pending_pickup_orders == o.show_pending_pickup_orders &&
          show_pending_shipping_orders == o.show_pending_shipping_orders &&
          enable_on_screen_keyboard == o.enable_on_screen_keyboard &&
          allow_customer_pricing_updates == o.allow_customer_pricing_updates &&
          read_only == o.read_only &&
          adjust_loyalty_points == o.adjust_loyalty_points &&
          adjust_loyalty_currency == o.adjust_loyalty_currency &&
          adjust_frequent_buyer_balances == o.adjust_frequent_buyer_balances &&
          transfer_frequent_buyer_balances == o.transfer_frequent_buyer_balances &&
          coupon_lookup == o.coupon_lookup &&
          device_settings == o.device_settings &&
          device_profile_capabilities == o.device_profile_capabilities &&
          device_profile_capability_ordered_lists == o.device_profile_capability_ordered_lists &&
          device_profile_capability_dictionaries == o.device_profile_capability_dictionaries &&
          device_profile_permissions == o.device_profile_permissions &&
          device_profile_permission_levels == o.device_profile_permission_levels
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [labels, capabilities, purchase_history_columns, customer_search_columns, find_customer_options, customer_view_sections, frequent_buyer_trans_columns, loyalty_points_trans_columns, loyalty_currency_trans_columns, quick_signup_fields_enabled, quick_signup_fields_required, quick_edit_fields_enabled, quick_edit_fields_required, quick_signup_fields, quick_signup_groups, quick_edit_fields, quick_edit_groups, quick_set_commands, enable_auto_customer_selection, require_customer_selection, allow_pickup_order_creation, show_pending_pickup_orders, show_pending_shipping_orders, enable_on_screen_keyboard, allow_customer_pricing_updates, read_only, adjust_loyalty_points, adjust_loyalty_currency, adjust_frequent_buyer_balances, transfer_frequent_buyer_balances, coupon_lookup, device_settings, device_profile_capabilities, device_profile_capability_ordered_lists, device_profile_capability_dictionaries, device_profile_permissions, device_profile_permission_levels].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        BloyalLoyaltyClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
