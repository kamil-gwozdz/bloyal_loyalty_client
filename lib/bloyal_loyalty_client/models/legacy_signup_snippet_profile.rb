=begin
#bLoyal.LoyaltyService

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module BloyalLoyaltyClient
  class LegacySignupSnippetProfile
    attr_accessor :id

    attr_accessor :usage_id

    attr_accessor :quick_signup_fields

    attr_accessor :subscriber_groups

    attr_accessor :snippet_master_id

    attr_accessor :title

    attr_accessor :code

    attr_accessor :type

    attr_accessor :is_standard_requirement

    attr_accessor :is_return_success_url

    attr_accessor :success_url_or_snippet

    attr_accessor :success_snippet_club_code

    attr_accessor :is_return_success_message

    attr_accessor :success_message

    attr_accessor :login_type

    attr_accessor :login_url

    attr_accessor :login_signup_snippet_code

    attr_accessor :is_return_error_url

    attr_accessor :error_url_or_snippet

    attr_accessor :error_snippet_club_code

    attr_accessor :custom_code_display_type

    attr_accessor :custom_code_fields

    attr_accessor :minimum_length

    attr_accessor :maximum_length

    attr_accessor :loyalty_num_type

    attr_accessor :is_loyalty_num_zero_fill

    attr_accessor :theme

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'Id',
        :'usage_id' => :'UsageId',
        :'quick_signup_fields' => :'QuickSignupFields',
        :'subscriber_groups' => :'SubscriberGroups',
        :'snippet_master_id' => :'SnippetMasterId',
        :'title' => :'Title',
        :'code' => :'Code',
        :'type' => :'Type',
        :'is_standard_requirement' => :'IsStandardRequirement',
        :'is_return_success_url' => :'IsReturnSuccessUrl',
        :'success_url_or_snippet' => :'SuccessUrlOrSnippet',
        :'success_snippet_club_code' => :'SuccessSnippetClubCode',
        :'is_return_success_message' => :'IsReturnSuccessMessage',
        :'success_message' => :'SuccessMessage',
        :'login_type' => :'LoginType',
        :'login_url' => :'LoginUrl',
        :'login_signup_snippet_code' => :'LoginSignupSnippetCode',
        :'is_return_error_url' => :'IsReturnErrorUrl',
        :'error_url_or_snippet' => :'ErrorUrlOrSnippet',
        :'error_snippet_club_code' => :'ErrorSnippetClubCode',
        :'custom_code_display_type' => :'CustomCodeDisplayType',
        :'custom_code_fields' => :'CustomCodeFields',
        :'minimum_length' => :'MinimumLength',
        :'maximum_length' => :'MaximumLength',
        :'loyalty_num_type' => :'LoyaltyNumType',
        :'is_loyalty_num_zero_fill' => :'IsLoyaltyNumZeroFill',
        :'theme' => :'Theme'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Object',
        :'usage_id' => :'Object',
        :'quick_signup_fields' => :'Object',
        :'subscriber_groups' => :'Object',
        :'snippet_master_id' => :'Object',
        :'title' => :'Object',
        :'code' => :'Object',
        :'type' => :'Object',
        :'is_standard_requirement' => :'Object',
        :'is_return_success_url' => :'Object',
        :'success_url_or_snippet' => :'Object',
        :'success_snippet_club_code' => :'Object',
        :'is_return_success_message' => :'Object',
        :'success_message' => :'Object',
        :'login_type' => :'Object',
        :'login_url' => :'Object',
        :'login_signup_snippet_code' => :'Object',
        :'is_return_error_url' => :'Object',
        :'error_url_or_snippet' => :'Object',
        :'error_snippet_club_code' => :'Object',
        :'custom_code_display_type' => :'Object',
        :'custom_code_fields' => :'Object',
        :'minimum_length' => :'Object',
        :'maximum_length' => :'Object',
        :'loyalty_num_type' => :'Object',
        :'is_loyalty_num_zero_fill' => :'Object',
        :'theme' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `BloyalLoyaltyClient::LegacySignupSnippetProfile` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `BloyalLoyaltyClient::LegacySignupSnippetProfile`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'usage_id')
        self.usage_id = attributes[:'usage_id']
      end

      if attributes.key?(:'quick_signup_fields')
        if (value = attributes[:'quick_signup_fields']).is_a?(Array)
          self.quick_signup_fields = value
        end
      end

      if attributes.key?(:'subscriber_groups')
        if (value = attributes[:'subscriber_groups']).is_a?(Array)
          self.subscriber_groups = value
        end
      end

      if attributes.key?(:'snippet_master_id')
        self.snippet_master_id = attributes[:'snippet_master_id']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'is_standard_requirement')
        self.is_standard_requirement = attributes[:'is_standard_requirement']
      end

      if attributes.key?(:'is_return_success_url')
        self.is_return_success_url = attributes[:'is_return_success_url']
      end

      if attributes.key?(:'success_url_or_snippet')
        self.success_url_or_snippet = attributes[:'success_url_or_snippet']
      end

      if attributes.key?(:'success_snippet_club_code')
        self.success_snippet_club_code = attributes[:'success_snippet_club_code']
      end

      if attributes.key?(:'is_return_success_message')
        self.is_return_success_message = attributes[:'is_return_success_message']
      end

      if attributes.key?(:'success_message')
        self.success_message = attributes[:'success_message']
      end

      if attributes.key?(:'login_type')
        self.login_type = attributes[:'login_type']
      end

      if attributes.key?(:'login_url')
        self.login_url = attributes[:'login_url']
      end

      if attributes.key?(:'login_signup_snippet_code')
        self.login_signup_snippet_code = attributes[:'login_signup_snippet_code']
      end

      if attributes.key?(:'is_return_error_url')
        self.is_return_error_url = attributes[:'is_return_error_url']
      end

      if attributes.key?(:'error_url_or_snippet')
        self.error_url_or_snippet = attributes[:'error_url_or_snippet']
      end

      if attributes.key?(:'error_snippet_club_code')
        self.error_snippet_club_code = attributes[:'error_snippet_club_code']
      end

      if attributes.key?(:'custom_code_display_type')
        self.custom_code_display_type = attributes[:'custom_code_display_type']
      end

      if attributes.key?(:'custom_code_fields')
        if (value = attributes[:'custom_code_fields']).is_a?(Array)
          self.custom_code_fields = value
        end
      end

      if attributes.key?(:'minimum_length')
        self.minimum_length = attributes[:'minimum_length']
      end

      if attributes.key?(:'maximum_length')
        self.maximum_length = attributes[:'maximum_length']
      end

      if attributes.key?(:'loyalty_num_type')
        self.loyalty_num_type = attributes[:'loyalty_num_type']
      end

      if attributes.key?(:'is_loyalty_num_zero_fill')
        self.is_loyalty_num_zero_fill = attributes[:'is_loyalty_num_zero_fill']
      end

      if attributes.key?(:'theme')
        self.theme = attributes[:'theme']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      type_validator = EnumAttributeValidator.new('Object', ['Undefined', 'Login', 'Signup', 'AccountManagement', 'ClubSignup', 'Dashboard', 'CustomerDetails', 'OrderPickup', 'SalesTransactions', 'CustomerReferrals', 'Alert', 'PurchaseHistory', 'PaymentMethods', 'RecordEngagement'])
      return false unless type_validator.valid?(@type)
      login_type_validator = EnumAttributeValidator.new('Object', ['Undefined', 'NotRequired', 'ConfiguredUrl', 'ConfiguredSnippet', 'ExternalQueryUrl', 'ExternalQuerySnippet', 'ExternalElementUrl', 'ExternalElementSnippet'])
      return false unless login_type_validator.valid?(@login_type)
      theme_validator = EnumAttributeValidator.new('Object', ['Default', 'MaterialUI'])
      return false unless theme_validator.valid?(@theme)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('Object', ['Undefined', 'Login', 'Signup', 'AccountManagement', 'ClubSignup', 'Dashboard', 'CustomerDetails', 'OrderPickup', 'SalesTransactions', 'CustomerReferrals', 'Alert', 'PurchaseHistory', 'PaymentMethods', 'RecordEngagement'])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] login_type Object to be assigned
    def login_type=(login_type)
      validator = EnumAttributeValidator.new('Object', ['Undefined', 'NotRequired', 'ConfiguredUrl', 'ConfiguredSnippet', 'ExternalQueryUrl', 'ExternalQuerySnippet', 'ExternalElementUrl', 'ExternalElementSnippet'])
      unless validator.valid?(login_type)
        fail ArgumentError, "invalid value for \"login_type\", must be one of #{validator.allowable_values}."
      end
      @login_type = login_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] theme Object to be assigned
    def theme=(theme)
      validator = EnumAttributeValidator.new('Object', ['Default', 'MaterialUI'])
      unless validator.valid?(theme)
        fail ArgumentError, "invalid value for \"theme\", must be one of #{validator.allowable_values}."
      end
      @theme = theme
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          usage_id == o.usage_id &&
          quick_signup_fields == o.quick_signup_fields &&
          subscriber_groups == o.subscriber_groups &&
          snippet_master_id == o.snippet_master_id &&
          title == o.title &&
          code == o.code &&
          type == o.type &&
          is_standard_requirement == o.is_standard_requirement &&
          is_return_success_url == o.is_return_success_url &&
          success_url_or_snippet == o.success_url_or_snippet &&
          success_snippet_club_code == o.success_snippet_club_code &&
          is_return_success_message == o.is_return_success_message &&
          success_message == o.success_message &&
          login_type == o.login_type &&
          login_url == o.login_url &&
          login_signup_snippet_code == o.login_signup_snippet_code &&
          is_return_error_url == o.is_return_error_url &&
          error_url_or_snippet == o.error_url_or_snippet &&
          error_snippet_club_code == o.error_snippet_club_code &&
          custom_code_display_type == o.custom_code_display_type &&
          custom_code_fields == o.custom_code_fields &&
          minimum_length == o.minimum_length &&
          maximum_length == o.maximum_length &&
          loyalty_num_type == o.loyalty_num_type &&
          is_loyalty_num_zero_fill == o.is_loyalty_num_zero_fill &&
          theme == o.theme
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, usage_id, quick_signup_fields, subscriber_groups, snippet_master_id, title, code, type, is_standard_requirement, is_return_success_url, success_url_or_snippet, success_snippet_club_code, is_return_success_message, success_message, login_type, login_url, login_signup_snippet_code, is_return_error_url, error_url_or_snippet, error_snippet_club_code, custom_code_display_type, custom_code_fields, minimum_length, maximum_length, loyalty_num_type, is_loyalty_num_zero_fill, theme].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        BloyalLoyaltyClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
