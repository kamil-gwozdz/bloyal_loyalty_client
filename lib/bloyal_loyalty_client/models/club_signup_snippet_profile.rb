=begin
#bLoyal.LoyaltyService

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module BloyalLoyaltyClient
  class ClubSignupSnippetProfile
    attr_accessor :order_type

    attr_accessor :inventory_location_uids

    attr_accessor :products

    attr_accessor :club_member_contact_fields

    attr_accessor :shipping_address_fields

    attr_accessor :gift_memberships_enabled

    attr_accessor :allow_members_to_replace_products

    attr_accessor :allow_members_to_append_products

    attr_accessor :product_preference_display_fields

    attr_accessor :clubs

    attr_accessor :club_product_options

    attr_accessor :minimum_quantity

    attr_accessor :minimum_price

    attr_accessor :redirect_on_login_error

    attr_accessor :redirect_on_login_success

    attr_accessor :show_message_on_login_success

    attr_accessor :redirect_to_remote_login

    attr_accessor :include_shipping_preferences

    attr_accessor :include_payment_preferences

    attr_accessor :include_product_preferences

    attr_accessor :include_member_contact_info

    attr_accessor :membership_selection_type_text

    attr_accessor :standard_membership_type_text

    attr_accessor :gift_membership_type_text

    attr_accessor :snippet_configuration_error_message

    attr_accessor :shipping_address_selection_text

    attr_accessor :pickup_location_selection_text

    attr_accessor :id

    attr_accessor :usage_id

    attr_accessor :payment_type_list

    attr_accessor :snippet_master_id

    attr_accessor :success_snippet_club_code

    attr_accessor :is_return_success_url

    attr_accessor :success_url_or_snippet

    attr_accessor :success_message

    attr_accessor :error_snippet_club_code

    attr_accessor :login_type

    attr_accessor :login_url

    attr_accessor :login_snippet_code

    attr_accessor :gift_member_signup_snippet_code

    attr_accessor :custom_code_display_type

    attr_accessor :custom_code_fields

    attr_accessor :step_indicators

    attr_accessor :is_update_command

    attr_accessor :is_pickup_order

    attr_accessor :is_shipping_order

    attr_accessor :ask_membership_type_question

    attr_accessor :standard_membership_type_caption

    attr_accessor :gift_membership_type_caption

    attr_accessor :is_club_membership_codes

    attr_accessor :is_club_run

    attr_accessor :member_selection_type

    attr_accessor :web_store_external_url

    attr_accessor :club_run_uid

    attr_accessor :s_product_club_run

    attr_accessor :min_product_club_run

    attr_accessor :max_product_club_run

    attr_accessor :min_price_for_product_selection

    attr_accessor :min_quantity_for_product_selection

    attr_accessor :link_append

    attr_accessor :link_remove

    attr_accessor :product_preference_caption

    attr_accessor :code

    attr_accessor :title

    attr_accessor :type

    attr_accessor :captions_standard

    attr_accessor :captions_append

    attr_accessor :captions_replace

    attr_accessor :remove_material_styles

    attr_accessor :minimum_length

    attr_accessor :maximum_length

    attr_accessor :loyalty_num_type

    attr_accessor :is_loyalty_num_zero_fill

    attr_accessor :theme

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'order_type' => :'OrderType',
        :'inventory_location_uids' => :'InventoryLocationUids',
        :'products' => :'Products',
        :'club_member_contact_fields' => :'ClubMemberContactFields',
        :'shipping_address_fields' => :'ShippingAddressFields',
        :'gift_memberships_enabled' => :'GiftMembershipsEnabled',
        :'allow_members_to_replace_products' => :'AllowMembersToReplaceProducts',
        :'allow_members_to_append_products' => :'AllowMembersToAppendProducts',
        :'product_preference_display_fields' => :'ProductPreferenceDisplayFields',
        :'clubs' => :'Clubs',
        :'club_product_options' => :'ClubProductOptions',
        :'minimum_quantity' => :'MinimumQuantity',
        :'minimum_price' => :'MinimumPrice',
        :'redirect_on_login_error' => :'RedirectOnLoginError',
        :'redirect_on_login_success' => :'RedirectOnLoginSuccess',
        :'show_message_on_login_success' => :'ShowMessageOnLoginSuccess',
        :'redirect_to_remote_login' => :'RedirectToRemoteLogin',
        :'include_shipping_preferences' => :'IncludeShippingPreferences',
        :'include_payment_preferences' => :'IncludePaymentPreferences',
        :'include_product_preferences' => :'IncludeProductPreferences',
        :'include_member_contact_info' => :'IncludeMemberContactInfo',
        :'membership_selection_type_text' => :'MembershipSelectionTypeText',
        :'standard_membership_type_text' => :'StandardMembershipTypeText',
        :'gift_membership_type_text' => :'GiftMembershipTypeText',
        :'snippet_configuration_error_message' => :'SnippetConfigurationErrorMessage',
        :'shipping_address_selection_text' => :'ShippingAddressSelectionText',
        :'pickup_location_selection_text' => :'PickupLocationSelectionText',
        :'id' => :'Id',
        :'usage_id' => :'UsageId',
        :'payment_type_list' => :'PaymentTypeList',
        :'snippet_master_id' => :'SnippetMasterId',
        :'success_snippet_club_code' => :'SuccessSnippetClubCode',
        :'is_return_success_url' => :'IsReturnSuccessUrl',
        :'success_url_or_snippet' => :'SuccessUrlOrSnippet',
        :'success_message' => :'SuccessMessage',
        :'error_snippet_club_code' => :'ErrorSnippetClubCode',
        :'login_type' => :'LoginType',
        :'login_url' => :'LoginUrl',
        :'login_snippet_code' => :'LoginSnippetCode',
        :'gift_member_signup_snippet_code' => :'GiftMemberSignupSnippetCode',
        :'custom_code_display_type' => :'CustomCodeDisplayType',
        :'custom_code_fields' => :'CustomCodeFields',
        :'step_indicators' => :'StepIndicators',
        :'is_update_command' => :'IsUpdateCommand',
        :'is_pickup_order' => :'IsPickupOrder',
        :'is_shipping_order' => :'IsShippingOrder',
        :'ask_membership_type_question' => :'AskMembershipTypeQuestion',
        :'standard_membership_type_caption' => :'StandardMembershipTypeCaption',
        :'gift_membership_type_caption' => :'GiftMembershipTypeCaption',
        :'is_club_membership_codes' => :'IsClubMembershipCodes',
        :'is_club_run' => :'IsClubRun',
        :'member_selection_type' => :'MemberSelectionType',
        :'web_store_external_url' => :'WebStoreExternalURL',
        :'club_run_uid' => :'ClubRunUid',
        :'s_product_club_run' => :'SProductClubRun',
        :'min_product_club_run' => :'MinProductClubRun',
        :'max_product_club_run' => :'MaxProductClubRun',
        :'min_price_for_product_selection' => :'MinPriceForProductSelection',
        :'min_quantity_for_product_selection' => :'MinQuantityForProductSelection',
        :'link_append' => :'LinkAppend',
        :'link_remove' => :'LinkRemove',
        :'product_preference_caption' => :'ProductPreferenceCaption',
        :'code' => :'Code',
        :'title' => :'Title',
        :'type' => :'Type',
        :'captions_standard' => :'CaptionsStandard',
        :'captions_append' => :'CaptionsAppend',
        :'captions_replace' => :'CaptionsReplace',
        :'remove_material_styles' => :'RemoveMaterialStyles',
        :'minimum_length' => :'MinimumLength',
        :'maximum_length' => :'MaximumLength',
        :'loyalty_num_type' => :'LoyaltyNumType',
        :'is_loyalty_num_zero_fill' => :'IsLoyaltyNumZeroFill',
        :'theme' => :'Theme'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'order_type' => :'Object',
        :'inventory_location_uids' => :'Object',
        :'products' => :'Object',
        :'club_member_contact_fields' => :'Object',
        :'shipping_address_fields' => :'Object',
        :'gift_memberships_enabled' => :'Object',
        :'allow_members_to_replace_products' => :'Object',
        :'allow_members_to_append_products' => :'Object',
        :'product_preference_display_fields' => :'Object',
        :'clubs' => :'Object',
        :'club_product_options' => :'Object',
        :'minimum_quantity' => :'Object',
        :'minimum_price' => :'Object',
        :'redirect_on_login_error' => :'Object',
        :'redirect_on_login_success' => :'Object',
        :'show_message_on_login_success' => :'Object',
        :'redirect_to_remote_login' => :'Object',
        :'include_shipping_preferences' => :'Object',
        :'include_payment_preferences' => :'Object',
        :'include_product_preferences' => :'Object',
        :'include_member_contact_info' => :'Object',
        :'membership_selection_type_text' => :'Object',
        :'standard_membership_type_text' => :'Object',
        :'gift_membership_type_text' => :'Object',
        :'snippet_configuration_error_message' => :'Object',
        :'shipping_address_selection_text' => :'Object',
        :'pickup_location_selection_text' => :'Object',
        :'id' => :'Object',
        :'usage_id' => :'Object',
        :'payment_type_list' => :'Object',
        :'snippet_master_id' => :'Object',
        :'success_snippet_club_code' => :'Object',
        :'is_return_success_url' => :'Object',
        :'success_url_or_snippet' => :'Object',
        :'success_message' => :'Object',
        :'error_snippet_club_code' => :'Object',
        :'login_type' => :'Object',
        :'login_url' => :'Object',
        :'login_snippet_code' => :'Object',
        :'gift_member_signup_snippet_code' => :'Object',
        :'custom_code_display_type' => :'Object',
        :'custom_code_fields' => :'Object',
        :'step_indicators' => :'Object',
        :'is_update_command' => :'Object',
        :'is_pickup_order' => :'Object',
        :'is_shipping_order' => :'Object',
        :'ask_membership_type_question' => :'Object',
        :'standard_membership_type_caption' => :'Object',
        :'gift_membership_type_caption' => :'Object',
        :'is_club_membership_codes' => :'Object',
        :'is_club_run' => :'Object',
        :'member_selection_type' => :'Object',
        :'web_store_external_url' => :'Object',
        :'club_run_uid' => :'Object',
        :'s_product_club_run' => :'Object',
        :'min_product_club_run' => :'Object',
        :'max_product_club_run' => :'Object',
        :'min_price_for_product_selection' => :'Object',
        :'min_quantity_for_product_selection' => :'Object',
        :'link_append' => :'Object',
        :'link_remove' => :'Object',
        :'product_preference_caption' => :'Object',
        :'code' => :'Object',
        :'title' => :'Object',
        :'type' => :'Object',
        :'captions_standard' => :'Object',
        :'captions_append' => :'Object',
        :'captions_replace' => :'Object',
        :'remove_material_styles' => :'Object',
        :'minimum_length' => :'Object',
        :'maximum_length' => :'Object',
        :'loyalty_num_type' => :'Object',
        :'is_loyalty_num_zero_fill' => :'Object',
        :'theme' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `BloyalLoyaltyClient::ClubSignupSnippetProfile` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `BloyalLoyaltyClient::ClubSignupSnippetProfile`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'order_type')
        self.order_type = attributes[:'order_type']
      end

      if attributes.key?(:'inventory_location_uids')
        if (value = attributes[:'inventory_location_uids']).is_a?(Array)
          self.inventory_location_uids = value
        end
      end

      if attributes.key?(:'products')
        if (value = attributes[:'products']).is_a?(Array)
          self.products = value
        end
      end

      if attributes.key?(:'club_member_contact_fields')
        if (value = attributes[:'club_member_contact_fields']).is_a?(Array)
          self.club_member_contact_fields = value
        end
      end

      if attributes.key?(:'shipping_address_fields')
        if (value = attributes[:'shipping_address_fields']).is_a?(Array)
          self.shipping_address_fields = value
        end
      end

      if attributes.key?(:'gift_memberships_enabled')
        self.gift_memberships_enabled = attributes[:'gift_memberships_enabled']
      end

      if attributes.key?(:'allow_members_to_replace_products')
        self.allow_members_to_replace_products = attributes[:'allow_members_to_replace_products']
      end

      if attributes.key?(:'allow_members_to_append_products')
        self.allow_members_to_append_products = attributes[:'allow_members_to_append_products']
      end

      if attributes.key?(:'product_preference_display_fields')
        if (value = attributes[:'product_preference_display_fields']).is_a?(Array)
          self.product_preference_display_fields = value
        end
      end

      if attributes.key?(:'clubs')
        if (value = attributes[:'clubs']).is_a?(Array)
          self.clubs = value
        end
      end

      if attributes.key?(:'club_product_options')
        if (value = attributes[:'club_product_options']).is_a?(Array)
          self.club_product_options = value
        end
      end

      if attributes.key?(:'minimum_quantity')
        self.minimum_quantity = attributes[:'minimum_quantity']
      end

      if attributes.key?(:'minimum_price')
        self.minimum_price = attributes[:'minimum_price']
      end

      if attributes.key?(:'redirect_on_login_error')
        self.redirect_on_login_error = attributes[:'redirect_on_login_error']
      end

      if attributes.key?(:'redirect_on_login_success')
        self.redirect_on_login_success = attributes[:'redirect_on_login_success']
      end

      if attributes.key?(:'show_message_on_login_success')
        self.show_message_on_login_success = attributes[:'show_message_on_login_success']
      end

      if attributes.key?(:'redirect_to_remote_login')
        self.redirect_to_remote_login = attributes[:'redirect_to_remote_login']
      end

      if attributes.key?(:'include_shipping_preferences')
        self.include_shipping_preferences = attributes[:'include_shipping_preferences']
      end

      if attributes.key?(:'include_payment_preferences')
        self.include_payment_preferences = attributes[:'include_payment_preferences']
      end

      if attributes.key?(:'include_product_preferences')
        self.include_product_preferences = attributes[:'include_product_preferences']
      end

      if attributes.key?(:'include_member_contact_info')
        self.include_member_contact_info = attributes[:'include_member_contact_info']
      end

      if attributes.key?(:'membership_selection_type_text')
        self.membership_selection_type_text = attributes[:'membership_selection_type_text']
      end

      if attributes.key?(:'standard_membership_type_text')
        self.standard_membership_type_text = attributes[:'standard_membership_type_text']
      end

      if attributes.key?(:'gift_membership_type_text')
        self.gift_membership_type_text = attributes[:'gift_membership_type_text']
      end

      if attributes.key?(:'snippet_configuration_error_message')
        self.snippet_configuration_error_message = attributes[:'snippet_configuration_error_message']
      end

      if attributes.key?(:'shipping_address_selection_text')
        self.shipping_address_selection_text = attributes[:'shipping_address_selection_text']
      end

      if attributes.key?(:'pickup_location_selection_text')
        self.pickup_location_selection_text = attributes[:'pickup_location_selection_text']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'usage_id')
        self.usage_id = attributes[:'usage_id']
      end

      if attributes.key?(:'payment_type_list')
        if (value = attributes[:'payment_type_list']).is_a?(Array)
          self.payment_type_list = value
        end
      end

      if attributes.key?(:'snippet_master_id')
        self.snippet_master_id = attributes[:'snippet_master_id']
      end

      if attributes.key?(:'success_snippet_club_code')
        self.success_snippet_club_code = attributes[:'success_snippet_club_code']
      end

      if attributes.key?(:'is_return_success_url')
        self.is_return_success_url = attributes[:'is_return_success_url']
      end

      if attributes.key?(:'success_url_or_snippet')
        self.success_url_or_snippet = attributes[:'success_url_or_snippet']
      end

      if attributes.key?(:'success_message')
        self.success_message = attributes[:'success_message']
      end

      if attributes.key?(:'error_snippet_club_code')
        self.error_snippet_club_code = attributes[:'error_snippet_club_code']
      end

      if attributes.key?(:'login_type')
        self.login_type = attributes[:'login_type']
      end

      if attributes.key?(:'login_url')
        self.login_url = attributes[:'login_url']
      end

      if attributes.key?(:'login_snippet_code')
        self.login_snippet_code = attributes[:'login_snippet_code']
      end

      if attributes.key?(:'gift_member_signup_snippet_code')
        self.gift_member_signup_snippet_code = attributes[:'gift_member_signup_snippet_code']
      end

      if attributes.key?(:'custom_code_display_type')
        self.custom_code_display_type = attributes[:'custom_code_display_type']
      end

      if attributes.key?(:'custom_code_fields')
        if (value = attributes[:'custom_code_fields']).is_a?(Array)
          self.custom_code_fields = value
        end
      end

      if attributes.key?(:'step_indicators')
        self.step_indicators = attributes[:'step_indicators']
      end

      if attributes.key?(:'is_update_command')
        self.is_update_command = attributes[:'is_update_command']
      end

      if attributes.key?(:'is_pickup_order')
        self.is_pickup_order = attributes[:'is_pickup_order']
      end

      if attributes.key?(:'is_shipping_order')
        self.is_shipping_order = attributes[:'is_shipping_order']
      end

      if attributes.key?(:'ask_membership_type_question')
        self.ask_membership_type_question = attributes[:'ask_membership_type_question']
      end

      if attributes.key?(:'standard_membership_type_caption')
        self.standard_membership_type_caption = attributes[:'standard_membership_type_caption']
      end

      if attributes.key?(:'gift_membership_type_caption')
        self.gift_membership_type_caption = attributes[:'gift_membership_type_caption']
      end

      if attributes.key?(:'is_club_membership_codes')
        self.is_club_membership_codes = attributes[:'is_club_membership_codes']
      end

      if attributes.key?(:'is_club_run')
        self.is_club_run = attributes[:'is_club_run']
      end

      if attributes.key?(:'member_selection_type')
        self.member_selection_type = attributes[:'member_selection_type']
      end

      if attributes.key?(:'web_store_external_url')
        self.web_store_external_url = attributes[:'web_store_external_url']
      end

      if attributes.key?(:'club_run_uid')
        self.club_run_uid = attributes[:'club_run_uid']
      end

      if attributes.key?(:'s_product_club_run')
        if (value = attributes[:'s_product_club_run']).is_a?(Array)
          self.s_product_club_run = value
        end
      end

      if attributes.key?(:'min_product_club_run')
        if (value = attributes[:'min_product_club_run']).is_a?(Array)
          self.min_product_club_run = value
        end
      end

      if attributes.key?(:'max_product_club_run')
        if (value = attributes[:'max_product_club_run']).is_a?(Array)
          self.max_product_club_run = value
        end
      end

      if attributes.key?(:'min_price_for_product_selection')
        self.min_price_for_product_selection = attributes[:'min_price_for_product_selection']
      end

      if attributes.key?(:'min_quantity_for_product_selection')
        self.min_quantity_for_product_selection = attributes[:'min_quantity_for_product_selection']
      end

      if attributes.key?(:'link_append')
        self.link_append = attributes[:'link_append']
      end

      if attributes.key?(:'link_remove')
        self.link_remove = attributes[:'link_remove']
      end

      if attributes.key?(:'product_preference_caption')
        self.product_preference_caption = attributes[:'product_preference_caption']
      end

      if attributes.key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'captions_standard')
        self.captions_standard = attributes[:'captions_standard']
      end

      if attributes.key?(:'captions_append')
        self.captions_append = attributes[:'captions_append']
      end

      if attributes.key?(:'captions_replace')
        self.captions_replace = attributes[:'captions_replace']
      end

      if attributes.key?(:'remove_material_styles')
        self.remove_material_styles = attributes[:'remove_material_styles']
      end

      if attributes.key?(:'minimum_length')
        self.minimum_length = attributes[:'minimum_length']
      end

      if attributes.key?(:'maximum_length')
        self.maximum_length = attributes[:'maximum_length']
      end

      if attributes.key?(:'loyalty_num_type')
        self.loyalty_num_type = attributes[:'loyalty_num_type']
      end

      if attributes.key?(:'is_loyalty_num_zero_fill')
        self.is_loyalty_num_zero_fill = attributes[:'is_loyalty_num_zero_fill']
      end

      if attributes.key?(:'theme')
        self.theme = attributes[:'theme']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      order_type_validator = EnumAttributeValidator.new('Object', ['Pickup', 'Shipping'])
      return false unless order_type_validator.valid?(@order_type)
      login_type_validator = EnumAttributeValidator.new('Object', ['Undefined', 'NotRequired', 'ConfiguredUrl', 'ConfiguredSnippet', 'ExternalQueryUrl', 'ExternalQuerySnippet', 'ExternalElementUrl', 'ExternalElementSnippet'])
      return false unless login_type_validator.valid?(@login_type)
      type_validator = EnumAttributeValidator.new('Object', ['Undefined', 'Login', 'Signup', 'AccountManagement', 'ClubSignup', 'Dashboard', 'CustomerDetails', 'OrderPickup', 'SalesTransactions', 'CustomerReferrals', 'Alert', 'PurchaseHistory', 'PaymentMethods', 'RecordEngagement'])
      return false unless type_validator.valid?(@type)
      theme_validator = EnumAttributeValidator.new('Object', ['Default', 'MaterialUI'])
      return false unless theme_validator.valid?(@theme)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] order_type Object to be assigned
    def order_type=(order_type)
      validator = EnumAttributeValidator.new('Object', ['Pickup', 'Shipping'])
      unless validator.valid?(order_type)
        fail ArgumentError, "invalid value for \"order_type\", must be one of #{validator.allowable_values}."
      end
      @order_type = order_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] login_type Object to be assigned
    def login_type=(login_type)
      validator = EnumAttributeValidator.new('Object', ['Undefined', 'NotRequired', 'ConfiguredUrl', 'ConfiguredSnippet', 'ExternalQueryUrl', 'ExternalQuerySnippet', 'ExternalElementUrl', 'ExternalElementSnippet'])
      unless validator.valid?(login_type)
        fail ArgumentError, "invalid value for \"login_type\", must be one of #{validator.allowable_values}."
      end
      @login_type = login_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('Object', ['Undefined', 'Login', 'Signup', 'AccountManagement', 'ClubSignup', 'Dashboard', 'CustomerDetails', 'OrderPickup', 'SalesTransactions', 'CustomerReferrals', 'Alert', 'PurchaseHistory', 'PaymentMethods', 'RecordEngagement'])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] theme Object to be assigned
    def theme=(theme)
      validator = EnumAttributeValidator.new('Object', ['Default', 'MaterialUI'])
      unless validator.valid?(theme)
        fail ArgumentError, "invalid value for \"theme\", must be one of #{validator.allowable_values}."
      end
      @theme = theme
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          order_type == o.order_type &&
          inventory_location_uids == o.inventory_location_uids &&
          products == o.products &&
          club_member_contact_fields == o.club_member_contact_fields &&
          shipping_address_fields == o.shipping_address_fields &&
          gift_memberships_enabled == o.gift_memberships_enabled &&
          allow_members_to_replace_products == o.allow_members_to_replace_products &&
          allow_members_to_append_products == o.allow_members_to_append_products &&
          product_preference_display_fields == o.product_preference_display_fields &&
          clubs == o.clubs &&
          club_product_options == o.club_product_options &&
          minimum_quantity == o.minimum_quantity &&
          minimum_price == o.minimum_price &&
          redirect_on_login_error == o.redirect_on_login_error &&
          redirect_on_login_success == o.redirect_on_login_success &&
          show_message_on_login_success == o.show_message_on_login_success &&
          redirect_to_remote_login == o.redirect_to_remote_login &&
          include_shipping_preferences == o.include_shipping_preferences &&
          include_payment_preferences == o.include_payment_preferences &&
          include_product_preferences == o.include_product_preferences &&
          include_member_contact_info == o.include_member_contact_info &&
          membership_selection_type_text == o.membership_selection_type_text &&
          standard_membership_type_text == o.standard_membership_type_text &&
          gift_membership_type_text == o.gift_membership_type_text &&
          snippet_configuration_error_message == o.snippet_configuration_error_message &&
          shipping_address_selection_text == o.shipping_address_selection_text &&
          pickup_location_selection_text == o.pickup_location_selection_text &&
          id == o.id &&
          usage_id == o.usage_id &&
          payment_type_list == o.payment_type_list &&
          snippet_master_id == o.snippet_master_id &&
          success_snippet_club_code == o.success_snippet_club_code &&
          is_return_success_url == o.is_return_success_url &&
          success_url_or_snippet == o.success_url_or_snippet &&
          success_message == o.success_message &&
          error_snippet_club_code == o.error_snippet_club_code &&
          login_type == o.login_type &&
          login_url == o.login_url &&
          login_snippet_code == o.login_snippet_code &&
          gift_member_signup_snippet_code == o.gift_member_signup_snippet_code &&
          custom_code_display_type == o.custom_code_display_type &&
          custom_code_fields == o.custom_code_fields &&
          step_indicators == o.step_indicators &&
          is_update_command == o.is_update_command &&
          is_pickup_order == o.is_pickup_order &&
          is_shipping_order == o.is_shipping_order &&
          ask_membership_type_question == o.ask_membership_type_question &&
          standard_membership_type_caption == o.standard_membership_type_caption &&
          gift_membership_type_caption == o.gift_membership_type_caption &&
          is_club_membership_codes == o.is_club_membership_codes &&
          is_club_run == o.is_club_run &&
          member_selection_type == o.member_selection_type &&
          web_store_external_url == o.web_store_external_url &&
          club_run_uid == o.club_run_uid &&
          s_product_club_run == o.s_product_club_run &&
          min_product_club_run == o.min_product_club_run &&
          max_product_club_run == o.max_product_club_run &&
          min_price_for_product_selection == o.min_price_for_product_selection &&
          min_quantity_for_product_selection == o.min_quantity_for_product_selection &&
          link_append == o.link_append &&
          link_remove == o.link_remove &&
          product_preference_caption == o.product_preference_caption &&
          code == o.code &&
          title == o.title &&
          type == o.type &&
          captions_standard == o.captions_standard &&
          captions_append == o.captions_append &&
          captions_replace == o.captions_replace &&
          remove_material_styles == o.remove_material_styles &&
          minimum_length == o.minimum_length &&
          maximum_length == o.maximum_length &&
          loyalty_num_type == o.loyalty_num_type &&
          is_loyalty_num_zero_fill == o.is_loyalty_num_zero_fill &&
          theme == o.theme
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [order_type, inventory_location_uids, products, club_member_contact_fields, shipping_address_fields, gift_memberships_enabled, allow_members_to_replace_products, allow_members_to_append_products, product_preference_display_fields, clubs, club_product_options, minimum_quantity, minimum_price, redirect_on_login_error, redirect_on_login_success, show_message_on_login_success, redirect_to_remote_login, include_shipping_preferences, include_payment_preferences, include_product_preferences, include_member_contact_info, membership_selection_type_text, standard_membership_type_text, gift_membership_type_text, snippet_configuration_error_message, shipping_address_selection_text, pickup_location_selection_text, id, usage_id, payment_type_list, snippet_master_id, success_snippet_club_code, is_return_success_url, success_url_or_snippet, success_message, error_snippet_club_code, login_type, login_url, login_snippet_code, gift_member_signup_snippet_code, custom_code_display_type, custom_code_fields, step_indicators, is_update_command, is_pickup_order, is_shipping_order, ask_membership_type_question, standard_membership_type_caption, gift_membership_type_caption, is_club_membership_codes, is_club_run, member_selection_type, web_store_external_url, club_run_uid, s_product_club_run, min_product_club_run, max_product_club_run, min_price_for_product_selection, min_quantity_for_product_selection, link_append, link_remove, product_preference_caption, code, title, type, captions_standard, captions_append, captions_replace, remove_material_styles, minimum_length, maximum_length, loyalty_num_type, is_loyalty_num_zero_fill, theme].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        BloyalLoyaltyClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
