=begin
#bLoyal.LoyaltyService

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module BloyalLoyaltyClient
  class ClubMembership
    attr_accessor :customer

    attr_accessor :sponsor

    attr_accessor :referral

    attr_accessor :payment

    attr_accessor :fulfillment

    attr_accessor :auto_billing_day

    attr_accessor :auto_billing_start_date

    attr_accessor :product_preference_type

    attr_accessor :product_preferences

    attr_accessor :reference_number

    attr_accessor :custom_code1

    attr_accessor :custom_code2

    attr_accessor :custom_code3

    attr_accessor :custom_code4

    attr_accessor :custom_code5

    attr_accessor :custom_code6

    attr_accessor :custom_code7

    attr_accessor :custom_code8

    attr_accessor :uid

    attr_accessor :club

    attr_accessor :status

    attr_accessor :activation_date

    attr_accessor :expiration_date

    attr_accessor :close_date

    attr_accessor :start_date

    attr_accessor :custom_fields

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'customer' => :'Customer',
        :'sponsor' => :'Sponsor',
        :'referral' => :'Referral',
        :'payment' => :'Payment',
        :'fulfillment' => :'Fulfillment',
        :'auto_billing_day' => :'AutoBillingDay',
        :'auto_billing_start_date' => :'AutoBillingStartDate',
        :'product_preference_type' => :'ProductPreferenceType',
        :'product_preferences' => :'ProductPreferences',
        :'reference_number' => :'ReferenceNumber',
        :'custom_code1' => :'CustomCode1',
        :'custom_code2' => :'CustomCode2',
        :'custom_code3' => :'CustomCode3',
        :'custom_code4' => :'CustomCode4',
        :'custom_code5' => :'CustomCode5',
        :'custom_code6' => :'CustomCode6',
        :'custom_code7' => :'CustomCode7',
        :'custom_code8' => :'CustomCode8',
        :'uid' => :'Uid',
        :'club' => :'Club',
        :'status' => :'Status',
        :'activation_date' => :'ActivationDate',
        :'expiration_date' => :'ExpirationDate',
        :'close_date' => :'CloseDate',
        :'start_date' => :'StartDate',
        :'custom_fields' => :'CustomFields'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'customer' => :'Object',
        :'sponsor' => :'Object',
        :'referral' => :'Object',
        :'payment' => :'Object',
        :'fulfillment' => :'Object',
        :'auto_billing_day' => :'Object',
        :'auto_billing_start_date' => :'Object',
        :'product_preference_type' => :'Object',
        :'product_preferences' => :'Object',
        :'reference_number' => :'Object',
        :'custom_code1' => :'Object',
        :'custom_code2' => :'Object',
        :'custom_code3' => :'Object',
        :'custom_code4' => :'Object',
        :'custom_code5' => :'Object',
        :'custom_code6' => :'Object',
        :'custom_code7' => :'Object',
        :'custom_code8' => :'Object',
        :'uid' => :'Object',
        :'club' => :'Object',
        :'status' => :'Object',
        :'activation_date' => :'Object',
        :'expiration_date' => :'Object',
        :'close_date' => :'Object',
        :'start_date' => :'Object',
        :'custom_fields' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `BloyalLoyaltyClient::ClubMembership` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `BloyalLoyaltyClient::ClubMembership`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'customer')
        self.customer = attributes[:'customer']
      end

      if attributes.key?(:'sponsor')
        self.sponsor = attributes[:'sponsor']
      end

      if attributes.key?(:'referral')
        self.referral = attributes[:'referral']
      end

      if attributes.key?(:'payment')
        self.payment = attributes[:'payment']
      end

      if attributes.key?(:'fulfillment')
        self.fulfillment = attributes[:'fulfillment']
      end

      if attributes.key?(:'auto_billing_day')
        self.auto_billing_day = attributes[:'auto_billing_day']
      end

      if attributes.key?(:'auto_billing_start_date')
        self.auto_billing_start_date = attributes[:'auto_billing_start_date']
      end

      if attributes.key?(:'product_preference_type')
        self.product_preference_type = attributes[:'product_preference_type']
      end

      if attributes.key?(:'product_preferences')
        if (value = attributes[:'product_preferences']).is_a?(Array)
          self.product_preferences = value
        end
      end

      if attributes.key?(:'reference_number')
        self.reference_number = attributes[:'reference_number']
      end

      if attributes.key?(:'custom_code1')
        self.custom_code1 = attributes[:'custom_code1']
      end

      if attributes.key?(:'custom_code2')
        self.custom_code2 = attributes[:'custom_code2']
      end

      if attributes.key?(:'custom_code3')
        self.custom_code3 = attributes[:'custom_code3']
      end

      if attributes.key?(:'custom_code4')
        self.custom_code4 = attributes[:'custom_code4']
      end

      if attributes.key?(:'custom_code5')
        self.custom_code5 = attributes[:'custom_code5']
      end

      if attributes.key?(:'custom_code6')
        self.custom_code6 = attributes[:'custom_code6']
      end

      if attributes.key?(:'custom_code7')
        self.custom_code7 = attributes[:'custom_code7']
      end

      if attributes.key?(:'custom_code8')
        self.custom_code8 = attributes[:'custom_code8']
      end

      if attributes.key?(:'uid')
        self.uid = attributes[:'uid']
      end

      if attributes.key?(:'club')
        self.club = attributes[:'club']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'activation_date')
        self.activation_date = attributes[:'activation_date']
      end

      if attributes.key?(:'expiration_date')
        self.expiration_date = attributes[:'expiration_date']
      end

      if attributes.key?(:'close_date')
        self.close_date = attributes[:'close_date']
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.key?(:'custom_fields')
        self.custom_fields = attributes[:'custom_fields']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      product_preference_type_validator = EnumAttributeValidator.new('Object', ['Undefined', 'Default', 'Replace', 'Append'])
      return false unless product_preference_type_validator.valid?(@product_preference_type)
      status_validator = EnumAttributeValidator.new('Object', ['Undefined', 'Active', 'Inactive', 'Closed', 'Pending', 'LoyaltyOnly'])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] product_preference_type Object to be assigned
    def product_preference_type=(product_preference_type)
      validator = EnumAttributeValidator.new('Object', ['Undefined', 'Default', 'Replace', 'Append'])
      unless validator.valid?(product_preference_type)
        fail ArgumentError, "invalid value for \"product_preference_type\", must be one of #{validator.allowable_values}."
      end
      @product_preference_type = product_preference_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('Object', ['Undefined', 'Active', 'Inactive', 'Closed', 'Pending', 'LoyaltyOnly'])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          customer == o.customer &&
          sponsor == o.sponsor &&
          referral == o.referral &&
          payment == o.payment &&
          fulfillment == o.fulfillment &&
          auto_billing_day == o.auto_billing_day &&
          auto_billing_start_date == o.auto_billing_start_date &&
          product_preference_type == o.product_preference_type &&
          product_preferences == o.product_preferences &&
          reference_number == o.reference_number &&
          custom_code1 == o.custom_code1 &&
          custom_code2 == o.custom_code2 &&
          custom_code3 == o.custom_code3 &&
          custom_code4 == o.custom_code4 &&
          custom_code5 == o.custom_code5 &&
          custom_code6 == o.custom_code6 &&
          custom_code7 == o.custom_code7 &&
          custom_code8 == o.custom_code8 &&
          uid == o.uid &&
          club == o.club &&
          status == o.status &&
          activation_date == o.activation_date &&
          expiration_date == o.expiration_date &&
          close_date == o.close_date &&
          start_date == o.start_date &&
          custom_fields == o.custom_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [customer, sponsor, referral, payment, fulfillment, auto_billing_day, auto_billing_start_date, product_preference_type, product_preferences, reference_number, custom_code1, custom_code2, custom_code3, custom_code4, custom_code5, custom_code6, custom_code7, custom_code8, uid, club, status, activation_date, expiration_date, close_date, start_date, custom_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        BloyalLoyaltyClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
