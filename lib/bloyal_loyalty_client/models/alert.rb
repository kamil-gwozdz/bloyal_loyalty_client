=begin
#bLoyal.LoyaltyService

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module BloyalLoyaltyClient
  class Alert
    attr_accessor :category

    attr_accessor :source

    attr_accessor :type_uid

    attr_accessor :uid

    attr_accessor :message

    attr_accessor :detail

    attr_accessor :cart_uid

    attr_accessor :hook_uid

    attr_accessor :snippet_url

    attr_accessor :additional_data

    attr_accessor :custom_fields

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'category' => :'Category',
        :'source' => :'Source',
        :'type_uid' => :'TypeUid',
        :'uid' => :'Uid',
        :'message' => :'Message',
        :'detail' => :'Detail',
        :'cart_uid' => :'CartUid',
        :'hook_uid' => :'HookUid',
        :'snippet_url' => :'SnippetUrl',
        :'additional_data' => :'AdditionalData',
        :'custom_fields' => :'CustomFields'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'category' => :'Object',
        :'source' => :'Object',
        :'type_uid' => :'Object',
        :'uid' => :'Object',
        :'message' => :'Object',
        :'detail' => :'Object',
        :'cart_uid' => :'Object',
        :'hook_uid' => :'Object',
        :'snippet_url' => :'Object',
        :'additional_data' => :'Object',
        :'custom_fields' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `BloyalLoyaltyClient::Alert` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `BloyalLoyaltyClient::Alert`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'category')
        self.category = attributes[:'category']
      end

      if attributes.key?(:'source')
        self.source = attributes[:'source']
      end

      if attributes.key?(:'type_uid')
        self.type_uid = attributes[:'type_uid']
      end

      if attributes.key?(:'uid')
        self.uid = attributes[:'uid']
      end

      if attributes.key?(:'message')
        self.message = attributes[:'message']
      end

      if attributes.key?(:'detail')
        self.detail = attributes[:'detail']
      end

      if attributes.key?(:'cart_uid')
        self.cart_uid = attributes[:'cart_uid']
      end

      if attributes.key?(:'hook_uid')
        self.hook_uid = attributes[:'hook_uid']
      end

      if attributes.key?(:'snippet_url')
        self.snippet_url = attributes[:'snippet_url']
      end

      if attributes.key?(:'additional_data')
        if (value = attributes[:'additional_data']).is_a?(Array)
          self.additional_data = value
        end
      end

      if attributes.key?(:'custom_fields')
        self.custom_fields = attributes[:'custom_fields']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      category_validator = EnumAttributeValidator.new('Object', ['Undefined', 'Informational', 'Confirmation', 'Problem'])
      return false unless category_validator.valid?(@category)
      source_validator = EnumAttributeValidator.new('Object', ['Undefined', 'Domain', 'Director', 'LoyaltyEngine', 'EngagementEngine', 'Grid', 'POSSnippets', 'MyMobileLoyalty', 'OrderEngine', 'ServiceControlManager', 'WebSnippets', 'ServiceProviderGateway', 'Custom', 'ServiceProvider', 'ServicePlugIn', 'ConnectedSystem'])
      return false unless source_validator.valid?(@source)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] category Object to be assigned
    def category=(category)
      validator = EnumAttributeValidator.new('Object', ['Undefined', 'Informational', 'Confirmation', 'Problem'])
      unless validator.valid?(category)
        fail ArgumentError, "invalid value for \"category\", must be one of #{validator.allowable_values}."
      end
      @category = category
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source Object to be assigned
    def source=(source)
      validator = EnumAttributeValidator.new('Object', ['Undefined', 'Domain', 'Director', 'LoyaltyEngine', 'EngagementEngine', 'Grid', 'POSSnippets', 'MyMobileLoyalty', 'OrderEngine', 'ServiceControlManager', 'WebSnippets', 'ServiceProviderGateway', 'Custom', 'ServiceProvider', 'ServicePlugIn', 'ConnectedSystem'])
      unless validator.valid?(source)
        fail ArgumentError, "invalid value for \"source\", must be one of #{validator.allowable_values}."
      end
      @source = source
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          category == o.category &&
          source == o.source &&
          type_uid == o.type_uid &&
          uid == o.uid &&
          message == o.message &&
          detail == o.detail &&
          cart_uid == o.cart_uid &&
          hook_uid == o.hook_uid &&
          snippet_url == o.snippet_url &&
          additional_data == o.additional_data &&
          custom_fields == o.custom_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [category, source, type_uid, uid, message, detail, cart_uid, hook_uid, snippet_url, additional_data, custom_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        BloyalLoyaltyClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
