=begin
#bLoyal.LoyaltyService

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module BloyalLoyaltyClient
  class CartHeader
    attr_accessor :channel_uid

    attr_accessor :channel_external_id

    attr_accessor :channel_code

    attr_accessor :price_level_uid

    attr_accessor :price_level_external_id

    attr_accessor :price_level_code

    attr_accessor :title

    attr_accessor :comment

    attr_accessor :reference_number

    attr_accessor :loyalty_reference_number

    attr_accessor :custom_code1

    attr_accessor :custom_code2

    attr_accessor :custom_code3

    attr_accessor :custom_code4

    attr_accessor :custom_code5

    attr_accessor :custom_code6

    attr_accessor :custom_code7

    attr_accessor :custom_code8

    attr_accessor :customer

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'channel_uid' => :'ChannelUid',
        :'channel_external_id' => :'ChannelExternalId',
        :'channel_code' => :'ChannelCode',
        :'price_level_uid' => :'PriceLevelUid',
        :'price_level_external_id' => :'PriceLevelExternalId',
        :'price_level_code' => :'PriceLevelCode',
        :'title' => :'Title',
        :'comment' => :'Comment',
        :'reference_number' => :'ReferenceNumber',
        :'loyalty_reference_number' => :'LoyaltyReferenceNumber',
        :'custom_code1' => :'CustomCode1',
        :'custom_code2' => :'CustomCode2',
        :'custom_code3' => :'CustomCode3',
        :'custom_code4' => :'CustomCode4',
        :'custom_code5' => :'CustomCode5',
        :'custom_code6' => :'CustomCode6',
        :'custom_code7' => :'CustomCode7',
        :'custom_code8' => :'CustomCode8',
        :'customer' => :'Customer'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'channel_uid' => :'Object',
        :'channel_external_id' => :'Object',
        :'channel_code' => :'Object',
        :'price_level_uid' => :'Object',
        :'price_level_external_id' => :'Object',
        :'price_level_code' => :'Object',
        :'title' => :'Object',
        :'comment' => :'Object',
        :'reference_number' => :'Object',
        :'loyalty_reference_number' => :'Object',
        :'custom_code1' => :'Object',
        :'custom_code2' => :'Object',
        :'custom_code3' => :'Object',
        :'custom_code4' => :'Object',
        :'custom_code5' => :'Object',
        :'custom_code6' => :'Object',
        :'custom_code7' => :'Object',
        :'custom_code8' => :'Object',
        :'customer' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `BloyalLoyaltyClient::CartHeader` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `BloyalLoyaltyClient::CartHeader`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'channel_uid')
        self.channel_uid = attributes[:'channel_uid']
      end

      if attributes.key?(:'channel_external_id')
        self.channel_external_id = attributes[:'channel_external_id']
      end

      if attributes.key?(:'channel_code')
        self.channel_code = attributes[:'channel_code']
      end

      if attributes.key?(:'price_level_uid')
        self.price_level_uid = attributes[:'price_level_uid']
      end

      if attributes.key?(:'price_level_external_id')
        self.price_level_external_id = attributes[:'price_level_external_id']
      end

      if attributes.key?(:'price_level_code')
        self.price_level_code = attributes[:'price_level_code']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'comment')
        self.comment = attributes[:'comment']
      end

      if attributes.key?(:'reference_number')
        self.reference_number = attributes[:'reference_number']
      end

      if attributes.key?(:'loyalty_reference_number')
        self.loyalty_reference_number = attributes[:'loyalty_reference_number']
      end

      if attributes.key?(:'custom_code1')
        self.custom_code1 = attributes[:'custom_code1']
      end

      if attributes.key?(:'custom_code2')
        self.custom_code2 = attributes[:'custom_code2']
      end

      if attributes.key?(:'custom_code3')
        self.custom_code3 = attributes[:'custom_code3']
      end

      if attributes.key?(:'custom_code4')
        self.custom_code4 = attributes[:'custom_code4']
      end

      if attributes.key?(:'custom_code5')
        self.custom_code5 = attributes[:'custom_code5']
      end

      if attributes.key?(:'custom_code6')
        self.custom_code6 = attributes[:'custom_code6']
      end

      if attributes.key?(:'custom_code7')
        self.custom_code7 = attributes[:'custom_code7']
      end

      if attributes.key?(:'custom_code8')
        self.custom_code8 = attributes[:'custom_code8']
      end

      if attributes.key?(:'customer')
        self.customer = attributes[:'customer']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          channel_uid == o.channel_uid &&
          channel_external_id == o.channel_external_id &&
          channel_code == o.channel_code &&
          price_level_uid == o.price_level_uid &&
          price_level_external_id == o.price_level_external_id &&
          price_level_code == o.price_level_code &&
          title == o.title &&
          comment == o.comment &&
          reference_number == o.reference_number &&
          loyalty_reference_number == o.loyalty_reference_number &&
          custom_code1 == o.custom_code1 &&
          custom_code2 == o.custom_code2 &&
          custom_code3 == o.custom_code3 &&
          custom_code4 == o.custom_code4 &&
          custom_code5 == o.custom_code5 &&
          custom_code6 == o.custom_code6 &&
          custom_code7 == o.custom_code7 &&
          custom_code8 == o.custom_code8 &&
          customer == o.customer
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [channel_uid, channel_external_id, channel_code, price_level_uid, price_level_external_id, price_level_code, title, comment, reference_number, loyalty_reference_number, custom_code1, custom_code2, custom_code3, custom_code4, custom_code5, custom_code6, custom_code7, custom_code8, customer].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        BloyalLoyaltyClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
