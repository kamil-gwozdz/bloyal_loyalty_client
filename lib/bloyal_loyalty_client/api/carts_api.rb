=begin
#bLoyal.LoyaltyService

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module BloyalLoyaltyClient
  class CartsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCalculatedCart]
    def accrue_cart(body, access_key, opts = {})
      data, _status_code, _headers = accrue_cart_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCalculatedCart, Integer, Hash)>] ServerResponseCalculatedCart data, response status code and response headers
    def accrue_cart_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.accrue_cart ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CartsApi.accrue_cart"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.accrue_cart"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/accruals'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CouponCodes'] = @api_client.build_collection_param(coupon_codes, :multi)
      form_params['ExcludedDiscountCodes'] = @api_client.build_collection_param(excluded_discount_codes, :multi)
      form_params['Cart'] = cart
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCalculatedCart' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#accrue_cart\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param coupon_codes 
    # @param excluded_discount_codes 
    # @param cart 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCalculatedCart]
    def accrue_cart(coupon_codes, excluded_discount_codes, cart, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = accrue_cart_with_http_info(coupon_codes, excluded_discount_codes, cart, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param coupon_codes 
    # @param excluded_discount_codes 
    # @param cart 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCalculatedCart, Integer, Hash)>] ServerResponseCalculatedCart data, response status code and response headers
    def accrue_cart_with_http_info(coupon_codes, excluded_discount_codes, cart, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.accrue_cart ...'
      end
      # verify the required parameter 'coupon_codes' is set
      if @api_client.config.client_side_validation && coupon_codes.nil?
        fail ArgumentError, "Missing the required parameter 'coupon_codes' when calling CartsApi.accrue_cart"
      end
      # verify the required parameter 'excluded_discount_codes' is set
      if @api_client.config.client_side_validation && excluded_discount_codes.nil?
        fail ArgumentError, "Missing the required parameter 'excluded_discount_codes' when calling CartsApi.accrue_cart"
      end
      # verify the required parameter 'cart' is set
      if @api_client.config.client_side_validation && cart.nil?
        fail ArgumentError, "Missing the required parameter 'cart' when calling CartsApi.accrue_cart"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling CartsApi.accrue_cart"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling CartsApi.accrue_cart"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling CartsApi.accrue_cart"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling CartsApi.accrue_cart"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling CartsApi.accrue_cart"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling CartsApi.accrue_cart"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CartsApi.accrue_cart"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling CartsApi.accrue_cart"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling CartsApi.accrue_cart"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling CartsApi.accrue_cart"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.accrue_cart"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/accruals'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CouponCodes'] = @api_client.build_collection_param(coupon_codes, :multi)
      form_params['ExcludedDiscountCodes'] = @api_client.build_collection_param(excluded_discount_codes, :multi)
      form_params['Cart'] = cart
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCalculatedCart' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#accrue_cart\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponse]
    def add_rule_exclusion_add_rule_exclusions_async(body, access_key, opts = {})
      data, _status_code, _headers = add_rule_exclusion_add_rule_exclusions_async_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponse, Integer, Hash)>] ServerResponse data, response status code and response headers
    def add_rule_exclusion_add_rule_exclusions_async_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.add_rule_exclusion_add_rule_exclusions_async ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CartsApi.add_rule_exclusion_add_rule_exclusions_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.add_rule_exclusion_add_rule_exclusions_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/addruleexclusions'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CartUid'] = cart_uid
      form_params['CartExternalId'] = cart_external_id
      form_params['CartSourceExternalId'] = cart_source_external_id
      form_params['Rules'] = @api_client.build_collection_param(rules, :multi)
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#add_rule_exclusion_add_rule_exclusions_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param cart_uid 
    # @param cart_external_id 
    # @param cart_source_external_id 
    # @param rules 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponse]
    def add_rule_exclusion_add_rule_exclusions_async(cart_uid, cart_external_id, cart_source_external_id, rules, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = add_rule_exclusion_add_rule_exclusions_async_with_http_info(cart_uid, cart_external_id, cart_source_external_id, rules, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param cart_uid 
    # @param cart_external_id 
    # @param cart_source_external_id 
    # @param rules 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponse, Integer, Hash)>] ServerResponse data, response status code and response headers
    def add_rule_exclusion_add_rule_exclusions_async_with_http_info(cart_uid, cart_external_id, cart_source_external_id, rules, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.add_rule_exclusion_add_rule_exclusions_async ...'
      end
      # verify the required parameter 'cart_uid' is set
      if @api_client.config.client_side_validation && cart_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cart_uid' when calling CartsApi.add_rule_exclusion_add_rule_exclusions_async"
      end
      # verify the required parameter 'cart_external_id' is set
      if @api_client.config.client_side_validation && cart_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cart_external_id' when calling CartsApi.add_rule_exclusion_add_rule_exclusions_async"
      end
      # verify the required parameter 'cart_source_external_id' is set
      if @api_client.config.client_side_validation && cart_source_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cart_source_external_id' when calling CartsApi.add_rule_exclusion_add_rule_exclusions_async"
      end
      # verify the required parameter 'rules' is set
      if @api_client.config.client_side_validation && rules.nil?
        fail ArgumentError, "Missing the required parameter 'rules' when calling CartsApi.add_rule_exclusion_add_rule_exclusions_async"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling CartsApi.add_rule_exclusion_add_rule_exclusions_async"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling CartsApi.add_rule_exclusion_add_rule_exclusions_async"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling CartsApi.add_rule_exclusion_add_rule_exclusions_async"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling CartsApi.add_rule_exclusion_add_rule_exclusions_async"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling CartsApi.add_rule_exclusion_add_rule_exclusions_async"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling CartsApi.add_rule_exclusion_add_rule_exclusions_async"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CartsApi.add_rule_exclusion_add_rule_exclusions_async"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling CartsApi.add_rule_exclusion_add_rule_exclusions_async"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling CartsApi.add_rule_exclusion_add_rule_exclusions_async"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling CartsApi.add_rule_exclusion_add_rule_exclusions_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.add_rule_exclusion_add_rule_exclusions_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/addruleexclusions'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CartUid'] = cart_uid
      form_params['CartExternalId'] = cart_external_id
      form_params['CartSourceExternalId'] = cart_source_external_id
      form_params['Rules'] = @api_client.build_collection_param(rules, :multi)
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#add_rule_exclusion_add_rule_exclusions_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCartApproval]
    def approve_cart(body, access_key, opts = {})
      data, _status_code, _headers = approve_cart_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCartApproval, Integer, Hash)>] ServerResponseCartApproval data, response status code and response headers
    def approve_cart_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.approve_cart ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CartsApi.approve_cart"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.approve_cart"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/approve'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CartUid'] = cart_uid
      form_params['CartExternalId'] = cart_external_id
      form_params['CartSourceExternalId'] = cart_source_external_id
      form_params['OrderProcessor'] = order_processor
      form_params['BypassComplianceChecks'] = bypass_compliance_checks
      form_params['Cart'] = cart
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCartApproval' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#approve_cart\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param cart_uid 
    # @param cart_external_id 
    # @param cart_source_external_id 
    # @param order_processor 
    # @param bypass_compliance_checks 
    # @param cart 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCartApproval]
    def approve_cart(cart_uid, cart_external_id, cart_source_external_id, order_processor, bypass_compliance_checks, cart, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = approve_cart_with_http_info(cart_uid, cart_external_id, cart_source_external_id, order_processor, bypass_compliance_checks, cart, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param cart_uid 
    # @param cart_external_id 
    # @param cart_source_external_id 
    # @param order_processor 
    # @param bypass_compliance_checks 
    # @param cart 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCartApproval, Integer, Hash)>] ServerResponseCartApproval data, response status code and response headers
    def approve_cart_with_http_info(cart_uid, cart_external_id, cart_source_external_id, order_processor, bypass_compliance_checks, cart, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.approve_cart ...'
      end
      # verify the required parameter 'cart_uid' is set
      if @api_client.config.client_side_validation && cart_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cart_uid' when calling CartsApi.approve_cart"
      end
      # verify the required parameter 'cart_external_id' is set
      if @api_client.config.client_side_validation && cart_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cart_external_id' when calling CartsApi.approve_cart"
      end
      # verify the required parameter 'cart_source_external_id' is set
      if @api_client.config.client_side_validation && cart_source_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cart_source_external_id' when calling CartsApi.approve_cart"
      end
      # verify the required parameter 'order_processor' is set
      if @api_client.config.client_side_validation && order_processor.nil?
        fail ArgumentError, "Missing the required parameter 'order_processor' when calling CartsApi.approve_cart"
      end
      # verify the required parameter 'bypass_compliance_checks' is set
      if @api_client.config.client_side_validation && bypass_compliance_checks.nil?
        fail ArgumentError, "Missing the required parameter 'bypass_compliance_checks' when calling CartsApi.approve_cart"
      end
      # verify the required parameter 'cart' is set
      if @api_client.config.client_side_validation && cart.nil?
        fail ArgumentError, "Missing the required parameter 'cart' when calling CartsApi.approve_cart"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling CartsApi.approve_cart"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling CartsApi.approve_cart"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling CartsApi.approve_cart"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling CartsApi.approve_cart"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling CartsApi.approve_cart"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling CartsApi.approve_cart"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CartsApi.approve_cart"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling CartsApi.approve_cart"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling CartsApi.approve_cart"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling CartsApi.approve_cart"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.approve_cart"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/approve'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CartUid'] = cart_uid
      form_params['CartExternalId'] = cart_external_id
      form_params['CartSourceExternalId'] = cart_source_external_id
      form_params['OrderProcessor'] = order_processor
      form_params['BypassComplianceChecks'] = bypass_compliance_checks
      form_params['Cart'] = cart
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCartApproval' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#approve_cart\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCartLine]
    def assign_cart_line_assign_cart_line_async(body, access_key, opts = {})
      data, _status_code, _headers = assign_cart_line_assign_cart_line_async_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCartLine, Integer, Hash)>] ServerResponseCartLine data, response status code and response headers
    def assign_cart_line_assign_cart_line_async_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.assign_cart_line_assign_cart_line_async ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CartsApi.assign_cart_line_assign_cart_line_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.assign_cart_line_assign_cart_line_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/assignline'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CartUid'] = cart_uid
      form_params['CartExternalId'] = cart_external_id
      form_params['CartSourceExternalId'] = cart_source_external_id
      form_params['ShipmentUid'] = shipment_uid
      form_params['ShipmentNumber'] = shipment_number
      form_params['LineUid'] = line_uid
      form_params['LineNumber'] = line_number
      form_params['Quantity'] = quantity
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCartLine' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#assign_cart_line_assign_cart_line_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param cart_uid 
    # @param cart_external_id 
    # @param cart_source_external_id 
    # @param shipment_uid 
    # @param shipment_number 
    # @param line_uid 
    # @param line_number 
    # @param quantity 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCartLine]
    def assign_cart_line_assign_cart_line_async(cart_uid, cart_external_id, cart_source_external_id, shipment_uid, shipment_number, line_uid, line_number, quantity, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = assign_cart_line_assign_cart_line_async_with_http_info(cart_uid, cart_external_id, cart_source_external_id, shipment_uid, shipment_number, line_uid, line_number, quantity, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param cart_uid 
    # @param cart_external_id 
    # @param cart_source_external_id 
    # @param shipment_uid 
    # @param shipment_number 
    # @param line_uid 
    # @param line_number 
    # @param quantity 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCartLine, Integer, Hash)>] ServerResponseCartLine data, response status code and response headers
    def assign_cart_line_assign_cart_line_async_with_http_info(cart_uid, cart_external_id, cart_source_external_id, shipment_uid, shipment_number, line_uid, line_number, quantity, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.assign_cart_line_assign_cart_line_async ...'
      end
      # verify the required parameter 'cart_uid' is set
      if @api_client.config.client_side_validation && cart_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cart_uid' when calling CartsApi.assign_cart_line_assign_cart_line_async"
      end
      # verify the required parameter 'cart_external_id' is set
      if @api_client.config.client_side_validation && cart_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cart_external_id' when calling CartsApi.assign_cart_line_assign_cart_line_async"
      end
      # verify the required parameter 'cart_source_external_id' is set
      if @api_client.config.client_side_validation && cart_source_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cart_source_external_id' when calling CartsApi.assign_cart_line_assign_cart_line_async"
      end
      # verify the required parameter 'shipment_uid' is set
      if @api_client.config.client_side_validation && shipment_uid.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_uid' when calling CartsApi.assign_cart_line_assign_cart_line_async"
      end
      # verify the required parameter 'shipment_number' is set
      if @api_client.config.client_side_validation && shipment_number.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_number' when calling CartsApi.assign_cart_line_assign_cart_line_async"
      end
      # verify the required parameter 'line_uid' is set
      if @api_client.config.client_side_validation && line_uid.nil?
        fail ArgumentError, "Missing the required parameter 'line_uid' when calling CartsApi.assign_cart_line_assign_cart_line_async"
      end
      # verify the required parameter 'line_number' is set
      if @api_client.config.client_side_validation && line_number.nil?
        fail ArgumentError, "Missing the required parameter 'line_number' when calling CartsApi.assign_cart_line_assign_cart_line_async"
      end
      # verify the required parameter 'quantity' is set
      if @api_client.config.client_side_validation && quantity.nil?
        fail ArgumentError, "Missing the required parameter 'quantity' when calling CartsApi.assign_cart_line_assign_cart_line_async"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling CartsApi.assign_cart_line_assign_cart_line_async"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling CartsApi.assign_cart_line_assign_cart_line_async"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling CartsApi.assign_cart_line_assign_cart_line_async"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling CartsApi.assign_cart_line_assign_cart_line_async"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling CartsApi.assign_cart_line_assign_cart_line_async"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling CartsApi.assign_cart_line_assign_cart_line_async"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CartsApi.assign_cart_line_assign_cart_line_async"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling CartsApi.assign_cart_line_assign_cart_line_async"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling CartsApi.assign_cart_line_assign_cart_line_async"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling CartsApi.assign_cart_line_assign_cart_line_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.assign_cart_line_assign_cart_line_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/assignline'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CartUid'] = cart_uid
      form_params['CartExternalId'] = cart_external_id
      form_params['CartSourceExternalId'] = cart_source_external_id
      form_params['ShipmentUid'] = shipment_uid
      form_params['ShipmentNumber'] = shipment_number
      form_params['LineUid'] = line_uid
      form_params['LineNumber'] = line_number
      form_params['Quantity'] = quantity
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCartLine' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#assign_cart_line_assign_cart_line_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCalculatedCart]
    def calculate_cart(body, access_key, opts = {})
      data, _status_code, _headers = calculate_cart_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCalculatedCart, Integer, Hash)>] ServerResponseCalculatedCart data, response status code and response headers
    def calculate_cart_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.calculate_cart ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CartsApi.calculate_cart"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.calculate_cart"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/calculates'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CouponCodes'] = @api_client.build_collection_param(coupon_codes, :multi)
      form_params['CalculateDate'] = calculate_date
      form_params['ExcludedDiscountCodes'] = @api_client.build_collection_param(excluded_discount_codes, :multi)
      form_params['OrderProcessor'] = order_processor
      form_params['Cart'] = cart
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCalculatedCart' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#calculate_cart\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param coupon_codes 
    # @param calculate_date 
    # @param excluded_discount_codes 
    # @param order_processor 
    # @param cart 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCalculatedCart]
    def calculate_cart(coupon_codes, calculate_date, excluded_discount_codes, order_processor, cart, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = calculate_cart_with_http_info(coupon_codes, calculate_date, excluded_discount_codes, order_processor, cart, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param coupon_codes 
    # @param calculate_date 
    # @param excluded_discount_codes 
    # @param order_processor 
    # @param cart 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCalculatedCart, Integer, Hash)>] ServerResponseCalculatedCart data, response status code and response headers
    def calculate_cart_with_http_info(coupon_codes, calculate_date, excluded_discount_codes, order_processor, cart, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.calculate_cart ...'
      end
      # verify the required parameter 'coupon_codes' is set
      if @api_client.config.client_side_validation && coupon_codes.nil?
        fail ArgumentError, "Missing the required parameter 'coupon_codes' when calling CartsApi.calculate_cart"
      end
      # verify the required parameter 'calculate_date' is set
      if @api_client.config.client_side_validation && calculate_date.nil?
        fail ArgumentError, "Missing the required parameter 'calculate_date' when calling CartsApi.calculate_cart"
      end
      # verify the required parameter 'excluded_discount_codes' is set
      if @api_client.config.client_side_validation && excluded_discount_codes.nil?
        fail ArgumentError, "Missing the required parameter 'excluded_discount_codes' when calling CartsApi.calculate_cart"
      end
      # verify the required parameter 'order_processor' is set
      if @api_client.config.client_side_validation && order_processor.nil?
        fail ArgumentError, "Missing the required parameter 'order_processor' when calling CartsApi.calculate_cart"
      end
      # verify the required parameter 'cart' is set
      if @api_client.config.client_side_validation && cart.nil?
        fail ArgumentError, "Missing the required parameter 'cart' when calling CartsApi.calculate_cart"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling CartsApi.calculate_cart"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling CartsApi.calculate_cart"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling CartsApi.calculate_cart"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling CartsApi.calculate_cart"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling CartsApi.calculate_cart"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling CartsApi.calculate_cart"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CartsApi.calculate_cart"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling CartsApi.calculate_cart"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling CartsApi.calculate_cart"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling CartsApi.calculate_cart"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.calculate_cart"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/calculates'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CouponCodes'] = @api_client.build_collection_param(coupon_codes, :multi)
      form_params['CalculateDate'] = calculate_date
      form_params['ExcludedDiscountCodes'] = @api_client.build_collection_param(excluded_discount_codes, :multi)
      form_params['OrderProcessor'] = order_processor
      form_params['Cart'] = cart
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCalculatedCart' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#calculate_cart\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def cancel_cart_post_async(body, access_key, opts = {})
      data, _status_code, _headers = cancel_cart_post_async_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def cancel_cart_post_async_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.cancel_cart_post_async ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CartsApi.cancel_cart_post_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.cancel_cart_post_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/cancel'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CartUid'] = cart_uid
      form_params['CartExternalId'] = cart_external_id
      form_params['CartSourceExternalId'] = cart_source_external_id
      form_params['OrderProcessor'] = order_processor
      form_params['ReasonUid'] = reason_uid
      form_params['ReasonCode'] = reason_code
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#cancel_cart_post_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param cart_uid 
    # @param cart_external_id 
    # @param cart_source_external_id 
    # @param order_processor 
    # @param reason_uid 
    # @param reason_code 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def cancel_cart_post_async(cart_uid, cart_external_id, cart_source_external_id, order_processor, reason_uid, reason_code, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = cancel_cart_post_async_with_http_info(cart_uid, cart_external_id, cart_source_external_id, order_processor, reason_uid, reason_code, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param cart_uid 
    # @param cart_external_id 
    # @param cart_source_external_id 
    # @param order_processor 
    # @param reason_uid 
    # @param reason_code 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def cancel_cart_post_async_with_http_info(cart_uid, cart_external_id, cart_source_external_id, order_processor, reason_uid, reason_code, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.cancel_cart_post_async ...'
      end
      # verify the required parameter 'cart_uid' is set
      if @api_client.config.client_side_validation && cart_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cart_uid' when calling CartsApi.cancel_cart_post_async"
      end
      # verify the required parameter 'cart_external_id' is set
      if @api_client.config.client_side_validation && cart_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cart_external_id' when calling CartsApi.cancel_cart_post_async"
      end
      # verify the required parameter 'cart_source_external_id' is set
      if @api_client.config.client_side_validation && cart_source_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cart_source_external_id' when calling CartsApi.cancel_cart_post_async"
      end
      # verify the required parameter 'order_processor' is set
      if @api_client.config.client_side_validation && order_processor.nil?
        fail ArgumentError, "Missing the required parameter 'order_processor' when calling CartsApi.cancel_cart_post_async"
      end
      # verify the required parameter 'reason_uid' is set
      if @api_client.config.client_side_validation && reason_uid.nil?
        fail ArgumentError, "Missing the required parameter 'reason_uid' when calling CartsApi.cancel_cart_post_async"
      end
      # verify the required parameter 'reason_code' is set
      if @api_client.config.client_side_validation && reason_code.nil?
        fail ArgumentError, "Missing the required parameter 'reason_code' when calling CartsApi.cancel_cart_post_async"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling CartsApi.cancel_cart_post_async"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling CartsApi.cancel_cart_post_async"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling CartsApi.cancel_cart_post_async"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling CartsApi.cancel_cart_post_async"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling CartsApi.cancel_cart_post_async"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling CartsApi.cancel_cart_post_async"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CartsApi.cancel_cart_post_async"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling CartsApi.cancel_cart_post_async"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling CartsApi.cancel_cart_post_async"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling CartsApi.cancel_cart_post_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.cancel_cart_post_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/cancel'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CartUid'] = cart_uid
      form_params['CartExternalId'] = cart_external_id
      form_params['CartSourceExternalId'] = cart_source_external_id
      form_params['OrderProcessor'] = order_processor
      form_params['ReasonUid'] = reason_uid
      form_params['ReasonCode'] = reason_code
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#cancel_cart_post_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :external_id 
    # @option opts [String] :source_external_id 
    # @option opts [String] :uid 
    # @option opts [String] :code 
    # @option opts [Integer] :quantity 
    # @return [ServerResponseCoupon]
    def cart_coupons_apply_cart_coupon(access_key, opts = {})
      data, _status_code, _headers = cart_coupons_apply_cart_coupon_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :external_id 
    # @option opts [String] :source_external_id 
    # @option opts [String] :uid 
    # @option opts [String] :code 
    # @option opts [Integer] :quantity 
    # @return [Array<(ServerResponseCoupon, Integer, Hash)>] ServerResponseCoupon data, response status code and response headers
    def cart_coupons_apply_cart_coupon_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.cart_coupons_apply_cart_coupon ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.cart_coupons_apply_cart_coupon"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/coupons'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cartUid'] = opts[:'cart_uid'] if !opts[:'cart_uid'].nil?
      query_params[:'externalId'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      query_params[:'sourceExternalId'] = opts[:'source_external_id'] if !opts[:'source_external_id'].nil?
      query_params[:'uid'] = opts[:'uid'] if !opts[:'uid'].nil?
      query_params[:'code'] = opts[:'code'] if !opts[:'code'].nil?
      query_params[:'quantity'] = opts[:'quantity'] if !opts[:'quantity'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseCoupon' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#cart_coupons_apply_cart_coupon\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :external_id 
    # @option opts [String] :source_external_id 
    # @option opts [String] :code 
    # @option opts [Integer] :quantity 
    # @return [ServerResponse]
    def cart_coupons_delete_cart_coupon(access_key, uid, opts = {})
      data, _status_code, _headers = cart_coupons_delete_cart_coupon_with_http_info(access_key, uid, opts)
      data
    end

    # @param access_key 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :external_id 
    # @option opts [String] :source_external_id 
    # @option opts [String] :code 
    # @option opts [Integer] :quantity 
    # @return [Array<(ServerResponse, Integer, Hash)>] ServerResponse data, response status code and response headers
    def cart_coupons_delete_cart_coupon_with_http_info(access_key, uid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.cart_coupons_delete_cart_coupon ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.cart_coupons_delete_cart_coupon"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CartsApi.cart_coupons_delete_cart_coupon"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/coupons/{uid}'.sub('{' + 'accessKey' + '}', access_key.to_s).sub('{' + 'uid' + '}', uid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cartUid'] = opts[:'cart_uid'] if !opts[:'cart_uid'].nil?
      query_params[:'externalId'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      query_params[:'sourceExternalId'] = opts[:'source_external_id'] if !opts[:'source_external_id'].nil?
      query_params[:'code'] = opts[:'code'] if !opts[:'code'].nil?
      query_params[:'quantity'] = opts[:'quantity'] if !opts[:'quantity'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#cart_coupons_delete_cart_coupon\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :external_id 
    # @option opts [String] :source_external_id 
    # @return [ServerResponseIEnumerableAppliedCoupon]
    def cart_coupons_get_cart_coupons(access_key, opts = {})
      data, _status_code, _headers = cart_coupons_get_cart_coupons_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :external_id 
    # @option opts [String] :source_external_id 
    # @return [Array<(ServerResponseIEnumerableAppliedCoupon, Integer, Hash)>] ServerResponseIEnumerableAppliedCoupon data, response status code and response headers
    def cart_coupons_get_cart_coupons_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.cart_coupons_get_cart_coupons ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.cart_coupons_get_cart_coupons"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/coupons'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cartUid'] = opts[:'cart_uid'] if !opts[:'cart_uid'].nil?
      query_params[:'externalId'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      query_params[:'sourceExternalId'] = opts[:'source_external_id'] if !opts[:'source_external_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIEnumerableAppliedCoupon' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#cart_coupons_get_cart_coupons\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :external_id 
    # @option opts [String] :source_external_id 
    # @return [Object]
    def cart_customer_clear_cart_customer_by_query(access_key, opts = {})
      data, _status_code, _headers = cart_customer_clear_cart_customer_by_query_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :external_id 
    # @option opts [String] :source_external_id 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def cart_customer_clear_cart_customer_by_query_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.cart_customer_clear_cart_customer_by_query ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.cart_customer_clear_cart_customer_by_query"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/customer'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cartUid'] = opts[:'cart_uid'] if !opts[:'cart_uid'].nil?
      query_params[:'externalId'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      query_params[:'sourceExternalId'] = opts[:'source_external_id'] if !opts[:'source_external_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Object' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#cart_customer_clear_cart_customer_by_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param cart_uid 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCustomer]
    def cart_customer_get_customer(access_key, cart_uid, opts = {})
      data, _status_code, _headers = cart_customer_get_customer_with_http_info(access_key, cart_uid, opts)
      data
    end

    # @param access_key 
    # @param cart_uid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCustomer, Integer, Hash)>] ServerResponseCustomer data, response status code and response headers
    def cart_customer_get_customer_with_http_info(access_key, cart_uid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.cart_customer_get_customer ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.cart_customer_get_customer"
      end
      # verify the required parameter 'cart_uid' is set
      if @api_client.config.client_side_validation && cart_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cart_uid' when calling CartsApi.cart_customer_get_customer"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/{cartUid}/customer'.sub('{' + 'accessKey' + '}', access_key.to_s).sub('{' + 'cartUid' + '}', cart_uid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseCustomer' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#cart_customer_get_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :external_id 
    # @option opts [String] :source_external_id 
    # @return [ServerResponseCustomer]
    def cart_customer_get_customer_by_query(access_key, opts = {})
      data, _status_code, _headers = cart_customer_get_customer_by_query_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :external_id 
    # @option opts [String] :source_external_id 
    # @return [Array<(ServerResponseCustomer, Integer, Hash)>] ServerResponseCustomer data, response status code and response headers
    def cart_customer_get_customer_by_query_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.cart_customer_get_customer_by_query ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.cart_customer_get_customer_by_query"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/customer'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cartUid'] = opts[:'cart_uid'] if !opts[:'cart_uid'].nil?
      query_params[:'externalId'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      query_params[:'sourceExternalId'] = opts[:'source_external_id'] if !opts[:'source_external_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseCustomer' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#cart_customer_get_customer_by_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param cart_uid 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def cart_customer_set_cart_customer(body, access_key, cart_uid, opts = {})
      data, _status_code, _headers = cart_customer_set_cart_customer_with_http_info(body, access_key, cart_uid, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param cart_uid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def cart_customer_set_cart_customer_with_http_info(body, access_key, cart_uid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.cart_customer_set_cart_customer ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'cart_uid' is set
      if @api_client.config.client_side_validation && cart_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cart_uid' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/{cartUid}/commands/setcustomer'.sub('{' + 'accessKey' + '}', access_key.to_s).sub('{' + 'cartUid' + '}', cart_uid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['ExternalId'] = external_id
      form_params['FirstName2'] = first_name2
      form_params['LastName2'] = last_name2
      form_params['Address'] = address
      form_params['AddressModified'] = address_modified
      form_params['AddressValidated'] = address_validated
      form_params['CompanyName'] = company_name
      form_params['Phone1'] = phone1
      form_params['Phone2'] = phone2
      form_params['MobilePhone'] = mobile_phone
      form_params['FaxNumber'] = fax_number
      form_params['EmailAddress'] = email_address
      form_params['FacebookId'] = facebook_id
      form_params['TwitterId'] = twitter_id
      form_params['MobileDeviceId'] = mobile_device_id
      form_params['LoyaltyRedemptionDisabled'] = loyalty_redemption_disabled
      form_params['LoyaltyAccrualDisabled'] = loyalty_accrual_disabled
      form_params['LoyaltyCardNumber'] = loyalty_card_number
      form_params['CurrentLoyaltyPoints'] = current_loyalty_points
      form_params['CurrentLoyaltyCurrency'] = current_loyalty_currency
      form_params['EditAtPOS'] = edit_at_pos
      form_params['WebAccount'] = web_account
      form_params['Verified'] = verified
      form_params['TaxExempt'] = tax_exempt
      form_params['BirthDate'] = birth_date
      form_params['LoyaltyPointsAccounts'] = @api_client.build_collection_param(loyalty_points_accounts, :multi)
      form_params['LoyaltyCurrencyAccounts'] = @api_client.build_collection_param(loyalty_currency_accounts, :multi)
      form_params['Type'] = type
      form_params['PriceLevel'] = price_level
      form_params['TransactionCount'] = transaction_count
      form_params['TotalSales'] = total_sales
      form_params['ClubMemberships'] = @api_client.build_collection_param(club_memberships, :multi)
      form_params['SubscriberGroupMemberships'] = @api_client.build_collection_param(subscriber_group_memberships, :multi)
      form_params['LoyaltytProgramMemberships'] = @api_client.build_collection_param(loyaltyt_program_memberships, :multi)
      form_params['LoyaltyProgramMemberships'] = @api_client.build_collection_param(loyalty_program_memberships, :multi)
      form_params['NoEmail'] = no_email
      form_params['NoTextMessages'] = no_text_messages
      form_params['Salutation'] = salutation
      form_params['ParentCustomerUid'] = parent_customer_uid
      form_params['ParentCustomerCode'] = parent_customer_code
      form_params['ParentExternalId'] = parent_external_id
      form_params['ReferralCustomer1Uid'] = referral_customer1_uid
      form_params['ReferralCustomer1Code'] = referral_customer1_code
      form_params['ReferralCustomer2Uid'] = referral_customer2_uid
      form_params['ReferralCustomer2Code'] = referral_customer2_code
      form_params['AlertCount'] = alert_count
      form_params['Created'] = created
      form_params['CreatedLocal'] = created_local
      form_params['SignupChannelUid'] = signup_channel_uid
      form_params['SignupStoreUid'] = signup_store_uid
      form_params['SignupStoreCode'] = signup_store_code
      form_params['SignupStoreExternalId'] = signup_store_external_id
      form_params['Id'] = id
      form_params['Uid'] = uid
      form_params['Code'] = code
      form_params['FirstName'] = first_name
      form_params['LastName'] = last_name
      form_params['CustomFields'] = custom_fields

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#cart_customer_set_cart_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param external_id 
    # @param first_name2 
    # @param last_name2 
    # @param address 
    # @param address_modified 
    # @param address_validated 
    # @param company_name 
    # @param phone1 
    # @param phone2 
    # @param mobile_phone 
    # @param fax_number 
    # @param email_address 
    # @param facebook_id 
    # @param twitter_id 
    # @param mobile_device_id 
    # @param loyalty_redemption_disabled 
    # @param loyalty_accrual_disabled 
    # @param loyalty_card_number 
    # @param current_loyalty_points 
    # @param current_loyalty_currency 
    # @param edit_at_pos 
    # @param web_account 
    # @param verified 
    # @param tax_exempt 
    # @param birth_date 
    # @param loyalty_points_accounts 
    # @param loyalty_currency_accounts 
    # @param type 
    # @param price_level 
    # @param transaction_count 
    # @param total_sales 
    # @param club_memberships 
    # @param subscriber_group_memberships 
    # @param loyaltyt_program_memberships 
    # @param loyalty_program_memberships 
    # @param no_email 
    # @param no_text_messages 
    # @param salutation 
    # @param parent_customer_uid 
    # @param parent_customer_code 
    # @param parent_external_id 
    # @param referral_customer1_uid 
    # @param referral_customer1_code 
    # @param referral_customer2_uid 
    # @param referral_customer2_code 
    # @param alert_count 
    # @param created 
    # @param created_local 
    # @param signup_channel_uid 
    # @param signup_store_uid 
    # @param signup_store_code 
    # @param signup_store_external_id 
    # @param id 
    # @param uid 
    # @param code 
    # @param first_name 
    # @param last_name 
    # @param custom_fields 
    # @param access_key 
    # @param cart_uid 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def cart_customer_set_cart_customer(external_id, first_name2, last_name2, address, address_modified, address_validated, company_name, phone1, phone2, mobile_phone, fax_number, email_address, facebook_id, twitter_id, mobile_device_id, loyalty_redemption_disabled, loyalty_accrual_disabled, loyalty_card_number, current_loyalty_points, current_loyalty_currency, edit_at_pos, web_account, verified, tax_exempt, birth_date, loyalty_points_accounts, loyalty_currency_accounts, type, price_level, transaction_count, total_sales, club_memberships, subscriber_group_memberships, loyaltyt_program_memberships, loyalty_program_memberships, no_email, no_text_messages, salutation, parent_customer_uid, parent_customer_code, parent_external_id, referral_customer1_uid, referral_customer1_code, referral_customer2_uid, referral_customer2_code, alert_count, created, created_local, signup_channel_uid, signup_store_uid, signup_store_code, signup_store_external_id, id, uid, code, first_name, last_name, custom_fields, access_key, cart_uid, opts = {})
      data, _status_code, _headers = cart_customer_set_cart_customer_with_http_info(external_id, first_name2, last_name2, address, address_modified, address_validated, company_name, phone1, phone2, mobile_phone, fax_number, email_address, facebook_id, twitter_id, mobile_device_id, loyalty_redemption_disabled, loyalty_accrual_disabled, loyalty_card_number, current_loyalty_points, current_loyalty_currency, edit_at_pos, web_account, verified, tax_exempt, birth_date, loyalty_points_accounts, loyalty_currency_accounts, type, price_level, transaction_count, total_sales, club_memberships, subscriber_group_memberships, loyaltyt_program_memberships, loyalty_program_memberships, no_email, no_text_messages, salutation, parent_customer_uid, parent_customer_code, parent_external_id, referral_customer1_uid, referral_customer1_code, referral_customer2_uid, referral_customer2_code, alert_count, created, created_local, signup_channel_uid, signup_store_uid, signup_store_code, signup_store_external_id, id, uid, code, first_name, last_name, custom_fields, access_key, cart_uid, opts)
      data
    end

    # @param external_id 
    # @param first_name2 
    # @param last_name2 
    # @param address 
    # @param address_modified 
    # @param address_validated 
    # @param company_name 
    # @param phone1 
    # @param phone2 
    # @param mobile_phone 
    # @param fax_number 
    # @param email_address 
    # @param facebook_id 
    # @param twitter_id 
    # @param mobile_device_id 
    # @param loyalty_redemption_disabled 
    # @param loyalty_accrual_disabled 
    # @param loyalty_card_number 
    # @param current_loyalty_points 
    # @param current_loyalty_currency 
    # @param edit_at_pos 
    # @param web_account 
    # @param verified 
    # @param tax_exempt 
    # @param birth_date 
    # @param loyalty_points_accounts 
    # @param loyalty_currency_accounts 
    # @param type 
    # @param price_level 
    # @param transaction_count 
    # @param total_sales 
    # @param club_memberships 
    # @param subscriber_group_memberships 
    # @param loyaltyt_program_memberships 
    # @param loyalty_program_memberships 
    # @param no_email 
    # @param no_text_messages 
    # @param salutation 
    # @param parent_customer_uid 
    # @param parent_customer_code 
    # @param parent_external_id 
    # @param referral_customer1_uid 
    # @param referral_customer1_code 
    # @param referral_customer2_uid 
    # @param referral_customer2_code 
    # @param alert_count 
    # @param created 
    # @param created_local 
    # @param signup_channel_uid 
    # @param signup_store_uid 
    # @param signup_store_code 
    # @param signup_store_external_id 
    # @param id 
    # @param uid 
    # @param code 
    # @param first_name 
    # @param last_name 
    # @param custom_fields 
    # @param access_key 
    # @param cart_uid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def cart_customer_set_cart_customer_with_http_info(external_id, first_name2, last_name2, address, address_modified, address_validated, company_name, phone1, phone2, mobile_phone, fax_number, email_address, facebook_id, twitter_id, mobile_device_id, loyalty_redemption_disabled, loyalty_accrual_disabled, loyalty_card_number, current_loyalty_points, current_loyalty_currency, edit_at_pos, web_account, verified, tax_exempt, birth_date, loyalty_points_accounts, loyalty_currency_accounts, type, price_level, transaction_count, total_sales, club_memberships, subscriber_group_memberships, loyaltyt_program_memberships, loyalty_program_memberships, no_email, no_text_messages, salutation, parent_customer_uid, parent_customer_code, parent_external_id, referral_customer1_uid, referral_customer1_code, referral_customer2_uid, referral_customer2_code, alert_count, created, created_local, signup_channel_uid, signup_store_uid, signup_store_code, signup_store_external_id, id, uid, code, first_name, last_name, custom_fields, access_key, cart_uid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.cart_customer_set_cart_customer ...'
      end
      # verify the required parameter 'external_id' is set
      if @api_client.config.client_side_validation && external_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_id' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'first_name2' is set
      if @api_client.config.client_side_validation && first_name2.nil?
        fail ArgumentError, "Missing the required parameter 'first_name2' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'last_name2' is set
      if @api_client.config.client_side_validation && last_name2.nil?
        fail ArgumentError, "Missing the required parameter 'last_name2' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'address_modified' is set
      if @api_client.config.client_side_validation && address_modified.nil?
        fail ArgumentError, "Missing the required parameter 'address_modified' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'address_validated' is set
      if @api_client.config.client_side_validation && address_validated.nil?
        fail ArgumentError, "Missing the required parameter 'address_validated' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'company_name' is set
      if @api_client.config.client_side_validation && company_name.nil?
        fail ArgumentError, "Missing the required parameter 'company_name' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'phone1' is set
      if @api_client.config.client_side_validation && phone1.nil?
        fail ArgumentError, "Missing the required parameter 'phone1' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'phone2' is set
      if @api_client.config.client_side_validation && phone2.nil?
        fail ArgumentError, "Missing the required parameter 'phone2' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'mobile_phone' is set
      if @api_client.config.client_side_validation && mobile_phone.nil?
        fail ArgumentError, "Missing the required parameter 'mobile_phone' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'fax_number' is set
      if @api_client.config.client_side_validation && fax_number.nil?
        fail ArgumentError, "Missing the required parameter 'fax_number' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'email_address' is set
      if @api_client.config.client_side_validation && email_address.nil?
        fail ArgumentError, "Missing the required parameter 'email_address' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'facebook_id' is set
      if @api_client.config.client_side_validation && facebook_id.nil?
        fail ArgumentError, "Missing the required parameter 'facebook_id' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'twitter_id' is set
      if @api_client.config.client_side_validation && twitter_id.nil?
        fail ArgumentError, "Missing the required parameter 'twitter_id' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'mobile_device_id' is set
      if @api_client.config.client_side_validation && mobile_device_id.nil?
        fail ArgumentError, "Missing the required parameter 'mobile_device_id' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'loyalty_redemption_disabled' is set
      if @api_client.config.client_side_validation && loyalty_redemption_disabled.nil?
        fail ArgumentError, "Missing the required parameter 'loyalty_redemption_disabled' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'loyalty_accrual_disabled' is set
      if @api_client.config.client_side_validation && loyalty_accrual_disabled.nil?
        fail ArgumentError, "Missing the required parameter 'loyalty_accrual_disabled' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'loyalty_card_number' is set
      if @api_client.config.client_side_validation && loyalty_card_number.nil?
        fail ArgumentError, "Missing the required parameter 'loyalty_card_number' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'current_loyalty_points' is set
      if @api_client.config.client_side_validation && current_loyalty_points.nil?
        fail ArgumentError, "Missing the required parameter 'current_loyalty_points' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'current_loyalty_currency' is set
      if @api_client.config.client_side_validation && current_loyalty_currency.nil?
        fail ArgumentError, "Missing the required parameter 'current_loyalty_currency' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'edit_at_pos' is set
      if @api_client.config.client_side_validation && edit_at_pos.nil?
        fail ArgumentError, "Missing the required parameter 'edit_at_pos' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'web_account' is set
      if @api_client.config.client_side_validation && web_account.nil?
        fail ArgumentError, "Missing the required parameter 'web_account' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'verified' is set
      if @api_client.config.client_side_validation && verified.nil?
        fail ArgumentError, "Missing the required parameter 'verified' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'tax_exempt' is set
      if @api_client.config.client_side_validation && tax_exempt.nil?
        fail ArgumentError, "Missing the required parameter 'tax_exempt' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'birth_date' is set
      if @api_client.config.client_side_validation && birth_date.nil?
        fail ArgumentError, "Missing the required parameter 'birth_date' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'loyalty_points_accounts' is set
      if @api_client.config.client_side_validation && loyalty_points_accounts.nil?
        fail ArgumentError, "Missing the required parameter 'loyalty_points_accounts' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'loyalty_currency_accounts' is set
      if @api_client.config.client_side_validation && loyalty_currency_accounts.nil?
        fail ArgumentError, "Missing the required parameter 'loyalty_currency_accounts' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'price_level' is set
      if @api_client.config.client_side_validation && price_level.nil?
        fail ArgumentError, "Missing the required parameter 'price_level' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'transaction_count' is set
      if @api_client.config.client_side_validation && transaction_count.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_count' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'total_sales' is set
      if @api_client.config.client_side_validation && total_sales.nil?
        fail ArgumentError, "Missing the required parameter 'total_sales' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'club_memberships' is set
      if @api_client.config.client_side_validation && club_memberships.nil?
        fail ArgumentError, "Missing the required parameter 'club_memberships' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'subscriber_group_memberships' is set
      if @api_client.config.client_side_validation && subscriber_group_memberships.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_group_memberships' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'loyaltyt_program_memberships' is set
      if @api_client.config.client_side_validation && loyaltyt_program_memberships.nil?
        fail ArgumentError, "Missing the required parameter 'loyaltyt_program_memberships' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'loyalty_program_memberships' is set
      if @api_client.config.client_side_validation && loyalty_program_memberships.nil?
        fail ArgumentError, "Missing the required parameter 'loyalty_program_memberships' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'no_email' is set
      if @api_client.config.client_side_validation && no_email.nil?
        fail ArgumentError, "Missing the required parameter 'no_email' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'no_text_messages' is set
      if @api_client.config.client_side_validation && no_text_messages.nil?
        fail ArgumentError, "Missing the required parameter 'no_text_messages' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'salutation' is set
      if @api_client.config.client_side_validation && salutation.nil?
        fail ArgumentError, "Missing the required parameter 'salutation' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'parent_customer_uid' is set
      if @api_client.config.client_side_validation && parent_customer_uid.nil?
        fail ArgumentError, "Missing the required parameter 'parent_customer_uid' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'parent_customer_code' is set
      if @api_client.config.client_side_validation && parent_customer_code.nil?
        fail ArgumentError, "Missing the required parameter 'parent_customer_code' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'parent_external_id' is set
      if @api_client.config.client_side_validation && parent_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'parent_external_id' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'referral_customer1_uid' is set
      if @api_client.config.client_side_validation && referral_customer1_uid.nil?
        fail ArgumentError, "Missing the required parameter 'referral_customer1_uid' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'referral_customer1_code' is set
      if @api_client.config.client_side_validation && referral_customer1_code.nil?
        fail ArgumentError, "Missing the required parameter 'referral_customer1_code' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'referral_customer2_uid' is set
      if @api_client.config.client_side_validation && referral_customer2_uid.nil?
        fail ArgumentError, "Missing the required parameter 'referral_customer2_uid' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'referral_customer2_code' is set
      if @api_client.config.client_side_validation && referral_customer2_code.nil?
        fail ArgumentError, "Missing the required parameter 'referral_customer2_code' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'alert_count' is set
      if @api_client.config.client_side_validation && alert_count.nil?
        fail ArgumentError, "Missing the required parameter 'alert_count' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'created' is set
      if @api_client.config.client_side_validation && created.nil?
        fail ArgumentError, "Missing the required parameter 'created' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'created_local' is set
      if @api_client.config.client_side_validation && created_local.nil?
        fail ArgumentError, "Missing the required parameter 'created_local' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'signup_channel_uid' is set
      if @api_client.config.client_side_validation && signup_channel_uid.nil?
        fail ArgumentError, "Missing the required parameter 'signup_channel_uid' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'signup_store_uid' is set
      if @api_client.config.client_side_validation && signup_store_uid.nil?
        fail ArgumentError, "Missing the required parameter 'signup_store_uid' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'signup_store_code' is set
      if @api_client.config.client_side_validation && signup_store_code.nil?
        fail ArgumentError, "Missing the required parameter 'signup_store_code' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'signup_store_external_id' is set
      if @api_client.config.client_side_validation && signup_store_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'signup_store_external_id' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'last_name' is set
      if @api_client.config.client_side_validation && last_name.nil?
        fail ArgumentError, "Missing the required parameter 'last_name' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'custom_fields' is set
      if @api_client.config.client_side_validation && custom_fields.nil?
        fail ArgumentError, "Missing the required parameter 'custom_fields' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # verify the required parameter 'cart_uid' is set
      if @api_client.config.client_side_validation && cart_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cart_uid' when calling CartsApi.cart_customer_set_cart_customer"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/{cartUid}/commands/setcustomer'.sub('{' + 'accessKey' + '}', access_key.to_s).sub('{' + 'cartUid' + '}', cart_uid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['ExternalId'] = external_id
      form_params['FirstName2'] = first_name2
      form_params['LastName2'] = last_name2
      form_params['Address'] = address
      form_params['AddressModified'] = address_modified
      form_params['AddressValidated'] = address_validated
      form_params['CompanyName'] = company_name
      form_params['Phone1'] = phone1
      form_params['Phone2'] = phone2
      form_params['MobilePhone'] = mobile_phone
      form_params['FaxNumber'] = fax_number
      form_params['EmailAddress'] = email_address
      form_params['FacebookId'] = facebook_id
      form_params['TwitterId'] = twitter_id
      form_params['MobileDeviceId'] = mobile_device_id
      form_params['LoyaltyRedemptionDisabled'] = loyalty_redemption_disabled
      form_params['LoyaltyAccrualDisabled'] = loyalty_accrual_disabled
      form_params['LoyaltyCardNumber'] = loyalty_card_number
      form_params['CurrentLoyaltyPoints'] = current_loyalty_points
      form_params['CurrentLoyaltyCurrency'] = current_loyalty_currency
      form_params['EditAtPOS'] = edit_at_pos
      form_params['WebAccount'] = web_account
      form_params['Verified'] = verified
      form_params['TaxExempt'] = tax_exempt
      form_params['BirthDate'] = birth_date
      form_params['LoyaltyPointsAccounts'] = @api_client.build_collection_param(loyalty_points_accounts, :multi)
      form_params['LoyaltyCurrencyAccounts'] = @api_client.build_collection_param(loyalty_currency_accounts, :multi)
      form_params['Type'] = type
      form_params['PriceLevel'] = price_level
      form_params['TransactionCount'] = transaction_count
      form_params['TotalSales'] = total_sales
      form_params['ClubMemberships'] = @api_client.build_collection_param(club_memberships, :multi)
      form_params['SubscriberGroupMemberships'] = @api_client.build_collection_param(subscriber_group_memberships, :multi)
      form_params['LoyaltytProgramMemberships'] = @api_client.build_collection_param(loyaltyt_program_memberships, :multi)
      form_params['LoyaltyProgramMemberships'] = @api_client.build_collection_param(loyalty_program_memberships, :multi)
      form_params['NoEmail'] = no_email
      form_params['NoTextMessages'] = no_text_messages
      form_params['Salutation'] = salutation
      form_params['ParentCustomerUid'] = parent_customer_uid
      form_params['ParentCustomerCode'] = parent_customer_code
      form_params['ParentExternalId'] = parent_external_id
      form_params['ReferralCustomer1Uid'] = referral_customer1_uid
      form_params['ReferralCustomer1Code'] = referral_customer1_code
      form_params['ReferralCustomer2Uid'] = referral_customer2_uid
      form_params['ReferralCustomer2Code'] = referral_customer2_code
      form_params['AlertCount'] = alert_count
      form_params['Created'] = created
      form_params['CreatedLocal'] = created_local
      form_params['SignupChannelUid'] = signup_channel_uid
      form_params['SignupStoreUid'] = signup_store_uid
      form_params['SignupStoreCode'] = signup_store_code
      form_params['SignupStoreExternalId'] = signup_store_external_id
      form_params['Id'] = id
      form_params['Uid'] = uid
      form_params['Code'] = code
      form_params['FirstName'] = first_name
      form_params['LastName'] = last_name
      form_params['CustomFields'] = custom_fields

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#cart_customer_set_cart_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :external_id 
    # @option opts [String] :source_external_id 
    # @return [ServerResponseCommandResponse]
    def cart_customer_set_cart_customer_by_external_id(body, access_key, opts = {})
      data, _status_code, _headers = cart_customer_set_cart_customer_by_external_id_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :external_id 
    # @option opts [String] :source_external_id 
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def cart_customer_set_cart_customer_by_external_id_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.cart_customer_set_cart_customer_by_external_id ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/setcustomer'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cartUid'] = opts[:'cart_uid'] if !opts[:'cart_uid'].nil?
      query_params[:'externalId'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      query_params[:'sourceExternalId'] = opts[:'source_external_id'] if !opts[:'source_external_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['ExternalId'] = external_id
      form_params['FirstName2'] = first_name2
      form_params['LastName2'] = last_name2
      form_params['Address'] = address
      form_params['AddressModified'] = address_modified
      form_params['AddressValidated'] = address_validated
      form_params['CompanyName'] = company_name
      form_params['Phone1'] = phone1
      form_params['Phone2'] = phone2
      form_params['MobilePhone'] = mobile_phone
      form_params['FaxNumber'] = fax_number
      form_params['EmailAddress'] = email_address
      form_params['FacebookId'] = facebook_id
      form_params['TwitterId'] = twitter_id
      form_params['MobileDeviceId'] = mobile_device_id
      form_params['LoyaltyRedemptionDisabled'] = loyalty_redemption_disabled
      form_params['LoyaltyAccrualDisabled'] = loyalty_accrual_disabled
      form_params['LoyaltyCardNumber'] = loyalty_card_number
      form_params['CurrentLoyaltyPoints'] = current_loyalty_points
      form_params['CurrentLoyaltyCurrency'] = current_loyalty_currency
      form_params['EditAtPOS'] = edit_at_pos
      form_params['WebAccount'] = web_account
      form_params['Verified'] = verified
      form_params['TaxExempt'] = tax_exempt
      form_params['BirthDate'] = birth_date
      form_params['LoyaltyPointsAccounts'] = @api_client.build_collection_param(loyalty_points_accounts, :multi)
      form_params['LoyaltyCurrencyAccounts'] = @api_client.build_collection_param(loyalty_currency_accounts, :multi)
      form_params['Type'] = type
      form_params['PriceLevel'] = price_level
      form_params['TransactionCount'] = transaction_count
      form_params['TotalSales'] = total_sales
      form_params['ClubMemberships'] = @api_client.build_collection_param(club_memberships, :multi)
      form_params['SubscriberGroupMemberships'] = @api_client.build_collection_param(subscriber_group_memberships, :multi)
      form_params['LoyaltytProgramMemberships'] = @api_client.build_collection_param(loyaltyt_program_memberships, :multi)
      form_params['LoyaltyProgramMemberships'] = @api_client.build_collection_param(loyalty_program_memberships, :multi)
      form_params['NoEmail'] = no_email
      form_params['NoTextMessages'] = no_text_messages
      form_params['Salutation'] = salutation
      form_params['ParentCustomerUid'] = parent_customer_uid
      form_params['ParentCustomerCode'] = parent_customer_code
      form_params['ParentExternalId'] = parent_external_id
      form_params['ReferralCustomer1Uid'] = referral_customer1_uid
      form_params['ReferralCustomer1Code'] = referral_customer1_code
      form_params['ReferralCustomer2Uid'] = referral_customer2_uid
      form_params['ReferralCustomer2Code'] = referral_customer2_code
      form_params['AlertCount'] = alert_count
      form_params['Created'] = created
      form_params['CreatedLocal'] = created_local
      form_params['SignupChannelUid'] = signup_channel_uid
      form_params['SignupStoreUid'] = signup_store_uid
      form_params['SignupStoreCode'] = signup_store_code
      form_params['SignupStoreExternalId'] = signup_store_external_id
      form_params['Id'] = id
      form_params['Uid'] = uid
      form_params['Code'] = code
      form_params['FirstName'] = first_name
      form_params['LastName'] = last_name
      form_params['CustomFields'] = custom_fields

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#cart_customer_set_cart_customer_by_external_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param external_id2 
    # @param first_name2 
    # @param last_name2 
    # @param address 
    # @param address_modified 
    # @param address_validated 
    # @param company_name 
    # @param phone1 
    # @param phone2 
    # @param mobile_phone 
    # @param fax_number 
    # @param email_address 
    # @param facebook_id 
    # @param twitter_id 
    # @param mobile_device_id 
    # @param loyalty_redemption_disabled 
    # @param loyalty_accrual_disabled 
    # @param loyalty_card_number 
    # @param current_loyalty_points 
    # @param current_loyalty_currency 
    # @param edit_at_pos 
    # @param web_account 
    # @param verified 
    # @param tax_exempt 
    # @param birth_date 
    # @param loyalty_points_accounts 
    # @param loyalty_currency_accounts 
    # @param type 
    # @param price_level 
    # @param transaction_count 
    # @param total_sales 
    # @param club_memberships 
    # @param subscriber_group_memberships 
    # @param loyaltyt_program_memberships 
    # @param loyalty_program_memberships 
    # @param no_email 
    # @param no_text_messages 
    # @param salutation 
    # @param parent_customer_uid 
    # @param parent_customer_code 
    # @param parent_external_id 
    # @param referral_customer1_uid 
    # @param referral_customer1_code 
    # @param referral_customer2_uid 
    # @param referral_customer2_code 
    # @param alert_count 
    # @param created 
    # @param created_local 
    # @param signup_channel_uid 
    # @param signup_store_uid 
    # @param signup_store_code 
    # @param signup_store_external_id 
    # @param id 
    # @param uid 
    # @param code 
    # @param first_name 
    # @param last_name 
    # @param custom_fields 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :external_id 
    # @option opts [String] :source_external_id 
    # @return [ServerResponseCommandResponse]
    def cart_customer_set_cart_customer_by_external_id(external_id2, first_name2, last_name2, address, address_modified, address_validated, company_name, phone1, phone2, mobile_phone, fax_number, email_address, facebook_id, twitter_id, mobile_device_id, loyalty_redemption_disabled, loyalty_accrual_disabled, loyalty_card_number, current_loyalty_points, current_loyalty_currency, edit_at_pos, web_account, verified, tax_exempt, birth_date, loyalty_points_accounts, loyalty_currency_accounts, type, price_level, transaction_count, total_sales, club_memberships, subscriber_group_memberships, loyaltyt_program_memberships, loyalty_program_memberships, no_email, no_text_messages, salutation, parent_customer_uid, parent_customer_code, parent_external_id, referral_customer1_uid, referral_customer1_code, referral_customer2_uid, referral_customer2_code, alert_count, created, created_local, signup_channel_uid, signup_store_uid, signup_store_code, signup_store_external_id, id, uid, code, first_name, last_name, custom_fields, access_key, opts = {})
      data, _status_code, _headers = cart_customer_set_cart_customer_by_external_id_with_http_info(external_id2, first_name2, last_name2, address, address_modified, address_validated, company_name, phone1, phone2, mobile_phone, fax_number, email_address, facebook_id, twitter_id, mobile_device_id, loyalty_redemption_disabled, loyalty_accrual_disabled, loyalty_card_number, current_loyalty_points, current_loyalty_currency, edit_at_pos, web_account, verified, tax_exempt, birth_date, loyalty_points_accounts, loyalty_currency_accounts, type, price_level, transaction_count, total_sales, club_memberships, subscriber_group_memberships, loyaltyt_program_memberships, loyalty_program_memberships, no_email, no_text_messages, salutation, parent_customer_uid, parent_customer_code, parent_external_id, referral_customer1_uid, referral_customer1_code, referral_customer2_uid, referral_customer2_code, alert_count, created, created_local, signup_channel_uid, signup_store_uid, signup_store_code, signup_store_external_id, id, uid, code, first_name, last_name, custom_fields, access_key, opts)
      data
    end

    # @param external_id2 
    # @param first_name2 
    # @param last_name2 
    # @param address 
    # @param address_modified 
    # @param address_validated 
    # @param company_name 
    # @param phone1 
    # @param phone2 
    # @param mobile_phone 
    # @param fax_number 
    # @param email_address 
    # @param facebook_id 
    # @param twitter_id 
    # @param mobile_device_id 
    # @param loyalty_redemption_disabled 
    # @param loyalty_accrual_disabled 
    # @param loyalty_card_number 
    # @param current_loyalty_points 
    # @param current_loyalty_currency 
    # @param edit_at_pos 
    # @param web_account 
    # @param verified 
    # @param tax_exempt 
    # @param birth_date 
    # @param loyalty_points_accounts 
    # @param loyalty_currency_accounts 
    # @param type 
    # @param price_level 
    # @param transaction_count 
    # @param total_sales 
    # @param club_memberships 
    # @param subscriber_group_memberships 
    # @param loyaltyt_program_memberships 
    # @param loyalty_program_memberships 
    # @param no_email 
    # @param no_text_messages 
    # @param salutation 
    # @param parent_customer_uid 
    # @param parent_customer_code 
    # @param parent_external_id 
    # @param referral_customer1_uid 
    # @param referral_customer1_code 
    # @param referral_customer2_uid 
    # @param referral_customer2_code 
    # @param alert_count 
    # @param created 
    # @param created_local 
    # @param signup_channel_uid 
    # @param signup_store_uid 
    # @param signup_store_code 
    # @param signup_store_external_id 
    # @param id 
    # @param uid 
    # @param code 
    # @param first_name 
    # @param last_name 
    # @param custom_fields 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :external_id 
    # @option opts [String] :source_external_id 
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def cart_customer_set_cart_customer_by_external_id_with_http_info(external_id2, first_name2, last_name2, address, address_modified, address_validated, company_name, phone1, phone2, mobile_phone, fax_number, email_address, facebook_id, twitter_id, mobile_device_id, loyalty_redemption_disabled, loyalty_accrual_disabled, loyalty_card_number, current_loyalty_points, current_loyalty_currency, edit_at_pos, web_account, verified, tax_exempt, birth_date, loyalty_points_accounts, loyalty_currency_accounts, type, price_level, transaction_count, total_sales, club_memberships, subscriber_group_memberships, loyaltyt_program_memberships, loyalty_program_memberships, no_email, no_text_messages, salutation, parent_customer_uid, parent_customer_code, parent_external_id, referral_customer1_uid, referral_customer1_code, referral_customer2_uid, referral_customer2_code, alert_count, created, created_local, signup_channel_uid, signup_store_uid, signup_store_code, signup_store_external_id, id, uid, code, first_name, last_name, custom_fields, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.cart_customer_set_cart_customer_by_external_id ...'
      end
      # verify the required parameter 'external_id2' is set
      if @api_client.config.client_side_validation && external_id2.nil?
        fail ArgumentError, "Missing the required parameter 'external_id2' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'first_name2' is set
      if @api_client.config.client_side_validation && first_name2.nil?
        fail ArgumentError, "Missing the required parameter 'first_name2' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'last_name2' is set
      if @api_client.config.client_side_validation && last_name2.nil?
        fail ArgumentError, "Missing the required parameter 'last_name2' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'address_modified' is set
      if @api_client.config.client_side_validation && address_modified.nil?
        fail ArgumentError, "Missing the required parameter 'address_modified' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'address_validated' is set
      if @api_client.config.client_side_validation && address_validated.nil?
        fail ArgumentError, "Missing the required parameter 'address_validated' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'company_name' is set
      if @api_client.config.client_side_validation && company_name.nil?
        fail ArgumentError, "Missing the required parameter 'company_name' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'phone1' is set
      if @api_client.config.client_side_validation && phone1.nil?
        fail ArgumentError, "Missing the required parameter 'phone1' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'phone2' is set
      if @api_client.config.client_side_validation && phone2.nil?
        fail ArgumentError, "Missing the required parameter 'phone2' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'mobile_phone' is set
      if @api_client.config.client_side_validation && mobile_phone.nil?
        fail ArgumentError, "Missing the required parameter 'mobile_phone' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'fax_number' is set
      if @api_client.config.client_side_validation && fax_number.nil?
        fail ArgumentError, "Missing the required parameter 'fax_number' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'email_address' is set
      if @api_client.config.client_side_validation && email_address.nil?
        fail ArgumentError, "Missing the required parameter 'email_address' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'facebook_id' is set
      if @api_client.config.client_side_validation && facebook_id.nil?
        fail ArgumentError, "Missing the required parameter 'facebook_id' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'twitter_id' is set
      if @api_client.config.client_side_validation && twitter_id.nil?
        fail ArgumentError, "Missing the required parameter 'twitter_id' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'mobile_device_id' is set
      if @api_client.config.client_side_validation && mobile_device_id.nil?
        fail ArgumentError, "Missing the required parameter 'mobile_device_id' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'loyalty_redemption_disabled' is set
      if @api_client.config.client_side_validation && loyalty_redemption_disabled.nil?
        fail ArgumentError, "Missing the required parameter 'loyalty_redemption_disabled' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'loyalty_accrual_disabled' is set
      if @api_client.config.client_side_validation && loyalty_accrual_disabled.nil?
        fail ArgumentError, "Missing the required parameter 'loyalty_accrual_disabled' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'loyalty_card_number' is set
      if @api_client.config.client_side_validation && loyalty_card_number.nil?
        fail ArgumentError, "Missing the required parameter 'loyalty_card_number' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'current_loyalty_points' is set
      if @api_client.config.client_side_validation && current_loyalty_points.nil?
        fail ArgumentError, "Missing the required parameter 'current_loyalty_points' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'current_loyalty_currency' is set
      if @api_client.config.client_side_validation && current_loyalty_currency.nil?
        fail ArgumentError, "Missing the required parameter 'current_loyalty_currency' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'edit_at_pos' is set
      if @api_client.config.client_side_validation && edit_at_pos.nil?
        fail ArgumentError, "Missing the required parameter 'edit_at_pos' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'web_account' is set
      if @api_client.config.client_side_validation && web_account.nil?
        fail ArgumentError, "Missing the required parameter 'web_account' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'verified' is set
      if @api_client.config.client_side_validation && verified.nil?
        fail ArgumentError, "Missing the required parameter 'verified' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'tax_exempt' is set
      if @api_client.config.client_side_validation && tax_exempt.nil?
        fail ArgumentError, "Missing the required parameter 'tax_exempt' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'birth_date' is set
      if @api_client.config.client_side_validation && birth_date.nil?
        fail ArgumentError, "Missing the required parameter 'birth_date' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'loyalty_points_accounts' is set
      if @api_client.config.client_side_validation && loyalty_points_accounts.nil?
        fail ArgumentError, "Missing the required parameter 'loyalty_points_accounts' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'loyalty_currency_accounts' is set
      if @api_client.config.client_side_validation && loyalty_currency_accounts.nil?
        fail ArgumentError, "Missing the required parameter 'loyalty_currency_accounts' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'price_level' is set
      if @api_client.config.client_side_validation && price_level.nil?
        fail ArgumentError, "Missing the required parameter 'price_level' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'transaction_count' is set
      if @api_client.config.client_side_validation && transaction_count.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_count' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'total_sales' is set
      if @api_client.config.client_side_validation && total_sales.nil?
        fail ArgumentError, "Missing the required parameter 'total_sales' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'club_memberships' is set
      if @api_client.config.client_side_validation && club_memberships.nil?
        fail ArgumentError, "Missing the required parameter 'club_memberships' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'subscriber_group_memberships' is set
      if @api_client.config.client_side_validation && subscriber_group_memberships.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_group_memberships' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'loyaltyt_program_memberships' is set
      if @api_client.config.client_side_validation && loyaltyt_program_memberships.nil?
        fail ArgumentError, "Missing the required parameter 'loyaltyt_program_memberships' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'loyalty_program_memberships' is set
      if @api_client.config.client_side_validation && loyalty_program_memberships.nil?
        fail ArgumentError, "Missing the required parameter 'loyalty_program_memberships' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'no_email' is set
      if @api_client.config.client_side_validation && no_email.nil?
        fail ArgumentError, "Missing the required parameter 'no_email' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'no_text_messages' is set
      if @api_client.config.client_side_validation && no_text_messages.nil?
        fail ArgumentError, "Missing the required parameter 'no_text_messages' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'salutation' is set
      if @api_client.config.client_side_validation && salutation.nil?
        fail ArgumentError, "Missing the required parameter 'salutation' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'parent_customer_uid' is set
      if @api_client.config.client_side_validation && parent_customer_uid.nil?
        fail ArgumentError, "Missing the required parameter 'parent_customer_uid' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'parent_customer_code' is set
      if @api_client.config.client_side_validation && parent_customer_code.nil?
        fail ArgumentError, "Missing the required parameter 'parent_customer_code' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'parent_external_id' is set
      if @api_client.config.client_side_validation && parent_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'parent_external_id' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'referral_customer1_uid' is set
      if @api_client.config.client_side_validation && referral_customer1_uid.nil?
        fail ArgumentError, "Missing the required parameter 'referral_customer1_uid' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'referral_customer1_code' is set
      if @api_client.config.client_side_validation && referral_customer1_code.nil?
        fail ArgumentError, "Missing the required parameter 'referral_customer1_code' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'referral_customer2_uid' is set
      if @api_client.config.client_side_validation && referral_customer2_uid.nil?
        fail ArgumentError, "Missing the required parameter 'referral_customer2_uid' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'referral_customer2_code' is set
      if @api_client.config.client_side_validation && referral_customer2_code.nil?
        fail ArgumentError, "Missing the required parameter 'referral_customer2_code' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'alert_count' is set
      if @api_client.config.client_side_validation && alert_count.nil?
        fail ArgumentError, "Missing the required parameter 'alert_count' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'created' is set
      if @api_client.config.client_side_validation && created.nil?
        fail ArgumentError, "Missing the required parameter 'created' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'created_local' is set
      if @api_client.config.client_side_validation && created_local.nil?
        fail ArgumentError, "Missing the required parameter 'created_local' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'signup_channel_uid' is set
      if @api_client.config.client_side_validation && signup_channel_uid.nil?
        fail ArgumentError, "Missing the required parameter 'signup_channel_uid' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'signup_store_uid' is set
      if @api_client.config.client_side_validation && signup_store_uid.nil?
        fail ArgumentError, "Missing the required parameter 'signup_store_uid' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'signup_store_code' is set
      if @api_client.config.client_side_validation && signup_store_code.nil?
        fail ArgumentError, "Missing the required parameter 'signup_store_code' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'signup_store_external_id' is set
      if @api_client.config.client_side_validation && signup_store_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'signup_store_external_id' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'last_name' is set
      if @api_client.config.client_side_validation && last_name.nil?
        fail ArgumentError, "Missing the required parameter 'last_name' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'custom_fields' is set
      if @api_client.config.client_side_validation && custom_fields.nil?
        fail ArgumentError, "Missing the required parameter 'custom_fields' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.cart_customer_set_cart_customer_by_external_id"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/setcustomer'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cartUid'] = opts[:'cart_uid'] if !opts[:'cart_uid'].nil?
      query_params[:'externalId'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      query_params[:'sourceExternalId'] = opts[:'source_external_id'] if !opts[:'source_external_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['ExternalId'] = external_id
      form_params['FirstName2'] = first_name2
      form_params['LastName2'] = last_name2
      form_params['Address'] = address
      form_params['AddressModified'] = address_modified
      form_params['AddressValidated'] = address_validated
      form_params['CompanyName'] = company_name
      form_params['Phone1'] = phone1
      form_params['Phone2'] = phone2
      form_params['MobilePhone'] = mobile_phone
      form_params['FaxNumber'] = fax_number
      form_params['EmailAddress'] = email_address
      form_params['FacebookId'] = facebook_id
      form_params['TwitterId'] = twitter_id
      form_params['MobileDeviceId'] = mobile_device_id
      form_params['LoyaltyRedemptionDisabled'] = loyalty_redemption_disabled
      form_params['LoyaltyAccrualDisabled'] = loyalty_accrual_disabled
      form_params['LoyaltyCardNumber'] = loyalty_card_number
      form_params['CurrentLoyaltyPoints'] = current_loyalty_points
      form_params['CurrentLoyaltyCurrency'] = current_loyalty_currency
      form_params['EditAtPOS'] = edit_at_pos
      form_params['WebAccount'] = web_account
      form_params['Verified'] = verified
      form_params['TaxExempt'] = tax_exempt
      form_params['BirthDate'] = birth_date
      form_params['LoyaltyPointsAccounts'] = @api_client.build_collection_param(loyalty_points_accounts, :multi)
      form_params['LoyaltyCurrencyAccounts'] = @api_client.build_collection_param(loyalty_currency_accounts, :multi)
      form_params['Type'] = type
      form_params['PriceLevel'] = price_level
      form_params['TransactionCount'] = transaction_count
      form_params['TotalSales'] = total_sales
      form_params['ClubMemberships'] = @api_client.build_collection_param(club_memberships, :multi)
      form_params['SubscriberGroupMemberships'] = @api_client.build_collection_param(subscriber_group_memberships, :multi)
      form_params['LoyaltytProgramMemberships'] = @api_client.build_collection_param(loyaltyt_program_memberships, :multi)
      form_params['LoyaltyProgramMemberships'] = @api_client.build_collection_param(loyalty_program_memberships, :multi)
      form_params['NoEmail'] = no_email
      form_params['NoTextMessages'] = no_text_messages
      form_params['Salutation'] = salutation
      form_params['ParentCustomerUid'] = parent_customer_uid
      form_params['ParentCustomerCode'] = parent_customer_code
      form_params['ParentExternalId'] = parent_external_id
      form_params['ReferralCustomer1Uid'] = referral_customer1_uid
      form_params['ReferralCustomer1Code'] = referral_customer1_code
      form_params['ReferralCustomer2Uid'] = referral_customer2_uid
      form_params['ReferralCustomer2Code'] = referral_customer2_code
      form_params['AlertCount'] = alert_count
      form_params['Created'] = created
      form_params['CreatedLocal'] = created_local
      form_params['SignupChannelUid'] = signup_channel_uid
      form_params['SignupStoreUid'] = signup_store_uid
      form_params['SignupStoreCode'] = signup_store_code
      form_params['SignupStoreExternalId'] = signup_store_external_id
      form_params['Id'] = id
      form_params['Uid'] = uid
      form_params['Code'] = code
      form_params['FirstName'] = first_name
      form_params['LastName'] = last_name
      form_params['CustomFields'] = custom_fields

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#cart_customer_set_cart_customer_by_external_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :external_id 
    # @option opts [String] :source_external_id 
    # @option opts [BOOLEAN] :allocate_charges 
    # @return [ServerResponseCart]
    def cart_models_get_by_query(access_key, opts = {})
      data, _status_code, _headers = cart_models_get_by_query_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :external_id 
    # @option opts [String] :source_external_id 
    # @option opts [BOOLEAN] :allocate_charges 
    # @return [Array<(ServerResponseCart, Integer, Hash)>] ServerResponseCart data, response status code and response headers
    def cart_models_get_by_query_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.cart_models_get_by_query ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.cart_models_get_by_query"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/cartmodels'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cartUid'] = opts[:'cart_uid'] if !opts[:'cart_uid'].nil?
      query_params[:'externalId'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      query_params[:'sourceExternalId'] = opts[:'source_external_id'] if !opts[:'source_external_id'].nil?
      query_params[:'allocateCharges'] = opts[:'allocate_charges'] if !opts[:'allocate_charges'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseCart' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#cart_models_get_by_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param cart_uid 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :alert_uid 
    # @return [ServerResponseIEnumerableAlert]
    def cart_models_get_cart_model_alert_async(access_key, cart_uid, opts = {})
      data, _status_code, _headers = cart_models_get_cart_model_alert_async_with_http_info(access_key, cart_uid, opts)
      data
    end

    # @param access_key 
    # @param cart_uid 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :alert_uid 
    # @return [Array<(ServerResponseIEnumerableAlert, Integer, Hash)>] ServerResponseIEnumerableAlert data, response status code and response headers
    def cart_models_get_cart_model_alert_async_with_http_info(access_key, cart_uid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.cart_models_get_cart_model_alert_async ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.cart_models_get_cart_model_alert_async"
      end
      # verify the required parameter 'cart_uid' is set
      if @api_client.config.client_side_validation && cart_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cart_uid' when calling CartsApi.cart_models_get_cart_model_alert_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/cartmodels/{cartUid}/alerts'.sub('{' + 'accessKey' + '}', access_key.to_s).sub('{' + 'cartUid' + '}', cart_uid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'alertUid'] = opts[:'alert_uid'] if !opts[:'alert_uid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIEnumerableAlert' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#cart_models_get_cart_model_alert_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :external_id 
    # @option opts [String] :source_external_id 
    # @return [ServerResponseIEnumerableCartLine]
    def cart_models_get_cart_model_commitment_async(access_key, opts = {})
      data, _status_code, _headers = cart_models_get_cart_model_commitment_async_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :external_id 
    # @option opts [String] :source_external_id 
    # @return [Array<(ServerResponseIEnumerableCartLine, Integer, Hash)>] ServerResponseIEnumerableCartLine data, response status code and response headers
    def cart_models_get_cart_model_commitment_async_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.cart_models_get_cart_model_commitment_async ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.cart_models_get_cart_model_commitment_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/cartmodels/commitment'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cartUid'] = opts[:'cart_uid'] if !opts[:'cart_uid'].nil?
      query_params[:'externalId'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      query_params[:'sourceExternalId'] = opts[:'source_external_id'] if !opts[:'source_external_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIEnumerableCartLine' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#cart_models_get_cart_model_commitment_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def carts_acknowledge_alert_async(body, access_key, opts = {})
      data, _status_code, _headers = carts_acknowledge_alert_async_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def carts_acknowledge_alert_async_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.carts_acknowledge_alert_async ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CartsApi.carts_acknowledge_alert_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.carts_acknowledge_alert_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/acknowledgealert'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CartUid'] = cart_uid
      form_params['CartExternalId'] = cart_external_id
      form_params['CartSourceExternalId'] = cart_source_external_id
      form_params['AlertUid'] = alert_uid
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#carts_acknowledge_alert_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param cart_uid 
    # @param cart_external_id 
    # @param cart_source_external_id 
    # @param alert_uid 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def carts_acknowledge_alert_async(cart_uid, cart_external_id, cart_source_external_id, alert_uid, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = carts_acknowledge_alert_async_with_http_info(cart_uid, cart_external_id, cart_source_external_id, alert_uid, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param cart_uid 
    # @param cart_external_id 
    # @param cart_source_external_id 
    # @param alert_uid 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def carts_acknowledge_alert_async_with_http_info(cart_uid, cart_external_id, cart_source_external_id, alert_uid, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.carts_acknowledge_alert_async ...'
      end
      # verify the required parameter 'cart_uid' is set
      if @api_client.config.client_side_validation && cart_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cart_uid' when calling CartsApi.carts_acknowledge_alert_async"
      end
      # verify the required parameter 'cart_external_id' is set
      if @api_client.config.client_side_validation && cart_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cart_external_id' when calling CartsApi.carts_acknowledge_alert_async"
      end
      # verify the required parameter 'cart_source_external_id' is set
      if @api_client.config.client_side_validation && cart_source_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cart_source_external_id' when calling CartsApi.carts_acknowledge_alert_async"
      end
      # verify the required parameter 'alert_uid' is set
      if @api_client.config.client_side_validation && alert_uid.nil?
        fail ArgumentError, "Missing the required parameter 'alert_uid' when calling CartsApi.carts_acknowledge_alert_async"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling CartsApi.carts_acknowledge_alert_async"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling CartsApi.carts_acknowledge_alert_async"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling CartsApi.carts_acknowledge_alert_async"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling CartsApi.carts_acknowledge_alert_async"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling CartsApi.carts_acknowledge_alert_async"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling CartsApi.carts_acknowledge_alert_async"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CartsApi.carts_acknowledge_alert_async"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling CartsApi.carts_acknowledge_alert_async"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling CartsApi.carts_acknowledge_alert_async"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling CartsApi.carts_acknowledge_alert_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.carts_acknowledge_alert_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/acknowledgealert'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CartUid'] = cart_uid
      form_params['CartExternalId'] = cart_external_id
      form_params['CartSourceExternalId'] = cart_source_external_id
      form_params['AlertUid'] = alert_uid
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#carts_acknowledge_alert_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param cart_uid 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseIEnumerableCartAccount]
    def carts_get_accounts(access_key, cart_uid, opts = {})
      data, _status_code, _headers = carts_get_accounts_with_http_info(access_key, cart_uid, opts)
      data
    end

    # @param access_key 
    # @param cart_uid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseIEnumerableCartAccount, Integer, Hash)>] ServerResponseIEnumerableCartAccount data, response status code and response headers
    def carts_get_accounts_with_http_info(access_key, cart_uid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.carts_get_accounts ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.carts_get_accounts"
      end
      # verify the required parameter 'cart_uid' is set
      if @api_client.config.client_side_validation && cart_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cart_uid' when calling CartsApi.carts_get_accounts"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/{cartUid}/accounts'.sub('{' + 'accessKey' + '}', access_key.to_s).sub('{' + 'cartUid' + '}', cart_uid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIEnumerableCartAccount' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#carts_get_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :external_id 
    # @option opts [String] :source_external_id 
    # @return [ServerResponseIEnumerableCartAccount]
    def carts_get_accounts_0(access_key, opts = {})
      data, _status_code, _headers = carts_get_accounts_0_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :external_id 
    # @option opts [String] :source_external_id 
    # @return [Array<(ServerResponseIEnumerableCartAccount, Integer, Hash)>] ServerResponseIEnumerableCartAccount data, response status code and response headers
    def carts_get_accounts_0_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.carts_get_accounts_0 ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.carts_get_accounts_0"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/accounts'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cartUid'] = opts[:'cart_uid'] if !opts[:'cart_uid'].nil?
      query_params[:'externalId'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      query_params[:'sourceExternalId'] = opts[:'source_external_id'] if !opts[:'source_external_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIEnumerableCartAccount' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#carts_get_accounts_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param cart_uid 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :alert_uid 
    # @return [ServerResponseIEnumerableAlert]
    def carts_get_alert_detail_async(access_key, cart_uid, opts = {})
      data, _status_code, _headers = carts_get_alert_detail_async_with_http_info(access_key, cart_uid, opts)
      data
    end

    # @param access_key 
    # @param cart_uid 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :alert_uid 
    # @return [Array<(ServerResponseIEnumerableAlert, Integer, Hash)>] ServerResponseIEnumerableAlert data, response status code and response headers
    def carts_get_alert_detail_async_with_http_info(access_key, cart_uid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.carts_get_alert_detail_async ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.carts_get_alert_detail_async"
      end
      # verify the required parameter 'cart_uid' is set
      if @api_client.config.client_side_validation && cart_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cart_uid' when calling CartsApi.carts_get_alert_detail_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/{cartUid}/alerts'.sub('{' + 'accessKey' + '}', access_key.to_s).sub('{' + 'cartUid' + '}', cart_uid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'alertUid'] = opts[:'alert_uid'] if !opts[:'alert_uid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIEnumerableAlert' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#carts_get_alert_detail_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :external_id 
    # @option opts [String] :source_external_id 
    # @option opts [String] :alert_uid 
    # @return [ServerResponseIEnumerableAlert]
    def carts_get_alert_details_async(access_key, opts = {})
      data, _status_code, _headers = carts_get_alert_details_async_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :external_id 
    # @option opts [String] :source_external_id 
    # @option opts [String] :alert_uid 
    # @return [Array<(ServerResponseIEnumerableAlert, Integer, Hash)>] ServerResponseIEnumerableAlert data, response status code and response headers
    def carts_get_alert_details_async_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.carts_get_alert_details_async ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.carts_get_alert_details_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/alerts'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cartUid'] = opts[:'cart_uid'] if !opts[:'cart_uid'].nil?
      query_params[:'externalId'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      query_params[:'sourceExternalId'] = opts[:'source_external_id'] if !opts[:'source_external_id'].nil?
      query_params[:'alertUid'] = opts[:'alert_uid'] if !opts[:'alert_uid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIEnumerableAlert' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#carts_get_alert_details_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :external_id 
    # @option opts [String] :source_external_id 
    # @option opts [BOOLEAN] :allocate_charges 
    # @return [ServerResponseCart]
    def carts_get_by_query(access_key, opts = {})
      data, _status_code, _headers = carts_get_by_query_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :external_id 
    # @option opts [String] :source_external_id 
    # @option opts [BOOLEAN] :allocate_charges 
    # @return [Array<(ServerResponseCart, Integer, Hash)>] ServerResponseCart data, response status code and response headers
    def carts_get_by_query_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.carts_get_by_query ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.carts_get_by_query"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cartUid'] = opts[:'cart_uid'] if !opts[:'cart_uid'].nil?
      query_params[:'externalId'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      query_params[:'sourceExternalId'] = opts[:'source_external_id'] if !opts[:'source_external_id'].nil?
      query_params[:'allocateCharges'] = opts[:'allocate_charges'] if !opts[:'allocate_charges'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseCart' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#carts_get_by_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param cart_uid 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseIEnumerableCartLine]
    def carts_get_lines(access_key, cart_uid, opts = {})
      data, _status_code, _headers = carts_get_lines_with_http_info(access_key, cart_uid, opts)
      data
    end

    # @param access_key 
    # @param cart_uid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseIEnumerableCartLine, Integer, Hash)>] ServerResponseIEnumerableCartLine data, response status code and response headers
    def carts_get_lines_with_http_info(access_key, cart_uid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.carts_get_lines ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.carts_get_lines"
      end
      # verify the required parameter 'cart_uid' is set
      if @api_client.config.client_side_validation && cart_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cart_uid' when calling CartsApi.carts_get_lines"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/{cartUid}/lines'.sub('{' + 'accessKey' + '}', access_key.to_s).sub('{' + 'cartUid' + '}', cart_uid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIEnumerableCartLine' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#carts_get_lines\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :external_id 
    # @option opts [String] :source_external_id 
    # @return [ServerResponseIEnumerableCartLine]
    def carts_get_lines_0(access_key, opts = {})
      data, _status_code, _headers = carts_get_lines_0_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :external_id 
    # @option opts [String] :source_external_id 
    # @return [Array<(ServerResponseIEnumerableCartLine, Integer, Hash)>] ServerResponseIEnumerableCartLine data, response status code and response headers
    def carts_get_lines_0_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.carts_get_lines_0 ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.carts_get_lines_0"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/lines'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cartUid'] = opts[:'cart_uid'] if !opts[:'cart_uid'].nil?
      query_params[:'externalId'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      query_params[:'sourceExternalId'] = opts[:'source_external_id'] if !opts[:'source_external_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIEnumerableCartLine' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#carts_get_lines_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :external_id 
    # @option opts [String] :source_external_id 
    # @return [ServerResponseIEnumerableRule]
    def carts_get_rule_exclusions_async(access_key, opts = {})
      data, _status_code, _headers = carts_get_rule_exclusions_async_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :external_id 
    # @option opts [String] :source_external_id 
    # @return [Array<(ServerResponseIEnumerableRule, Integer, Hash)>] ServerResponseIEnumerableRule data, response status code and response headers
    def carts_get_rule_exclusions_async_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.carts_get_rule_exclusions_async ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.carts_get_rule_exclusions_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/ruleexclusions'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cartUid'] = opts[:'cart_uid'] if !opts[:'cart_uid'].nil?
      query_params[:'externalId'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      query_params[:'sourceExternalId'] = opts[:'source_external_id'] if !opts[:'source_external_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIEnumerableRule' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#carts_get_rule_exclusions_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param cart_uid 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseIEnumerableCartShipment]
    def carts_get_shipments(access_key, cart_uid, opts = {})
      data, _status_code, _headers = carts_get_shipments_with_http_info(access_key, cart_uid, opts)
      data
    end

    # @param access_key 
    # @param cart_uid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseIEnumerableCartShipment, Integer, Hash)>] ServerResponseIEnumerableCartShipment data, response status code and response headers
    def carts_get_shipments_with_http_info(access_key, cart_uid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.carts_get_shipments ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.carts_get_shipments"
      end
      # verify the required parameter 'cart_uid' is set
      if @api_client.config.client_side_validation && cart_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cart_uid' when calling CartsApi.carts_get_shipments"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/{cartUid}/shipments'.sub('{' + 'accessKey' + '}', access_key.to_s).sub('{' + 'cartUid' + '}', cart_uid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIEnumerableCartShipment' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#carts_get_shipments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :externa_id 
    # @option opts [String] :source_external_id 
    # @return [ServerResponseIEnumerableCartShipment]
    def carts_get_shipments_0(access_key, opts = {})
      data, _status_code, _headers = carts_get_shipments_0_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :externa_id 
    # @option opts [String] :source_external_id 
    # @return [Array<(ServerResponseIEnumerableCartShipment, Integer, Hash)>] ServerResponseIEnumerableCartShipment data, response status code and response headers
    def carts_get_shipments_0_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.carts_get_shipments_0 ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.carts_get_shipments_0"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/shipments'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cartUid'] = opts[:'cart_uid'] if !opts[:'cart_uid'].nil?
      query_params[:'externaId'] = opts[:'externa_id'] if !opts[:'externa_id'].nil?
      query_params[:'sourceExternalId'] = opts[:'source_external_id'] if !opts[:'source_external_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIEnumerableCartShipment' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#carts_get_shipments_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseClaim]
    def claim_cart(body, access_key, opts = {})
      data, _status_code, _headers = claim_cart_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseClaim, Integer, Hash)>] ServerResponseClaim data, response status code and response headers
    def claim_cart_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.claim_cart ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CartsApi.claim_cart"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.claim_cart"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/claim'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CartUid'] = cart_uid
      form_params['CartExternalId'] = cart_external_id
      form_params['CartSourceExternalId'] = cart_source_external_id
      form_params['ChannelUid'] = channel_uid
      form_params['ChannelCode'] = channel_code
      form_params['CustomerUid'] = customer_uid
      form_params['CustomerExternalId'] = customer_external_id
      form_params['CustomerCode'] = customer_code
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseClaim' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#claim_cart\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param cart_uid 
    # @param cart_external_id 
    # @param cart_source_external_id 
    # @param channel_uid 
    # @param channel_code 
    # @param customer_uid 
    # @param customer_external_id 
    # @param customer_code 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseClaim]
    def claim_cart(cart_uid, cart_external_id, cart_source_external_id, channel_uid, channel_code, customer_uid, customer_external_id, customer_code, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = claim_cart_with_http_info(cart_uid, cart_external_id, cart_source_external_id, channel_uid, channel_code, customer_uid, customer_external_id, customer_code, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param cart_uid 
    # @param cart_external_id 
    # @param cart_source_external_id 
    # @param channel_uid 
    # @param channel_code 
    # @param customer_uid 
    # @param customer_external_id 
    # @param customer_code 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseClaim, Integer, Hash)>] ServerResponseClaim data, response status code and response headers
    def claim_cart_with_http_info(cart_uid, cart_external_id, cart_source_external_id, channel_uid, channel_code, customer_uid, customer_external_id, customer_code, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.claim_cart ...'
      end
      # verify the required parameter 'cart_uid' is set
      if @api_client.config.client_side_validation && cart_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cart_uid' when calling CartsApi.claim_cart"
      end
      # verify the required parameter 'cart_external_id' is set
      if @api_client.config.client_side_validation && cart_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cart_external_id' when calling CartsApi.claim_cart"
      end
      # verify the required parameter 'cart_source_external_id' is set
      if @api_client.config.client_side_validation && cart_source_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cart_source_external_id' when calling CartsApi.claim_cart"
      end
      # verify the required parameter 'channel_uid' is set
      if @api_client.config.client_side_validation && channel_uid.nil?
        fail ArgumentError, "Missing the required parameter 'channel_uid' when calling CartsApi.claim_cart"
      end
      # verify the required parameter 'channel_code' is set
      if @api_client.config.client_side_validation && channel_code.nil?
        fail ArgumentError, "Missing the required parameter 'channel_code' when calling CartsApi.claim_cart"
      end
      # verify the required parameter 'customer_uid' is set
      if @api_client.config.client_side_validation && customer_uid.nil?
        fail ArgumentError, "Missing the required parameter 'customer_uid' when calling CartsApi.claim_cart"
      end
      # verify the required parameter 'customer_external_id' is set
      if @api_client.config.client_side_validation && customer_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_external_id' when calling CartsApi.claim_cart"
      end
      # verify the required parameter 'customer_code' is set
      if @api_client.config.client_side_validation && customer_code.nil?
        fail ArgumentError, "Missing the required parameter 'customer_code' when calling CartsApi.claim_cart"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling CartsApi.claim_cart"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling CartsApi.claim_cart"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling CartsApi.claim_cart"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling CartsApi.claim_cart"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling CartsApi.claim_cart"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling CartsApi.claim_cart"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CartsApi.claim_cart"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling CartsApi.claim_cart"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling CartsApi.claim_cart"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling CartsApi.claim_cart"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.claim_cart"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/claim'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CartUid'] = cart_uid
      form_params['CartExternalId'] = cart_external_id
      form_params['CartSourceExternalId'] = cart_source_external_id
      form_params['ChannelUid'] = channel_uid
      form_params['ChannelCode'] = channel_code
      form_params['CustomerUid'] = customer_uid
      form_params['CustomerExternalId'] = customer_external_id
      form_params['CustomerCode'] = customer_code
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseClaim' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#claim_cart\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommitment]
    def commit_cart(body, access_key, opts = {})
      data, _status_code, _headers = commit_cart_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommitment, Integer, Hash)>] ServerResponseCommitment data, response status code and response headers
    def commit_cart_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.commit_cart ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CartsApi.commit_cart"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.commit_cart"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/commit'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CartUid'] = cart_uid
      form_params['CartExternalId'] = cart_external_id
      form_params['CartSourceExternalId'] = cart_source_external_id
      form_params['OrderProcessor'] = order_processor
      form_params['Payments'] = @api_client.build_collection_param(payments, :multi)
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommitment' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#commit_cart\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param cart_uid 
    # @param cart_external_id 
    # @param cart_source_external_id 
    # @param order_processor 
    # @param payments 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommitment]
    def commit_cart(cart_uid, cart_external_id, cart_source_external_id, order_processor, payments, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = commit_cart_with_http_info(cart_uid, cart_external_id, cart_source_external_id, order_processor, payments, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param cart_uid 
    # @param cart_external_id 
    # @param cart_source_external_id 
    # @param order_processor 
    # @param payments 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommitment, Integer, Hash)>] ServerResponseCommitment data, response status code and response headers
    def commit_cart_with_http_info(cart_uid, cart_external_id, cart_source_external_id, order_processor, payments, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.commit_cart ...'
      end
      # verify the required parameter 'cart_uid' is set
      if @api_client.config.client_side_validation && cart_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cart_uid' when calling CartsApi.commit_cart"
      end
      # verify the required parameter 'cart_external_id' is set
      if @api_client.config.client_side_validation && cart_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cart_external_id' when calling CartsApi.commit_cart"
      end
      # verify the required parameter 'cart_source_external_id' is set
      if @api_client.config.client_side_validation && cart_source_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cart_source_external_id' when calling CartsApi.commit_cart"
      end
      # verify the required parameter 'order_processor' is set
      if @api_client.config.client_side_validation && order_processor.nil?
        fail ArgumentError, "Missing the required parameter 'order_processor' when calling CartsApi.commit_cart"
      end
      # verify the required parameter 'payments' is set
      if @api_client.config.client_side_validation && payments.nil?
        fail ArgumentError, "Missing the required parameter 'payments' when calling CartsApi.commit_cart"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling CartsApi.commit_cart"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling CartsApi.commit_cart"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling CartsApi.commit_cart"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling CartsApi.commit_cart"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling CartsApi.commit_cart"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling CartsApi.commit_cart"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CartsApi.commit_cart"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling CartsApi.commit_cart"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling CartsApi.commit_cart"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling CartsApi.commit_cart"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.commit_cart"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/commit'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CartUid'] = cart_uid
      form_params['CartExternalId'] = cart_external_id
      form_params['CartSourceExternalId'] = cart_source_external_id
      form_params['OrderProcessor'] = order_processor
      form_params['Payments'] = @api_client.build_collection_param(payments, :multi)
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommitment' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#commit_cart\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def delete_cart_shipment_delete_shipment(body, access_key, opts = {})
      data, _status_code, _headers = delete_cart_shipment_delete_shipment_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def delete_cart_shipment_delete_shipment_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.delete_cart_shipment_delete_shipment ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CartsApi.delete_cart_shipment_delete_shipment"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.delete_cart_shipment_delete_shipment"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/deleteshipment'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CartUid'] = cart_uid
      form_params['CartExternalId'] = cart_external_id
      form_params['CartSourceExternalId'] = cart_source_external_id
      form_params['ShipmentUid'] = shipment_uid
      form_params['ShipmentNumber'] = shipment_number
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#delete_cart_shipment_delete_shipment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param cart_uid 
    # @param cart_external_id 
    # @param cart_source_external_id 
    # @param shipment_uid 
    # @param shipment_number 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def delete_cart_shipment_delete_shipment(cart_uid, cart_external_id, cart_source_external_id, shipment_uid, shipment_number, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = delete_cart_shipment_delete_shipment_with_http_info(cart_uid, cart_external_id, cart_source_external_id, shipment_uid, shipment_number, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param cart_uid 
    # @param cart_external_id 
    # @param cart_source_external_id 
    # @param shipment_uid 
    # @param shipment_number 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def delete_cart_shipment_delete_shipment_with_http_info(cart_uid, cart_external_id, cart_source_external_id, shipment_uid, shipment_number, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.delete_cart_shipment_delete_shipment ...'
      end
      # verify the required parameter 'cart_uid' is set
      if @api_client.config.client_side_validation && cart_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cart_uid' when calling CartsApi.delete_cart_shipment_delete_shipment"
      end
      # verify the required parameter 'cart_external_id' is set
      if @api_client.config.client_side_validation && cart_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cart_external_id' when calling CartsApi.delete_cart_shipment_delete_shipment"
      end
      # verify the required parameter 'cart_source_external_id' is set
      if @api_client.config.client_side_validation && cart_source_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cart_source_external_id' when calling CartsApi.delete_cart_shipment_delete_shipment"
      end
      # verify the required parameter 'shipment_uid' is set
      if @api_client.config.client_side_validation && shipment_uid.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_uid' when calling CartsApi.delete_cart_shipment_delete_shipment"
      end
      # verify the required parameter 'shipment_number' is set
      if @api_client.config.client_side_validation && shipment_number.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_number' when calling CartsApi.delete_cart_shipment_delete_shipment"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling CartsApi.delete_cart_shipment_delete_shipment"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling CartsApi.delete_cart_shipment_delete_shipment"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling CartsApi.delete_cart_shipment_delete_shipment"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling CartsApi.delete_cart_shipment_delete_shipment"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling CartsApi.delete_cart_shipment_delete_shipment"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling CartsApi.delete_cart_shipment_delete_shipment"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CartsApi.delete_cart_shipment_delete_shipment"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling CartsApi.delete_cart_shipment_delete_shipment"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling CartsApi.delete_cart_shipment_delete_shipment"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling CartsApi.delete_cart_shipment_delete_shipment"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.delete_cart_shipment_delete_shipment"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/deleteshipment'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CartUid'] = cart_uid
      form_params['CartExternalId'] = cart_external_id
      form_params['CartSourceExternalId'] = cart_source_external_id
      form_params['ShipmentUid'] = shipment_uid
      form_params['ShipmentNumber'] = shipment_number
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#delete_cart_shipment_delete_shipment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :external_id 
    # @option opts [String] :source_external_id 
    # @return [ServerResponseCoupon]
    def get_available_cart_coupons_get_available_coupons(access_key, opts = {})
      data, _status_code, _headers = get_available_cart_coupons_get_available_coupons_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cart_uid 
    # @option opts [String] :external_id 
    # @option opts [String] :source_external_id 
    # @return [Array<(ServerResponseCoupon, Integer, Hash)>] ServerResponseCoupon data, response status code and response headers
    def get_available_cart_coupons_get_available_coupons_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.get_available_cart_coupons_get_available_coupons ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.get_available_cart_coupons_get_available_coupons"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/availablecoupons'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cartUid'] = opts[:'cart_uid'] if !opts[:'cart_uid'].nil?
      query_params[:'externalId'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      query_params[:'sourceExternalId'] = opts[:'source_external_id'] if !opts[:'source_external_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseCoupon' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#get_available_cart_coupons_get_available_coupons\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :query_cart_uid 
    # @option opts [String] :query_cart_external_id 
    # @option opts [String] :query_cart_source_external_id 
    # @return [ServerResponseIEnumerableLocation]
    def query_cart_pickup_locations_get_cart_pickup_locations_async(access_key, opts = {})
      data, _status_code, _headers = query_cart_pickup_locations_get_cart_pickup_locations_async_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :query_cart_uid 
    # @option opts [String] :query_cart_external_id 
    # @option opts [String] :query_cart_source_external_id 
    # @return [Array<(ServerResponseIEnumerableLocation, Integer, Hash)>] ServerResponseIEnumerableLocation data, response status code and response headers
    def query_cart_pickup_locations_get_cart_pickup_locations_async_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.query_cart_pickup_locations_get_cart_pickup_locations_async ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.query_cart_pickup_locations_get_cart_pickup_locations_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/pickuplocations'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query.cartUid'] = opts[:'query_cart_uid'] if !opts[:'query_cart_uid'].nil?
      query_params[:'query.cartExternalId'] = opts[:'query_cart_external_id'] if !opts[:'query_cart_external_id'].nil?
      query_params[:'query.cartSourceExternalId'] = opts[:'query_cart_source_external_id'] if !opts[:'query_cart_source_external_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIEnumerableLocation' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#query_cart_pickup_locations_get_cart_pickup_locations_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponse]
    def remove_rule_exclusion_remove_rule_exclusion_async(body, access_key, opts = {})
      data, _status_code, _headers = remove_rule_exclusion_remove_rule_exclusion_async_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponse, Integer, Hash)>] ServerResponse data, response status code and response headers
    def remove_rule_exclusion_remove_rule_exclusion_async_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.remove_rule_exclusion_remove_rule_exclusion_async ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CartsApi.remove_rule_exclusion_remove_rule_exclusion_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.remove_rule_exclusion_remove_rule_exclusion_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/removeruleexclusions'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CartUid'] = cart_uid
      form_params['CartExternalId'] = cart_external_id
      form_params['CartSourceExternalId'] = cart_source_external_id
      form_params['Rules'] = @api_client.build_collection_param(rules, :multi)
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#remove_rule_exclusion_remove_rule_exclusion_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param cart_uid 
    # @param cart_external_id 
    # @param cart_source_external_id 
    # @param rules 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponse]
    def remove_rule_exclusion_remove_rule_exclusion_async(cart_uid, cart_external_id, cart_source_external_id, rules, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = remove_rule_exclusion_remove_rule_exclusion_async_with_http_info(cart_uid, cart_external_id, cart_source_external_id, rules, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param cart_uid 
    # @param cart_external_id 
    # @param cart_source_external_id 
    # @param rules 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponse, Integer, Hash)>] ServerResponse data, response status code and response headers
    def remove_rule_exclusion_remove_rule_exclusion_async_with_http_info(cart_uid, cart_external_id, cart_source_external_id, rules, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.remove_rule_exclusion_remove_rule_exclusion_async ...'
      end
      # verify the required parameter 'cart_uid' is set
      if @api_client.config.client_side_validation && cart_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cart_uid' when calling CartsApi.remove_rule_exclusion_remove_rule_exclusion_async"
      end
      # verify the required parameter 'cart_external_id' is set
      if @api_client.config.client_side_validation && cart_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cart_external_id' when calling CartsApi.remove_rule_exclusion_remove_rule_exclusion_async"
      end
      # verify the required parameter 'cart_source_external_id' is set
      if @api_client.config.client_side_validation && cart_source_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cart_source_external_id' when calling CartsApi.remove_rule_exclusion_remove_rule_exclusion_async"
      end
      # verify the required parameter 'rules' is set
      if @api_client.config.client_side_validation && rules.nil?
        fail ArgumentError, "Missing the required parameter 'rules' when calling CartsApi.remove_rule_exclusion_remove_rule_exclusion_async"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling CartsApi.remove_rule_exclusion_remove_rule_exclusion_async"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling CartsApi.remove_rule_exclusion_remove_rule_exclusion_async"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling CartsApi.remove_rule_exclusion_remove_rule_exclusion_async"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling CartsApi.remove_rule_exclusion_remove_rule_exclusion_async"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling CartsApi.remove_rule_exclusion_remove_rule_exclusion_async"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling CartsApi.remove_rule_exclusion_remove_rule_exclusion_async"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CartsApi.remove_rule_exclusion_remove_rule_exclusion_async"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling CartsApi.remove_rule_exclusion_remove_rule_exclusion_async"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling CartsApi.remove_rule_exclusion_remove_rule_exclusion_async"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling CartsApi.remove_rule_exclusion_remove_rule_exclusion_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.remove_rule_exclusion_remove_rule_exclusion_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/removeruleexclusions'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CartUid'] = cart_uid
      form_params['CartExternalId'] = cart_external_id
      form_params['CartSourceExternalId'] = cart_source_external_id
      form_params['Rules'] = @api_client.build_collection_param(rules, :multi)
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#remove_rule_exclusion_remove_rule_exclusion_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def reverse_commit_cart_reverse_commit_cart_async(body, access_key, opts = {})
      data, _status_code, _headers = reverse_commit_cart_reverse_commit_cart_async_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def reverse_commit_cart_reverse_commit_cart_async_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.reverse_commit_cart_reverse_commit_cart_async ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CartsApi.reverse_commit_cart_reverse_commit_cart_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.reverse_commit_cart_reverse_commit_cart_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/reversals'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['CommandUid'] = command_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#reverse_commit_cart_reverse_commit_cart_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param uid 
    # @param reference_number 
    # @param command_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def reverse_commit_cart_reverse_commit_cart_async(uid, reference_number, command_uid, access_key, opts = {})
      data, _status_code, _headers = reverse_commit_cart_reverse_commit_cart_async_with_http_info(uid, reference_number, command_uid, access_key, opts)
      data
    end

    # @param uid 
    # @param reference_number 
    # @param command_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def reverse_commit_cart_reverse_commit_cart_async_with_http_info(uid, reference_number, command_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.reverse_commit_cart_reverse_commit_cart_async ...'
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CartsApi.reverse_commit_cart_reverse_commit_cart_async"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling CartsApi.reverse_commit_cart_reverse_commit_cart_async"
      end
      # verify the required parameter 'command_uid' is set
      if @api_client.config.client_side_validation && command_uid.nil?
        fail ArgumentError, "Missing the required parameter 'command_uid' when calling CartsApi.reverse_commit_cart_reverse_commit_cart_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.reverse_commit_cart_reverse_commit_cart_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/reversals'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['CommandUid'] = command_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#reverse_commit_cart_reverse_commit_cart_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def save_cart_header_post_header(body, access_key, opts = {})
      data, _status_code, _headers = save_cart_header_post_header_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def save_cart_header_post_header_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.save_cart_header_post_header ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CartsApi.save_cart_header_post_header"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.save_cart_header_post_header"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/saveheader'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CartUid'] = cart_uid
      form_params['CartExternalId'] = cart_external_id
      form_params['CartSourceExternalId'] = cart_source_external_id
      form_params['Header'] = header
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#save_cart_header_post_header\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param cart_uid 
    # @param cart_external_id 
    # @param cart_source_external_id 
    # @param header 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def save_cart_header_post_header(cart_uid, cart_external_id, cart_source_external_id, header, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = save_cart_header_post_header_with_http_info(cart_uid, cart_external_id, cart_source_external_id, header, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param cart_uid 
    # @param cart_external_id 
    # @param cart_source_external_id 
    # @param header 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def save_cart_header_post_header_with_http_info(cart_uid, cart_external_id, cart_source_external_id, header, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.save_cart_header_post_header ...'
      end
      # verify the required parameter 'cart_uid' is set
      if @api_client.config.client_side_validation && cart_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cart_uid' when calling CartsApi.save_cart_header_post_header"
      end
      # verify the required parameter 'cart_external_id' is set
      if @api_client.config.client_side_validation && cart_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cart_external_id' when calling CartsApi.save_cart_header_post_header"
      end
      # verify the required parameter 'cart_source_external_id' is set
      if @api_client.config.client_side_validation && cart_source_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cart_source_external_id' when calling CartsApi.save_cart_header_post_header"
      end
      # verify the required parameter 'header' is set
      if @api_client.config.client_side_validation && header.nil?
        fail ArgumentError, "Missing the required parameter 'header' when calling CartsApi.save_cart_header_post_header"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling CartsApi.save_cart_header_post_header"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling CartsApi.save_cart_header_post_header"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling CartsApi.save_cart_header_post_header"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling CartsApi.save_cart_header_post_header"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling CartsApi.save_cart_header_post_header"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling CartsApi.save_cart_header_post_header"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CartsApi.save_cart_header_post_header"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling CartsApi.save_cart_header_post_header"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling CartsApi.save_cart_header_post_header"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling CartsApi.save_cart_header_post_header"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.save_cart_header_post_header"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/saveheader'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CartUid'] = cart_uid
      form_params['CartExternalId'] = cart_external_id
      form_params['CartSourceExternalId'] = cart_source_external_id
      form_params['Header'] = header
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#save_cart_header_post_header\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def save_cart_shipment_post_shipment(body, access_key, opts = {})
      data, _status_code, _headers = save_cart_shipment_post_shipment_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def save_cart_shipment_post_shipment_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.save_cart_shipment_post_shipment ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CartsApi.save_cart_shipment_post_shipment"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.save_cart_shipment_post_shipment"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/saveshipment'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CartUid'] = cart_uid
      form_params['CartExternalId'] = cart_external_id
      form_params['CartSourceExternalId'] = cart_source_external_id
      form_params['Shipment'] = shipment
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#save_cart_shipment_post_shipment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param cart_uid 
    # @param cart_external_id 
    # @param cart_source_external_id 
    # @param shipment 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def save_cart_shipment_post_shipment(cart_uid, cart_external_id, cart_source_external_id, shipment, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = save_cart_shipment_post_shipment_with_http_info(cart_uid, cart_external_id, cart_source_external_id, shipment, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param cart_uid 
    # @param cart_external_id 
    # @param cart_source_external_id 
    # @param shipment 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def save_cart_shipment_post_shipment_with_http_info(cart_uid, cart_external_id, cart_source_external_id, shipment, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.save_cart_shipment_post_shipment ...'
      end
      # verify the required parameter 'cart_uid' is set
      if @api_client.config.client_side_validation && cart_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cart_uid' when calling CartsApi.save_cart_shipment_post_shipment"
      end
      # verify the required parameter 'cart_external_id' is set
      if @api_client.config.client_side_validation && cart_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cart_external_id' when calling CartsApi.save_cart_shipment_post_shipment"
      end
      # verify the required parameter 'cart_source_external_id' is set
      if @api_client.config.client_side_validation && cart_source_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cart_source_external_id' when calling CartsApi.save_cart_shipment_post_shipment"
      end
      # verify the required parameter 'shipment' is set
      if @api_client.config.client_side_validation && shipment.nil?
        fail ArgumentError, "Missing the required parameter 'shipment' when calling CartsApi.save_cart_shipment_post_shipment"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling CartsApi.save_cart_shipment_post_shipment"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling CartsApi.save_cart_shipment_post_shipment"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling CartsApi.save_cart_shipment_post_shipment"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling CartsApi.save_cart_shipment_post_shipment"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling CartsApi.save_cart_shipment_post_shipment"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling CartsApi.save_cart_shipment_post_shipment"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CartsApi.save_cart_shipment_post_shipment"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling CartsApi.save_cart_shipment_post_shipment"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling CartsApi.save_cart_shipment_post_shipment"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling CartsApi.save_cart_shipment_post_shipment"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.save_cart_shipment_post_shipment"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/saveshipment'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CartUid'] = cart_uid
      form_params['CartExternalId'] = cart_external_id
      form_params['CartSourceExternalId'] = cart_source_external_id
      form_params['Shipment'] = shipment
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#save_cart_shipment_post_shipment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def set_cart_address_post_async(body, access_key, opts = {})
      data, _status_code, _headers = set_cart_address_post_async_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def set_cart_address_post_async_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.set_cart_address_post_async ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CartsApi.set_cart_address_post_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.set_cart_address_post_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/setcartaddress'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CartUid'] = cart_uid
      form_params['CartExternalId'] = cart_external_id
      form_params['CartSourceExternalId'] = cart_source_external_id
      form_params['Address'] = address
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#set_cart_address_post_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param cart_uid 
    # @param cart_external_id 
    # @param cart_source_external_id 
    # @param address 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def set_cart_address_post_async(cart_uid, cart_external_id, cart_source_external_id, address, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = set_cart_address_post_async_with_http_info(cart_uid, cart_external_id, cart_source_external_id, address, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param cart_uid 
    # @param cart_external_id 
    # @param cart_source_external_id 
    # @param address 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def set_cart_address_post_async_with_http_info(cart_uid, cart_external_id, cart_source_external_id, address, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.set_cart_address_post_async ...'
      end
      # verify the required parameter 'cart_uid' is set
      if @api_client.config.client_side_validation && cart_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cart_uid' when calling CartsApi.set_cart_address_post_async"
      end
      # verify the required parameter 'cart_external_id' is set
      if @api_client.config.client_side_validation && cart_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cart_external_id' when calling CartsApi.set_cart_address_post_async"
      end
      # verify the required parameter 'cart_source_external_id' is set
      if @api_client.config.client_side_validation && cart_source_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cart_source_external_id' when calling CartsApi.set_cart_address_post_async"
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling CartsApi.set_cart_address_post_async"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling CartsApi.set_cart_address_post_async"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling CartsApi.set_cart_address_post_async"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling CartsApi.set_cart_address_post_async"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling CartsApi.set_cart_address_post_async"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling CartsApi.set_cart_address_post_async"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling CartsApi.set_cart_address_post_async"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CartsApi.set_cart_address_post_async"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling CartsApi.set_cart_address_post_async"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling CartsApi.set_cart_address_post_async"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling CartsApi.set_cart_address_post_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.set_cart_address_post_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/setcartaddress'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CartUid'] = cart_uid
      form_params['CartExternalId'] = cart_external_id
      form_params['CartSourceExternalId'] = cart_source_external_id
      form_params['Address'] = address
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#set_cart_address_post_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def set_shipment_address_post_async(body, access_key, opts = {})
      data, _status_code, _headers = set_shipment_address_post_async_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def set_shipment_address_post_async_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.set_shipment_address_post_async ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CartsApi.set_shipment_address_post_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.set_shipment_address_post_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/setshipmentaddress'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CartUid'] = cart_uid
      form_params['CartExternalId'] = cart_external_id
      form_params['CartSourceExternalId'] = cart_source_external_id
      form_params['ShipmentUid'] = shipment_uid
      form_params['Address'] = address
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#set_shipment_address_post_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param cart_uid 
    # @param cart_external_id 
    # @param cart_source_external_id 
    # @param shipment_uid 
    # @param address 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def set_shipment_address_post_async(cart_uid, cart_external_id, cart_source_external_id, shipment_uid, address, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = set_shipment_address_post_async_with_http_info(cart_uid, cart_external_id, cart_source_external_id, shipment_uid, address, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param cart_uid 
    # @param cart_external_id 
    # @param cart_source_external_id 
    # @param shipment_uid 
    # @param address 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def set_shipment_address_post_async_with_http_info(cart_uid, cart_external_id, cart_source_external_id, shipment_uid, address, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.set_shipment_address_post_async ...'
      end
      # verify the required parameter 'cart_uid' is set
      if @api_client.config.client_side_validation && cart_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cart_uid' when calling CartsApi.set_shipment_address_post_async"
      end
      # verify the required parameter 'cart_external_id' is set
      if @api_client.config.client_side_validation && cart_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cart_external_id' when calling CartsApi.set_shipment_address_post_async"
      end
      # verify the required parameter 'cart_source_external_id' is set
      if @api_client.config.client_side_validation && cart_source_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cart_source_external_id' when calling CartsApi.set_shipment_address_post_async"
      end
      # verify the required parameter 'shipment_uid' is set
      if @api_client.config.client_side_validation && shipment_uid.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_uid' when calling CartsApi.set_shipment_address_post_async"
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling CartsApi.set_shipment_address_post_async"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling CartsApi.set_shipment_address_post_async"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling CartsApi.set_shipment_address_post_async"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling CartsApi.set_shipment_address_post_async"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling CartsApi.set_shipment_address_post_async"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling CartsApi.set_shipment_address_post_async"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling CartsApi.set_shipment_address_post_async"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CartsApi.set_shipment_address_post_async"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling CartsApi.set_shipment_address_post_async"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling CartsApi.set_shipment_address_post_async"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling CartsApi.set_shipment_address_post_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.set_shipment_address_post_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/setshipmentaddress'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CartUid'] = cart_uid
      form_params['CartExternalId'] = cart_external_id
      form_params['CartSourceExternalId'] = cart_source_external_id
      form_params['ShipmentUid'] = shipment_uid
      form_params['Address'] = address
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#set_shipment_address_post_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommitment]
    def submit_cart_post_async(body, access_key, opts = {})
      data, _status_code, _headers = submit_cart_post_async_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommitment, Integer, Hash)>] ServerResponseCommitment data, response status code and response headers
    def submit_cart_post_async_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.submit_cart_post_async ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CartsApi.submit_cart_post_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.submit_cart_post_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/submit'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['Cart'] = cart
      form_params['GenerateTransaction'] = generate_transaction
      form_params['GenerateAlerts'] = generate_alerts
      form_params['GenerateOrders'] = generate_orders
      form_params['OrderProcessor'] = order_processor
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommitment' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#submit_cart_post_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param cart 
    # @param generate_transaction 
    # @param generate_alerts 
    # @param generate_orders 
    # @param order_processor 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommitment]
    def submit_cart_post_async(cart, generate_transaction, generate_alerts, generate_orders, order_processor, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = submit_cart_post_async_with_http_info(cart, generate_transaction, generate_alerts, generate_orders, order_processor, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param cart 
    # @param generate_transaction 
    # @param generate_alerts 
    # @param generate_orders 
    # @param order_processor 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommitment, Integer, Hash)>] ServerResponseCommitment data, response status code and response headers
    def submit_cart_post_async_with_http_info(cart, generate_transaction, generate_alerts, generate_orders, order_processor, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.submit_cart_post_async ...'
      end
      # verify the required parameter 'cart' is set
      if @api_client.config.client_side_validation && cart.nil?
        fail ArgumentError, "Missing the required parameter 'cart' when calling CartsApi.submit_cart_post_async"
      end
      # verify the required parameter 'generate_transaction' is set
      if @api_client.config.client_side_validation && generate_transaction.nil?
        fail ArgumentError, "Missing the required parameter 'generate_transaction' when calling CartsApi.submit_cart_post_async"
      end
      # verify the required parameter 'generate_alerts' is set
      if @api_client.config.client_side_validation && generate_alerts.nil?
        fail ArgumentError, "Missing the required parameter 'generate_alerts' when calling CartsApi.submit_cart_post_async"
      end
      # verify the required parameter 'generate_orders' is set
      if @api_client.config.client_side_validation && generate_orders.nil?
        fail ArgumentError, "Missing the required parameter 'generate_orders' when calling CartsApi.submit_cart_post_async"
      end
      # verify the required parameter 'order_processor' is set
      if @api_client.config.client_side_validation && order_processor.nil?
        fail ArgumentError, "Missing the required parameter 'order_processor' when calling CartsApi.submit_cart_post_async"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling CartsApi.submit_cart_post_async"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling CartsApi.submit_cart_post_async"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling CartsApi.submit_cart_post_async"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling CartsApi.submit_cart_post_async"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling CartsApi.submit_cart_post_async"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling CartsApi.submit_cart_post_async"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CartsApi.submit_cart_post_async"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling CartsApi.submit_cart_post_async"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling CartsApi.submit_cart_post_async"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling CartsApi.submit_cart_post_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.submit_cart_post_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/submit'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['Cart'] = cart
      form_params['GenerateTransaction'] = generate_transaction
      form_params['GenerateAlerts'] = generate_alerts
      form_params['GenerateOrders'] = generate_orders
      form_params['OrderProcessor'] = order_processor
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommitment' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#submit_cart_post_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def void_commit_cart_void_commit_cart_async(body, access_key, opts = {})
      data, _status_code, _headers = void_commit_cart_void_commit_cart_async_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def void_commit_cart_void_commit_cart_async_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.void_commit_cart_void_commit_cart_async ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CartsApi.void_commit_cart_void_commit_cart_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.void_commit_cart_void_commit_cart_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/voids'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['TransactionUid'] = transaction_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#void_commit_cart_void_commit_cart_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param uid 
    # @param reference_number 
    # @param transaction_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def void_commit_cart_void_commit_cart_async(uid, reference_number, transaction_uid, access_key, opts = {})
      data, _status_code, _headers = void_commit_cart_void_commit_cart_async_with_http_info(uid, reference_number, transaction_uid, access_key, opts)
      data
    end

    # @param uid 
    # @param reference_number 
    # @param transaction_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def void_commit_cart_void_commit_cart_async_with_http_info(uid, reference_number, transaction_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartsApi.void_commit_cart_void_commit_cart_async ...'
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CartsApi.void_commit_cart_void_commit_cart_async"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling CartsApi.void_commit_cart_void_commit_cart_async"
      end
      # verify the required parameter 'transaction_uid' is set
      if @api_client.config.client_side_validation && transaction_uid.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_uid' when calling CartsApi.void_commit_cart_void_commit_cart_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CartsApi.void_commit_cart_void_commit_cart_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/carts/commands/voids'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['TransactionUid'] = transaction_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartsApi#void_commit_cart_void_commit_cart_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
