=begin
#bLoyal.LoyaltyService

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module BloyalLoyaltyClient
  class SnippetsCustomersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponse]
    def delete_shipping_address_session_save_address(login_domain, device_code, session_key, uid, opts = {})
      data, _status_code, _headers = delete_shipping_address_session_save_address_with_http_info(login_domain, device_code, session_key, uid, opts)
      data
    end

    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponse, Integer, Hash)>] ServerResponse data, response status code and response headers
    def delete_shipping_address_session_save_address_with_http_info(login_domain, device_code, session_key, uid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnippetsCustomersApi.delete_shipping_address_session_save_address ...'
      end
      # verify the required parameter 'login_domain' is set
      if @api_client.config.client_side_validation && login_domain.nil?
        fail ArgumentError, "Missing the required parameter 'login_domain' when calling SnippetsCustomersApi.delete_shipping_address_session_save_address"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling SnippetsCustomersApi.delete_shipping_address_session_save_address"
      end
      # verify the required parameter 'session_key' is set
      if @api_client.config.client_side_validation && session_key.nil?
        fail ArgumentError, "Missing the required parameter 'session_key' when calling SnippetsCustomersApi.delete_shipping_address_session_save_address"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling SnippetsCustomersApi.delete_shipping_address_session_save_address"
      end
      # resource path
      local_var_path = '/api/v4/{loginDomain}/{deviceCode}/snippets/customer/{sessionKey}/shippingaddresses/{uid}'.sub('{' + 'loginDomain' + '}', login_domain.to_s).sub('{' + 'deviceCode' + '}', device_code.to_s).sub('{' + 'sessionKey' + '}', session_key.to_s).sub('{' + 'uid' + '}', uid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnippetsCustomersApi#delete_shipping_address_session_save_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCustomer]
    def get_session_customer(login_domain, device_code, session_key, opts = {})
      data, _status_code, _headers = get_session_customer_with_http_info(login_domain, device_code, session_key, opts)
      data
    end

    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCustomer, Integer, Hash)>] ServerResponseCustomer data, response status code and response headers
    def get_session_customer_with_http_info(login_domain, device_code, session_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnippetsCustomersApi.get_session_customer ...'
      end
      # verify the required parameter 'login_domain' is set
      if @api_client.config.client_side_validation && login_domain.nil?
        fail ArgumentError, "Missing the required parameter 'login_domain' when calling SnippetsCustomersApi.get_session_customer"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling SnippetsCustomersApi.get_session_customer"
      end
      # verify the required parameter 'session_key' is set
      if @api_client.config.client_side_validation && session_key.nil?
        fail ArgumentError, "Missing the required parameter 'session_key' when calling SnippetsCustomersApi.get_session_customer"
      end
      # resource path
      local_var_path = '/api/v4/{loginDomain}/{deviceCode}/snippets/customer/{sessionKey}'.sub('{' + 'loginDomain' + '}', login_domain.to_s).sub('{' + 'deviceCode' + '}', device_code.to_s).sub('{' + 'sessionKey' + '}', session_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseCustomer' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnippetsCustomersApi#get_session_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param membership_uid 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseClubMembership]
    def query_club_membership_session_get_by_query(login_domain, device_code, session_key, membership_uid, opts = {})
      data, _status_code, _headers = query_club_membership_session_get_by_query_with_http_info(login_domain, device_code, session_key, membership_uid, opts)
      data
    end

    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param membership_uid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseClubMembership, Integer, Hash)>] ServerResponseClubMembership data, response status code and response headers
    def query_club_membership_session_get_by_query_with_http_info(login_domain, device_code, session_key, membership_uid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnippetsCustomersApi.query_club_membership_session_get_by_query ...'
      end
      # verify the required parameter 'login_domain' is set
      if @api_client.config.client_side_validation && login_domain.nil?
        fail ArgumentError, "Missing the required parameter 'login_domain' when calling SnippetsCustomersApi.query_club_membership_session_get_by_query"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling SnippetsCustomersApi.query_club_membership_session_get_by_query"
      end
      # verify the required parameter 'session_key' is set
      if @api_client.config.client_side_validation && session_key.nil?
        fail ArgumentError, "Missing the required parameter 'session_key' when calling SnippetsCustomersApi.query_club_membership_session_get_by_query"
      end
      # verify the required parameter 'membership_uid' is set
      if @api_client.config.client_side_validation && membership_uid.nil?
        fail ArgumentError, "Missing the required parameter 'membership_uid' when calling SnippetsCustomersApi.query_club_membership_session_get_by_query"
      end
      # resource path
      local_var_path = '/api/v4/{loginDomain}/{deviceCode}/snippets/customer/{sessionKey}/clubmemberships/{membershipUid}'.sub('{' + 'loginDomain' + '}', login_domain.to_s).sub('{' + 'deviceCode' + '}', device_code.to_s).sub('{' + 'sessionKey' + '}', session_key.to_s).sub('{' + 'membershipUid' + '}', membership_uid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseClubMembership' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnippetsCustomersApi#query_club_membership_session_get_by_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseIEnumerableClubMembership]
    def query_club_memberships_session_get_by_query(login_domain, device_code, session_key, opts = {})
      data, _status_code, _headers = query_club_memberships_session_get_by_query_with_http_info(login_domain, device_code, session_key, opts)
      data
    end

    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseIEnumerableClubMembership, Integer, Hash)>] ServerResponseIEnumerableClubMembership data, response status code and response headers
    def query_club_memberships_session_get_by_query_with_http_info(login_domain, device_code, session_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnippetsCustomersApi.query_club_memberships_session_get_by_query ...'
      end
      # verify the required parameter 'login_domain' is set
      if @api_client.config.client_side_validation && login_domain.nil?
        fail ArgumentError, "Missing the required parameter 'login_domain' when calling SnippetsCustomersApi.query_club_memberships_session_get_by_query"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling SnippetsCustomersApi.query_club_memberships_session_get_by_query"
      end
      # verify the required parameter 'session_key' is set
      if @api_client.config.client_side_validation && session_key.nil?
        fail ArgumentError, "Missing the required parameter 'session_key' when calling SnippetsCustomersApi.query_club_memberships_session_get_by_query"
      end
      # resource path
      local_var_path = '/api/v4/{loginDomain}/{deviceCode}/snippets/customer/{sessionKey}/clubmemberships'.sub('{' + 'loginDomain' + '}', login_domain.to_s).sub('{' + 'deviceCode' + '}', device_code.to_s).sub('{' + 'sessionKey' + '}', session_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIEnumerableClubMembership' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnippetsCustomersApi#query_club_memberships_session_get_by_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseIEnumerableCustomerReferral]
    def query_customer_referrals_session_query_customer_referrals_async(login_domain, device_code, session_key, opts = {})
      data, _status_code, _headers = query_customer_referrals_session_query_customer_referrals_async_with_http_info(login_domain, device_code, session_key, opts)
      data
    end

    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseIEnumerableCustomerReferral, Integer, Hash)>] ServerResponseIEnumerableCustomerReferral data, response status code and response headers
    def query_customer_referrals_session_query_customer_referrals_async_with_http_info(login_domain, device_code, session_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnippetsCustomersApi.query_customer_referrals_session_query_customer_referrals_async ...'
      end
      # verify the required parameter 'login_domain' is set
      if @api_client.config.client_side_validation && login_domain.nil?
        fail ArgumentError, "Missing the required parameter 'login_domain' when calling SnippetsCustomersApi.query_customer_referrals_session_query_customer_referrals_async"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling SnippetsCustomersApi.query_customer_referrals_session_query_customer_referrals_async"
      end
      # verify the required parameter 'session_key' is set
      if @api_client.config.client_side_validation && session_key.nil?
        fail ArgumentError, "Missing the required parameter 'session_key' when calling SnippetsCustomersApi.query_customer_referrals_session_query_customer_referrals_async"
      end
      # resource path
      local_var_path = '/api/v4/{loginDomain}/{deviceCode}/snippets/customer/{sessionKey}/referrals'.sub('{' + 'loginDomain' + '}', login_domain.to_s).sub('{' + 'deviceCode' + '}', device_code.to_s).sub('{' + 'sessionKey' + '}', session_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIEnumerableCustomerReferral' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnippetsCustomersApi#query_customer_referrals_session_query_customer_referrals_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param method_uid 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponsePaymentMethod]
    def query_payment_method_session_get_by_query(login_domain, device_code, session_key, method_uid, opts = {})
      data, _status_code, _headers = query_payment_method_session_get_by_query_with_http_info(login_domain, device_code, session_key, method_uid, opts)
      data
    end

    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param method_uid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponsePaymentMethod, Integer, Hash)>] ServerResponsePaymentMethod data, response status code and response headers
    def query_payment_method_session_get_by_query_with_http_info(login_domain, device_code, session_key, method_uid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnippetsCustomersApi.query_payment_method_session_get_by_query ...'
      end
      # verify the required parameter 'login_domain' is set
      if @api_client.config.client_side_validation && login_domain.nil?
        fail ArgumentError, "Missing the required parameter 'login_domain' when calling SnippetsCustomersApi.query_payment_method_session_get_by_query"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling SnippetsCustomersApi.query_payment_method_session_get_by_query"
      end
      # verify the required parameter 'session_key' is set
      if @api_client.config.client_side_validation && session_key.nil?
        fail ArgumentError, "Missing the required parameter 'session_key' when calling SnippetsCustomersApi.query_payment_method_session_get_by_query"
      end
      # verify the required parameter 'method_uid' is set
      if @api_client.config.client_side_validation && method_uid.nil?
        fail ArgumentError, "Missing the required parameter 'method_uid' when calling SnippetsCustomersApi.query_payment_method_session_get_by_query"
      end
      # resource path
      local_var_path = '/api/v4/{loginDomain}/{deviceCode}/snippets/customer/{sessionKey}/paymentmethods/{methodUid}'.sub('{' + 'loginDomain' + '}', login_domain.to_s).sub('{' + 'deviceCode' + '}', device_code.to_s).sub('{' + 'sessionKey' + '}', session_key.to_s).sub('{' + 'methodUid' + '}', method_uid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponsePaymentMethod' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnippetsCustomersApi#query_payment_method_session_get_by_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseIEnumerableShippingAddress]
    def query_payment_methods_session_get_by_query(login_domain, device_code, session_key, opts = {})
      data, _status_code, _headers = query_payment_methods_session_get_by_query_with_http_info(login_domain, device_code, session_key, opts)
      data
    end

    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseIEnumerableShippingAddress, Integer, Hash)>] ServerResponseIEnumerableShippingAddress data, response status code and response headers
    def query_payment_methods_session_get_by_query_with_http_info(login_domain, device_code, session_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnippetsCustomersApi.query_payment_methods_session_get_by_query ...'
      end
      # verify the required parameter 'login_domain' is set
      if @api_client.config.client_side_validation && login_domain.nil?
        fail ArgumentError, "Missing the required parameter 'login_domain' when calling SnippetsCustomersApi.query_payment_methods_session_get_by_query"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling SnippetsCustomersApi.query_payment_methods_session_get_by_query"
      end
      # verify the required parameter 'session_key' is set
      if @api_client.config.client_side_validation && session_key.nil?
        fail ArgumentError, "Missing the required parameter 'session_key' when calling SnippetsCustomersApi.query_payment_methods_session_get_by_query"
      end
      # resource path
      local_var_path = '/api/v4/{loginDomain}/{deviceCode}/snippets/customer/{sessionKey}/paymentmethods'.sub('{' + 'loginDomain' + '}', login_domain.to_s).sub('{' + 'deviceCode' + '}', device_code.to_s).sub('{' + 'sessionKey' + '}', session_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIEnumerableShippingAddress' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnippetsCustomersApi#query_payment_methods_session_get_by_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param address_uid 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseShippingAddress]
    def query_shipping_address_session_get_by_query(login_domain, device_code, session_key, address_uid, opts = {})
      data, _status_code, _headers = query_shipping_address_session_get_by_query_with_http_info(login_domain, device_code, session_key, address_uid, opts)
      data
    end

    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param address_uid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseShippingAddress, Integer, Hash)>] ServerResponseShippingAddress data, response status code and response headers
    def query_shipping_address_session_get_by_query_with_http_info(login_domain, device_code, session_key, address_uid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnippetsCustomersApi.query_shipping_address_session_get_by_query ...'
      end
      # verify the required parameter 'login_domain' is set
      if @api_client.config.client_side_validation && login_domain.nil?
        fail ArgumentError, "Missing the required parameter 'login_domain' when calling SnippetsCustomersApi.query_shipping_address_session_get_by_query"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling SnippetsCustomersApi.query_shipping_address_session_get_by_query"
      end
      # verify the required parameter 'session_key' is set
      if @api_client.config.client_side_validation && session_key.nil?
        fail ArgumentError, "Missing the required parameter 'session_key' when calling SnippetsCustomersApi.query_shipping_address_session_get_by_query"
      end
      # verify the required parameter 'address_uid' is set
      if @api_client.config.client_side_validation && address_uid.nil?
        fail ArgumentError, "Missing the required parameter 'address_uid' when calling SnippetsCustomersApi.query_shipping_address_session_get_by_query"
      end
      # resource path
      local_var_path = '/api/v4/{loginDomain}/{deviceCode}/snippets/customer/{sessionKey}/shippingaddresses/{addressUid}'.sub('{' + 'loginDomain' + '}', login_domain.to_s).sub('{' + 'deviceCode' + '}', device_code.to_s).sub('{' + 'sessionKey' + '}', session_key.to_s).sub('{' + 'addressUid' + '}', address_uid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseShippingAddress' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnippetsCustomersApi#query_shipping_address_session_get_by_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseIEnumerableShippingAddress]
    def query_shipping_addresses_session_get_by_query(login_domain, device_code, session_key, opts = {})
      data, _status_code, _headers = query_shipping_addresses_session_get_by_query_with_http_info(login_domain, device_code, session_key, opts)
      data
    end

    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseIEnumerableShippingAddress, Integer, Hash)>] ServerResponseIEnumerableShippingAddress data, response status code and response headers
    def query_shipping_addresses_session_get_by_query_with_http_info(login_domain, device_code, session_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnippetsCustomersApi.query_shipping_addresses_session_get_by_query ...'
      end
      # verify the required parameter 'login_domain' is set
      if @api_client.config.client_side_validation && login_domain.nil?
        fail ArgumentError, "Missing the required parameter 'login_domain' when calling SnippetsCustomersApi.query_shipping_addresses_session_get_by_query"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling SnippetsCustomersApi.query_shipping_addresses_session_get_by_query"
      end
      # verify the required parameter 'session_key' is set
      if @api_client.config.client_side_validation && session_key.nil?
        fail ArgumentError, "Missing the required parameter 'session_key' when calling SnippetsCustomersApi.query_shipping_addresses_session_get_by_query"
      end
      # resource path
      local_var_path = '/api/v4/{loginDomain}/{deviceCode}/snippets/customer/{sessionKey}/shippingaddresses'.sub('{' + 'loginDomain' + '}', login_domain.to_s).sub('{' + 'deviceCode' + '}', device_code.to_s).sub('{' + 'sessionKey' + '}', session_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIEnumerableShippingAddress' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnippetsCustomersApi#query_shipping_addresses_session_get_by_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseRedeemCouponCommand]
    def redeem_coupon_session_redeem_coupon_for_session(body, login_domain, device_code, session_key, opts = {})
      data, _status_code, _headers = redeem_coupon_session_redeem_coupon_for_session_with_http_info(body, login_domain, device_code, session_key, opts)
      data
    end

    # @param body 
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseRedeemCouponCommand, Integer, Hash)>] ServerResponseRedeemCouponCommand data, response status code and response headers
    def redeem_coupon_session_redeem_coupon_for_session_with_http_info(body, login_domain, device_code, session_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnippetsCustomersApi.redeem_coupon_session_redeem_coupon_for_session ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SnippetsCustomersApi.redeem_coupon_session_redeem_coupon_for_session"
      end
      # verify the required parameter 'login_domain' is set
      if @api_client.config.client_side_validation && login_domain.nil?
        fail ArgumentError, "Missing the required parameter 'login_domain' when calling SnippetsCustomersApi.redeem_coupon_session_redeem_coupon_for_session"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling SnippetsCustomersApi.redeem_coupon_session_redeem_coupon_for_session"
      end
      # verify the required parameter 'session_key' is set
      if @api_client.config.client_side_validation && session_key.nil?
        fail ArgumentError, "Missing the required parameter 'session_key' when calling SnippetsCustomersApi.redeem_coupon_session_redeem_coupon_for_session"
      end
      # resource path
      local_var_path = '/api/v4/{loginDomain}/{deviceCode}/snippets/customer/{sessionKey}/coupons/commands/redeem'.sub('{' + 'loginDomain' + '}', login_domain.to_s).sub('{' + 'deviceCode' + '}', device_code.to_s).sub('{' + 'sessionKey' + '}', session_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['Uid'] = uid
      form_params['CouponUid'] = coupon_uid
      form_params['CouponCode'] = coupon_code
      form_params['Quantity'] = quantity

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseRedeemCouponCommand' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnippetsCustomersApi#redeem_coupon_session_redeem_coupon_for_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param uid 
    # @param coupon_uid 
    # @param coupon_code 
    # @param quantity 
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseRedeemCouponCommand]
    def redeem_coupon_session_redeem_coupon_for_session(uid, coupon_uid, coupon_code, quantity, login_domain, device_code, session_key, opts = {})
      data, _status_code, _headers = redeem_coupon_session_redeem_coupon_for_session_with_http_info(uid, coupon_uid, coupon_code, quantity, login_domain, device_code, session_key, opts)
      data
    end

    # @param uid 
    # @param coupon_uid 
    # @param coupon_code 
    # @param quantity 
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseRedeemCouponCommand, Integer, Hash)>] ServerResponseRedeemCouponCommand data, response status code and response headers
    def redeem_coupon_session_redeem_coupon_for_session_with_http_info(uid, coupon_uid, coupon_code, quantity, login_domain, device_code, session_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnippetsCustomersApi.redeem_coupon_session_redeem_coupon_for_session ...'
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling SnippetsCustomersApi.redeem_coupon_session_redeem_coupon_for_session"
      end
      # verify the required parameter 'coupon_uid' is set
      if @api_client.config.client_side_validation && coupon_uid.nil?
        fail ArgumentError, "Missing the required parameter 'coupon_uid' when calling SnippetsCustomersApi.redeem_coupon_session_redeem_coupon_for_session"
      end
      # verify the required parameter 'coupon_code' is set
      if @api_client.config.client_side_validation && coupon_code.nil?
        fail ArgumentError, "Missing the required parameter 'coupon_code' when calling SnippetsCustomersApi.redeem_coupon_session_redeem_coupon_for_session"
      end
      # verify the required parameter 'quantity' is set
      if @api_client.config.client_side_validation && quantity.nil?
        fail ArgumentError, "Missing the required parameter 'quantity' when calling SnippetsCustomersApi.redeem_coupon_session_redeem_coupon_for_session"
      end
      # verify the required parameter 'login_domain' is set
      if @api_client.config.client_side_validation && login_domain.nil?
        fail ArgumentError, "Missing the required parameter 'login_domain' when calling SnippetsCustomersApi.redeem_coupon_session_redeem_coupon_for_session"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling SnippetsCustomersApi.redeem_coupon_session_redeem_coupon_for_session"
      end
      # verify the required parameter 'session_key' is set
      if @api_client.config.client_side_validation && session_key.nil?
        fail ArgumentError, "Missing the required parameter 'session_key' when calling SnippetsCustomersApi.redeem_coupon_session_redeem_coupon_for_session"
      end
      # resource path
      local_var_path = '/api/v4/{loginDomain}/{deviceCode}/snippets/customer/{sessionKey}/coupons/commands/redeem'.sub('{' + 'loginDomain' + '}', login_domain.to_s).sub('{' + 'deviceCode' + '}', device_code.to_s).sub('{' + 'sessionKey' + '}', session_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['Uid'] = uid
      form_params['CouponUid'] = coupon_uid
      form_params['CouponCode'] = coupon_code
      form_params['Quantity'] = quantity

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseRedeemCouponCommand' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnippetsCustomersApi#redeem_coupon_session_redeem_coupon_for_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponse]
    def refer_customer_session_refer_customer(body, login_domain, device_code, session_key, opts = {})
      data, _status_code, _headers = refer_customer_session_refer_customer_with_http_info(body, login_domain, device_code, session_key, opts)
      data
    end

    # @param body 
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponse, Integer, Hash)>] ServerResponse data, response status code and response headers
    def refer_customer_session_refer_customer_with_http_info(body, login_domain, device_code, session_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnippetsCustomersApi.refer_customer_session_refer_customer ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SnippetsCustomersApi.refer_customer_session_refer_customer"
      end
      # verify the required parameter 'login_domain' is set
      if @api_client.config.client_side_validation && login_domain.nil?
        fail ArgumentError, "Missing the required parameter 'login_domain' when calling SnippetsCustomersApi.refer_customer_session_refer_customer"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling SnippetsCustomersApi.refer_customer_session_refer_customer"
      end
      # verify the required parameter 'session_key' is set
      if @api_client.config.client_side_validation && session_key.nil?
        fail ArgumentError, "Missing the required parameter 'session_key' when calling SnippetsCustomersApi.refer_customer_session_refer_customer"
      end
      # resource path
      local_var_path = '/api/v4/{loginDomain}/{deviceCode}/snippets/customer/{sessionKey}/referrals/commands/refer'.sub('{' + 'loginDomain' + '}', login_domain.to_s).sub('{' + 'deviceCode' + '}', device_code.to_s).sub('{' + 'sessionKey' + '}', session_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['FirstName'] = first_name
      form_params['LastName'] = last_name
      form_params['EmailAddress'] = email_address
      form_params['Message'] = message
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnippetsCustomersApi#refer_customer_session_refer_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param first_name 
    # @param last_name 
    # @param email_address 
    # @param message 
    # @param device_uid 
    # @param store_code 
    # @param device_code2 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponse]
    def refer_customer_session_refer_customer(first_name, last_name, email_address, message, device_uid, store_code, device_code2, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, login_domain, device_code, session_key, opts = {})
      data, _status_code, _headers = refer_customer_session_refer_customer_with_http_info(first_name, last_name, email_address, message, device_uid, store_code, device_code2, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, login_domain, device_code, session_key, opts)
      data
    end

    # @param first_name 
    # @param last_name 
    # @param email_address 
    # @param message 
    # @param device_uid 
    # @param store_code 
    # @param device_code2 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponse, Integer, Hash)>] ServerResponse data, response status code and response headers
    def refer_customer_session_refer_customer_with_http_info(first_name, last_name, email_address, message, device_uid, store_code, device_code2, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, login_domain, device_code, session_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnippetsCustomersApi.refer_customer_session_refer_customer ...'
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling SnippetsCustomersApi.refer_customer_session_refer_customer"
      end
      # verify the required parameter 'last_name' is set
      if @api_client.config.client_side_validation && last_name.nil?
        fail ArgumentError, "Missing the required parameter 'last_name' when calling SnippetsCustomersApi.refer_customer_session_refer_customer"
      end
      # verify the required parameter 'email_address' is set
      if @api_client.config.client_side_validation && email_address.nil?
        fail ArgumentError, "Missing the required parameter 'email_address' when calling SnippetsCustomersApi.refer_customer_session_refer_customer"
      end
      # verify the required parameter 'message' is set
      if @api_client.config.client_side_validation && message.nil?
        fail ArgumentError, "Missing the required parameter 'message' when calling SnippetsCustomersApi.refer_customer_session_refer_customer"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling SnippetsCustomersApi.refer_customer_session_refer_customer"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling SnippetsCustomersApi.refer_customer_session_refer_customer"
      end
      # verify the required parameter 'device_code2' is set
      if @api_client.config.client_side_validation && device_code2.nil?
        fail ArgumentError, "Missing the required parameter 'device_code2' when calling SnippetsCustomersApi.refer_customer_session_refer_customer"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling SnippetsCustomersApi.refer_customer_session_refer_customer"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling SnippetsCustomersApi.refer_customer_session_refer_customer"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling SnippetsCustomersApi.refer_customer_session_refer_customer"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling SnippetsCustomersApi.refer_customer_session_refer_customer"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling SnippetsCustomersApi.refer_customer_session_refer_customer"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling SnippetsCustomersApi.refer_customer_session_refer_customer"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling SnippetsCustomersApi.refer_customer_session_refer_customer"
      end
      # verify the required parameter 'login_domain' is set
      if @api_client.config.client_side_validation && login_domain.nil?
        fail ArgumentError, "Missing the required parameter 'login_domain' when calling SnippetsCustomersApi.refer_customer_session_refer_customer"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling SnippetsCustomersApi.refer_customer_session_refer_customer"
      end
      # verify the required parameter 'session_key' is set
      if @api_client.config.client_side_validation && session_key.nil?
        fail ArgumentError, "Missing the required parameter 'session_key' when calling SnippetsCustomersApi.refer_customer_session_refer_customer"
      end
      # resource path
      local_var_path = '/api/v4/{loginDomain}/{deviceCode}/snippets/customer/{sessionKey}/referrals/commands/refer'.sub('{' + 'loginDomain' + '}', login_domain.to_s).sub('{' + 'deviceCode' + '}', device_code.to_s).sub('{' + 'sessionKey' + '}', session_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['FirstName'] = first_name
      form_params['LastName'] = last_name
      form_params['EmailAddress'] = email_address
      form_params['Message'] = message
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnippetsCustomersApi#refer_customer_session_refer_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param login_domain 
    # @param device_code 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponse]
    def reset_customer_password_reset_customer_password(body, login_domain, device_code, opts = {})
      data, _status_code, _headers = reset_customer_password_reset_customer_password_with_http_info(body, login_domain, device_code, opts)
      data
    end

    # @param body 
    # @param login_domain 
    # @param device_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponse, Integer, Hash)>] ServerResponse data, response status code and response headers
    def reset_customer_password_reset_customer_password_with_http_info(body, login_domain, device_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnippetsCustomersApi.reset_customer_password_reset_customer_password ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SnippetsCustomersApi.reset_customer_password_reset_customer_password"
      end
      # verify the required parameter 'login_domain' is set
      if @api_client.config.client_side_validation && login_domain.nil?
        fail ArgumentError, "Missing the required parameter 'login_domain' when calling SnippetsCustomersApi.reset_customer_password_reset_customer_password"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling SnippetsCustomersApi.reset_customer_password_reset_customer_password"
      end
      # resource path
      local_var_path = '/api/v4/{loginDomain}/{deviceCode}/snippets/customers/commands/resetpassword'.sub('{' + 'loginDomain' + '}', login_domain.to_s).sub('{' + 'deviceCode' + '}', device_code.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['EmailAddress'] = email_address
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnippetsCustomersApi#reset_customer_password_reset_customer_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param email_address 
    # @param device_uid 
    # @param store_code 
    # @param device_code2 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param login_domain 
    # @param device_code 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponse]
    def reset_customer_password_reset_customer_password(email_address, device_uid, store_code, device_code2, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, login_domain, device_code, opts = {})
      data, _status_code, _headers = reset_customer_password_reset_customer_password_with_http_info(email_address, device_uid, store_code, device_code2, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, login_domain, device_code, opts)
      data
    end

    # @param email_address 
    # @param device_uid 
    # @param store_code 
    # @param device_code2 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param login_domain 
    # @param device_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponse, Integer, Hash)>] ServerResponse data, response status code and response headers
    def reset_customer_password_reset_customer_password_with_http_info(email_address, device_uid, store_code, device_code2, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, login_domain, device_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnippetsCustomersApi.reset_customer_password_reset_customer_password ...'
      end
      # verify the required parameter 'email_address' is set
      if @api_client.config.client_side_validation && email_address.nil?
        fail ArgumentError, "Missing the required parameter 'email_address' when calling SnippetsCustomersApi.reset_customer_password_reset_customer_password"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling SnippetsCustomersApi.reset_customer_password_reset_customer_password"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling SnippetsCustomersApi.reset_customer_password_reset_customer_password"
      end
      # verify the required parameter 'device_code2' is set
      if @api_client.config.client_side_validation && device_code2.nil?
        fail ArgumentError, "Missing the required parameter 'device_code2' when calling SnippetsCustomersApi.reset_customer_password_reset_customer_password"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling SnippetsCustomersApi.reset_customer_password_reset_customer_password"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling SnippetsCustomersApi.reset_customer_password_reset_customer_password"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling SnippetsCustomersApi.reset_customer_password_reset_customer_password"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling SnippetsCustomersApi.reset_customer_password_reset_customer_password"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling SnippetsCustomersApi.reset_customer_password_reset_customer_password"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling SnippetsCustomersApi.reset_customer_password_reset_customer_password"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling SnippetsCustomersApi.reset_customer_password_reset_customer_password"
      end
      # verify the required parameter 'login_domain' is set
      if @api_client.config.client_side_validation && login_domain.nil?
        fail ArgumentError, "Missing the required parameter 'login_domain' when calling SnippetsCustomersApi.reset_customer_password_reset_customer_password"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling SnippetsCustomersApi.reset_customer_password_reset_customer_password"
      end
      # resource path
      local_var_path = '/api/v4/{loginDomain}/{deviceCode}/snippets/customers/commands/resetpassword'.sub('{' + 'loginDomain' + '}', login_domain.to_s).sub('{' + 'deviceCode' + '}', device_code.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['EmailAddress'] = email_address
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnippetsCustomersApi#reset_customer_password_reset_customer_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseSavePaymentMethodResponse]
    def save_payment_method_session_save_address(body, login_domain, device_code, session_key, opts = {})
      data, _status_code, _headers = save_payment_method_session_save_address_with_http_info(body, login_domain, device_code, session_key, opts)
      data
    end

    # @param body 
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseSavePaymentMethodResponse, Integer, Hash)>] ServerResponseSavePaymentMethodResponse data, response status code and response headers
    def save_payment_method_session_save_address_with_http_info(body, login_domain, device_code, session_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnippetsCustomersApi.save_payment_method_session_save_address ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SnippetsCustomersApi.save_payment_method_session_save_address"
      end
      # verify the required parameter 'login_domain' is set
      if @api_client.config.client_side_validation && login_domain.nil?
        fail ArgumentError, "Missing the required parameter 'login_domain' when calling SnippetsCustomersApi.save_payment_method_session_save_address"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling SnippetsCustomersApi.save_payment_method_session_save_address"
      end
      # verify the required parameter 'session_key' is set
      if @api_client.config.client_side_validation && session_key.nil?
        fail ArgumentError, "Missing the required parameter 'session_key' when calling SnippetsCustomersApi.save_payment_method_session_save_address"
      end
      # resource path
      local_var_path = '/api/v4/{loginDomain}/{deviceCode}/snippets/customer/{sessionKey}/paymentmethod/commands/save'.sub('{' + 'loginDomain' + '}', login_domain.to_s).sub('{' + 'deviceCode' + '}', device_code.to_s).sub('{' + 'sessionKey' + '}', session_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['Uid'] = uid
      form_params['PaymentMethodUid'] = payment_method_uid
      form_params['Title'] = title
      form_params['IsPrimary'] = is_primary
      form_params['PaymentType'] = payment_type
      form_params['CreditCard'] = credit_card
      form_params['GiftCard'] = gift_card

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseSavePaymentMethodResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnippetsCustomersApi#save_payment_method_session_save_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param uid 
    # @param payment_method_uid 
    # @param title 
    # @param is_primary 
    # @param payment_type 
    # @param credit_card 
    # @param gift_card 
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseSavePaymentMethodResponse]
    def save_payment_method_session_save_address(uid, payment_method_uid, title, is_primary, payment_type, credit_card, gift_card, login_domain, device_code, session_key, opts = {})
      data, _status_code, _headers = save_payment_method_session_save_address_with_http_info(uid, payment_method_uid, title, is_primary, payment_type, credit_card, gift_card, login_domain, device_code, session_key, opts)
      data
    end

    # @param uid 
    # @param payment_method_uid 
    # @param title 
    # @param is_primary 
    # @param payment_type 
    # @param credit_card 
    # @param gift_card 
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseSavePaymentMethodResponse, Integer, Hash)>] ServerResponseSavePaymentMethodResponse data, response status code and response headers
    def save_payment_method_session_save_address_with_http_info(uid, payment_method_uid, title, is_primary, payment_type, credit_card, gift_card, login_domain, device_code, session_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnippetsCustomersApi.save_payment_method_session_save_address ...'
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling SnippetsCustomersApi.save_payment_method_session_save_address"
      end
      # verify the required parameter 'payment_method_uid' is set
      if @api_client.config.client_side_validation && payment_method_uid.nil?
        fail ArgumentError, "Missing the required parameter 'payment_method_uid' when calling SnippetsCustomersApi.save_payment_method_session_save_address"
      end
      # verify the required parameter 'title' is set
      if @api_client.config.client_side_validation && title.nil?
        fail ArgumentError, "Missing the required parameter 'title' when calling SnippetsCustomersApi.save_payment_method_session_save_address"
      end
      # verify the required parameter 'is_primary' is set
      if @api_client.config.client_side_validation && is_primary.nil?
        fail ArgumentError, "Missing the required parameter 'is_primary' when calling SnippetsCustomersApi.save_payment_method_session_save_address"
      end
      # verify the required parameter 'payment_type' is set
      if @api_client.config.client_side_validation && payment_type.nil?
        fail ArgumentError, "Missing the required parameter 'payment_type' when calling SnippetsCustomersApi.save_payment_method_session_save_address"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['Unknown', 'CreditCard', 'GiftCard', 'ElectronicFunds', 'PayPal', 'ACH', 'LoyaltyCard'].include?(payment_type)
        fail ArgumentError, "invalid value for 'payment_type', must be one of Unknown, CreditCard, GiftCard, ElectronicFunds, PayPal, ACH, LoyaltyCard"
      end
      # verify the required parameter 'credit_card' is set
      if @api_client.config.client_side_validation && credit_card.nil?
        fail ArgumentError, "Missing the required parameter 'credit_card' when calling SnippetsCustomersApi.save_payment_method_session_save_address"
      end
      # verify the required parameter 'gift_card' is set
      if @api_client.config.client_side_validation && gift_card.nil?
        fail ArgumentError, "Missing the required parameter 'gift_card' when calling SnippetsCustomersApi.save_payment_method_session_save_address"
      end
      # verify the required parameter 'login_domain' is set
      if @api_client.config.client_side_validation && login_domain.nil?
        fail ArgumentError, "Missing the required parameter 'login_domain' when calling SnippetsCustomersApi.save_payment_method_session_save_address"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling SnippetsCustomersApi.save_payment_method_session_save_address"
      end
      # verify the required parameter 'session_key' is set
      if @api_client.config.client_side_validation && session_key.nil?
        fail ArgumentError, "Missing the required parameter 'session_key' when calling SnippetsCustomersApi.save_payment_method_session_save_address"
      end
      # resource path
      local_var_path = '/api/v4/{loginDomain}/{deviceCode}/snippets/customer/{sessionKey}/paymentmethod/commands/save'.sub('{' + 'loginDomain' + '}', login_domain.to_s).sub('{' + 'deviceCode' + '}', device_code.to_s).sub('{' + 'sessionKey' + '}', session_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['Uid'] = uid
      form_params['PaymentMethodUid'] = payment_method_uid
      form_params['Title'] = title
      form_params['IsPrimary'] = is_primary
      form_params['PaymentType'] = payment_type
      form_params['CreditCard'] = credit_card
      form_params['GiftCard'] = gift_card

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseSavePaymentMethodResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnippetsCustomersApi#save_payment_method_session_save_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseSaveShippingAddressResponse]
    def save_shipping_address_session_save_address(body, login_domain, device_code, session_key, opts = {})
      data, _status_code, _headers = save_shipping_address_session_save_address_with_http_info(body, login_domain, device_code, session_key, opts)
      data
    end

    # @param body 
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseSaveShippingAddressResponse, Integer, Hash)>] ServerResponseSaveShippingAddressResponse data, response status code and response headers
    def save_shipping_address_session_save_address_with_http_info(body, login_domain, device_code, session_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnippetsCustomersApi.save_shipping_address_session_save_address ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SnippetsCustomersApi.save_shipping_address_session_save_address"
      end
      # verify the required parameter 'login_domain' is set
      if @api_client.config.client_side_validation && login_domain.nil?
        fail ArgumentError, "Missing the required parameter 'login_domain' when calling SnippetsCustomersApi.save_shipping_address_session_save_address"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling SnippetsCustomersApi.save_shipping_address_session_save_address"
      end
      # verify the required parameter 'session_key' is set
      if @api_client.config.client_side_validation && session_key.nil?
        fail ArgumentError, "Missing the required parameter 'session_key' when calling SnippetsCustomersApi.save_shipping_address_session_save_address"
      end
      # resource path
      local_var_path = '/api/v4/{loginDomain}/{deviceCode}/snippets/customer/{sessionKey}/shippingaddress/commands/save'.sub('{' + 'loginDomain' + '}', login_domain.to_s).sub('{' + 'deviceCode' + '}', device_code.to_s).sub('{' + 'sessionKey' + '}', session_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['Uid'] = uid
      form_params['ValidateAddress'] = validate_address
      form_params['ShippingAddressUid'] = shipping_address_uid
      form_params['Title'] = title
      form_params['IsPrimary'] = is_primary
      form_params['FirstName'] = first_name
      form_params['LastName'] = last_name
      form_params['Company'] = company
      form_params['Address'] = address
      form_params['EmailAddress'] = email_address
      form_params['Phone1'] = phone1
      form_params['Phone2'] = phone2
      form_params['MobilePhone'] = mobile_phone
      form_params['FaxNumber'] = fax_number
      form_params['BirthDate'] = birth_date

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseSaveShippingAddressResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnippetsCustomersApi#save_shipping_address_session_save_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param uid 
    # @param validate_address 
    # @param shipping_address_uid 
    # @param title 
    # @param is_primary 
    # @param first_name 
    # @param last_name 
    # @param company 
    # @param address 
    # @param email_address 
    # @param phone1 
    # @param phone2 
    # @param mobile_phone 
    # @param fax_number 
    # @param birth_date 
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseSaveShippingAddressResponse]
    def save_shipping_address_session_save_address(uid, validate_address, shipping_address_uid, title, is_primary, first_name, last_name, company, address, email_address, phone1, phone2, mobile_phone, fax_number, birth_date, login_domain, device_code, session_key, opts = {})
      data, _status_code, _headers = save_shipping_address_session_save_address_with_http_info(uid, validate_address, shipping_address_uid, title, is_primary, first_name, last_name, company, address, email_address, phone1, phone2, mobile_phone, fax_number, birth_date, login_domain, device_code, session_key, opts)
      data
    end

    # @param uid 
    # @param validate_address 
    # @param shipping_address_uid 
    # @param title 
    # @param is_primary 
    # @param first_name 
    # @param last_name 
    # @param company 
    # @param address 
    # @param email_address 
    # @param phone1 
    # @param phone2 
    # @param mobile_phone 
    # @param fax_number 
    # @param birth_date 
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseSaveShippingAddressResponse, Integer, Hash)>] ServerResponseSaveShippingAddressResponse data, response status code and response headers
    def save_shipping_address_session_save_address_with_http_info(uid, validate_address, shipping_address_uid, title, is_primary, first_name, last_name, company, address, email_address, phone1, phone2, mobile_phone, fax_number, birth_date, login_domain, device_code, session_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnippetsCustomersApi.save_shipping_address_session_save_address ...'
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling SnippetsCustomersApi.save_shipping_address_session_save_address"
      end
      # verify the required parameter 'validate_address' is set
      if @api_client.config.client_side_validation && validate_address.nil?
        fail ArgumentError, "Missing the required parameter 'validate_address' when calling SnippetsCustomersApi.save_shipping_address_session_save_address"
      end
      # verify the required parameter 'shipping_address_uid' is set
      if @api_client.config.client_side_validation && shipping_address_uid.nil?
        fail ArgumentError, "Missing the required parameter 'shipping_address_uid' when calling SnippetsCustomersApi.save_shipping_address_session_save_address"
      end
      # verify the required parameter 'title' is set
      if @api_client.config.client_side_validation && title.nil?
        fail ArgumentError, "Missing the required parameter 'title' when calling SnippetsCustomersApi.save_shipping_address_session_save_address"
      end
      # verify the required parameter 'is_primary' is set
      if @api_client.config.client_side_validation && is_primary.nil?
        fail ArgumentError, "Missing the required parameter 'is_primary' when calling SnippetsCustomersApi.save_shipping_address_session_save_address"
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling SnippetsCustomersApi.save_shipping_address_session_save_address"
      end
      # verify the required parameter 'last_name' is set
      if @api_client.config.client_side_validation && last_name.nil?
        fail ArgumentError, "Missing the required parameter 'last_name' when calling SnippetsCustomersApi.save_shipping_address_session_save_address"
      end
      # verify the required parameter 'company' is set
      if @api_client.config.client_side_validation && company.nil?
        fail ArgumentError, "Missing the required parameter 'company' when calling SnippetsCustomersApi.save_shipping_address_session_save_address"
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling SnippetsCustomersApi.save_shipping_address_session_save_address"
      end
      # verify the required parameter 'email_address' is set
      if @api_client.config.client_side_validation && email_address.nil?
        fail ArgumentError, "Missing the required parameter 'email_address' when calling SnippetsCustomersApi.save_shipping_address_session_save_address"
      end
      # verify the required parameter 'phone1' is set
      if @api_client.config.client_side_validation && phone1.nil?
        fail ArgumentError, "Missing the required parameter 'phone1' when calling SnippetsCustomersApi.save_shipping_address_session_save_address"
      end
      # verify the required parameter 'phone2' is set
      if @api_client.config.client_side_validation && phone2.nil?
        fail ArgumentError, "Missing the required parameter 'phone2' when calling SnippetsCustomersApi.save_shipping_address_session_save_address"
      end
      # verify the required parameter 'mobile_phone' is set
      if @api_client.config.client_side_validation && mobile_phone.nil?
        fail ArgumentError, "Missing the required parameter 'mobile_phone' when calling SnippetsCustomersApi.save_shipping_address_session_save_address"
      end
      # verify the required parameter 'fax_number' is set
      if @api_client.config.client_side_validation && fax_number.nil?
        fail ArgumentError, "Missing the required parameter 'fax_number' when calling SnippetsCustomersApi.save_shipping_address_session_save_address"
      end
      # verify the required parameter 'birth_date' is set
      if @api_client.config.client_side_validation && birth_date.nil?
        fail ArgumentError, "Missing the required parameter 'birth_date' when calling SnippetsCustomersApi.save_shipping_address_session_save_address"
      end
      # verify the required parameter 'login_domain' is set
      if @api_client.config.client_side_validation && login_domain.nil?
        fail ArgumentError, "Missing the required parameter 'login_domain' when calling SnippetsCustomersApi.save_shipping_address_session_save_address"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling SnippetsCustomersApi.save_shipping_address_session_save_address"
      end
      # verify the required parameter 'session_key' is set
      if @api_client.config.client_side_validation && session_key.nil?
        fail ArgumentError, "Missing the required parameter 'session_key' when calling SnippetsCustomersApi.save_shipping_address_session_save_address"
      end
      # resource path
      local_var_path = '/api/v4/{loginDomain}/{deviceCode}/snippets/customer/{sessionKey}/shippingaddress/commands/save'.sub('{' + 'loginDomain' + '}', login_domain.to_s).sub('{' + 'deviceCode' + '}', device_code.to_s).sub('{' + 'sessionKey' + '}', session_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['Uid'] = uid
      form_params['ValidateAddress'] = validate_address
      form_params['ShippingAddressUid'] = shipping_address_uid
      form_params['Title'] = title
      form_params['IsPrimary'] = is_primary
      form_params['FirstName'] = first_name
      form_params['LastName'] = last_name
      form_params['Company'] = company
      form_params['Address'] = address
      form_params['EmailAddress'] = email_address
      form_params['Phone1'] = phone1
      form_params['Phone2'] = phone2
      form_params['MobilePhone'] = mobile_phone
      form_params['FaxNumber'] = fax_number
      form_params['BirthDate'] = birth_date

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseSaveShippingAddressResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnippetsCustomersApi#save_shipping_address_session_save_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCustomer]
    def session_save_customer(body, login_domain, device_code, session_key, opts = {})
      data, _status_code, _headers = session_save_customer_with_http_info(body, login_domain, device_code, session_key, opts)
      data
    end

    # @param body 
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCustomer, Integer, Hash)>] ServerResponseCustomer data, response status code and response headers
    def session_save_customer_with_http_info(body, login_domain, device_code, session_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnippetsCustomersApi.session_save_customer ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'login_domain' is set
      if @api_client.config.client_side_validation && login_domain.nil?
        fail ArgumentError, "Missing the required parameter 'login_domain' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'session_key' is set
      if @api_client.config.client_side_validation && session_key.nil?
        fail ArgumentError, "Missing the required parameter 'session_key' when calling SnippetsCustomersApi.session_save_customer"
      end
      # resource path
      local_var_path = '/api/v4/{loginDomain}/{deviceCode}/snippets/customer/{sessionKey}/commands/saves'.sub('{' + 'loginDomain' + '}', login_domain.to_s).sub('{' + 'deviceCode' + '}', device_code.to_s).sub('{' + 'sessionKey' + '}', session_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['ExternalId'] = external_id
      form_params['Code'] = code
      form_params['FirstName'] = first_name
      form_params['LastName'] = last_name
      form_params['FirstName2'] = first_name2
      form_params['LastName2'] = last_name2
      form_params['Address'] = address
      form_params['CompanyName'] = company_name
      form_params['Phone1'] = phone1
      form_params['MobilePhone'] = mobile_phone
      form_params['EmailAddress'] = email_address
      form_params['FacebookId'] = facebook_id
      form_params['TwitterId'] = twitter_id
      form_params['MobileDeviceId'] = mobile_device_id
      form_params['LoyaltyCardNumber'] = loyalty_card_number
      form_params['TaxExempt'] = tax_exempt
      form_params['BirthDate'] = birth_date
      form_params['Type'] = type
      form_params['PriceLevel'] = price_level
      form_params['SignupChannelUid'] = signup_channel_uid
      form_params['SignupStoreUid'] = signup_store_uid
      form_params['SignupStoreCode'] = signup_store_code
      form_params['SignupStoreExternalId'] = signup_store_external_id
      form_params['NoEmail'] = no_email
      form_params['Salutation'] = salutation
      form_params['ValidateAddress'] = validate_address
      form_params['CustomFields'] = custom_fields
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCustomer' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnippetsCustomersApi#session_save_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param external_id 
    # @param code 
    # @param first_name 
    # @param last_name 
    # @param first_name2 
    # @param last_name2 
    # @param address 
    # @param company_name 
    # @param phone1 
    # @param mobile_phone 
    # @param email_address 
    # @param facebook_id 
    # @param twitter_id 
    # @param mobile_device_id 
    # @param loyalty_card_number 
    # @param tax_exempt 
    # @param birth_date 
    # @param type 
    # @param price_level 
    # @param signup_channel_uid 
    # @param signup_store_uid 
    # @param signup_store_code 
    # @param signup_store_external_id 
    # @param no_email 
    # @param salutation 
    # @param validate_address 
    # @param custom_fields 
    # @param device_uid 
    # @param store_code 
    # @param device_code2 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCustomer]
    def session_save_customer(external_id, code, first_name, last_name, first_name2, last_name2, address, company_name, phone1, mobile_phone, email_address, facebook_id, twitter_id, mobile_device_id, loyalty_card_number, tax_exempt, birth_date, type, price_level, signup_channel_uid, signup_store_uid, signup_store_code, signup_store_external_id, no_email, salutation, validate_address, custom_fields, device_uid, store_code, device_code2, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, login_domain, device_code, session_key, opts = {})
      data, _status_code, _headers = session_save_customer_with_http_info(external_id, code, first_name, last_name, first_name2, last_name2, address, company_name, phone1, mobile_phone, email_address, facebook_id, twitter_id, mobile_device_id, loyalty_card_number, tax_exempt, birth_date, type, price_level, signup_channel_uid, signup_store_uid, signup_store_code, signup_store_external_id, no_email, salutation, validate_address, custom_fields, device_uid, store_code, device_code2, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, login_domain, device_code, session_key, opts)
      data
    end

    # @param external_id 
    # @param code 
    # @param first_name 
    # @param last_name 
    # @param first_name2 
    # @param last_name2 
    # @param address 
    # @param company_name 
    # @param phone1 
    # @param mobile_phone 
    # @param email_address 
    # @param facebook_id 
    # @param twitter_id 
    # @param mobile_device_id 
    # @param loyalty_card_number 
    # @param tax_exempt 
    # @param birth_date 
    # @param type 
    # @param price_level 
    # @param signup_channel_uid 
    # @param signup_store_uid 
    # @param signup_store_code 
    # @param signup_store_external_id 
    # @param no_email 
    # @param salutation 
    # @param validate_address 
    # @param custom_fields 
    # @param device_uid 
    # @param store_code 
    # @param device_code2 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCustomer, Integer, Hash)>] ServerResponseCustomer data, response status code and response headers
    def session_save_customer_with_http_info(external_id, code, first_name, last_name, first_name2, last_name2, address, company_name, phone1, mobile_phone, email_address, facebook_id, twitter_id, mobile_device_id, loyalty_card_number, tax_exempt, birth_date, type, price_level, signup_channel_uid, signup_store_uid, signup_store_code, signup_store_external_id, no_email, salutation, validate_address, custom_fields, device_uid, store_code, device_code2, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, login_domain, device_code, session_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnippetsCustomersApi.session_save_customer ...'
      end
      # verify the required parameter 'external_id' is set
      if @api_client.config.client_side_validation && external_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_id' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'last_name' is set
      if @api_client.config.client_side_validation && last_name.nil?
        fail ArgumentError, "Missing the required parameter 'last_name' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'first_name2' is set
      if @api_client.config.client_side_validation && first_name2.nil?
        fail ArgumentError, "Missing the required parameter 'first_name2' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'last_name2' is set
      if @api_client.config.client_side_validation && last_name2.nil?
        fail ArgumentError, "Missing the required parameter 'last_name2' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'company_name' is set
      if @api_client.config.client_side_validation && company_name.nil?
        fail ArgumentError, "Missing the required parameter 'company_name' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'phone1' is set
      if @api_client.config.client_side_validation && phone1.nil?
        fail ArgumentError, "Missing the required parameter 'phone1' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'mobile_phone' is set
      if @api_client.config.client_side_validation && mobile_phone.nil?
        fail ArgumentError, "Missing the required parameter 'mobile_phone' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'email_address' is set
      if @api_client.config.client_side_validation && email_address.nil?
        fail ArgumentError, "Missing the required parameter 'email_address' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'facebook_id' is set
      if @api_client.config.client_side_validation && facebook_id.nil?
        fail ArgumentError, "Missing the required parameter 'facebook_id' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'twitter_id' is set
      if @api_client.config.client_side_validation && twitter_id.nil?
        fail ArgumentError, "Missing the required parameter 'twitter_id' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'mobile_device_id' is set
      if @api_client.config.client_side_validation && mobile_device_id.nil?
        fail ArgumentError, "Missing the required parameter 'mobile_device_id' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'loyalty_card_number' is set
      if @api_client.config.client_side_validation && loyalty_card_number.nil?
        fail ArgumentError, "Missing the required parameter 'loyalty_card_number' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'tax_exempt' is set
      if @api_client.config.client_side_validation && tax_exempt.nil?
        fail ArgumentError, "Missing the required parameter 'tax_exempt' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'birth_date' is set
      if @api_client.config.client_side_validation && birth_date.nil?
        fail ArgumentError, "Missing the required parameter 'birth_date' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'price_level' is set
      if @api_client.config.client_side_validation && price_level.nil?
        fail ArgumentError, "Missing the required parameter 'price_level' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'signup_channel_uid' is set
      if @api_client.config.client_side_validation && signup_channel_uid.nil?
        fail ArgumentError, "Missing the required parameter 'signup_channel_uid' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'signup_store_uid' is set
      if @api_client.config.client_side_validation && signup_store_uid.nil?
        fail ArgumentError, "Missing the required parameter 'signup_store_uid' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'signup_store_code' is set
      if @api_client.config.client_side_validation && signup_store_code.nil?
        fail ArgumentError, "Missing the required parameter 'signup_store_code' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'signup_store_external_id' is set
      if @api_client.config.client_side_validation && signup_store_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'signup_store_external_id' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'no_email' is set
      if @api_client.config.client_side_validation && no_email.nil?
        fail ArgumentError, "Missing the required parameter 'no_email' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'salutation' is set
      if @api_client.config.client_side_validation && salutation.nil?
        fail ArgumentError, "Missing the required parameter 'salutation' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'validate_address' is set
      if @api_client.config.client_side_validation && validate_address.nil?
        fail ArgumentError, "Missing the required parameter 'validate_address' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'custom_fields' is set
      if @api_client.config.client_side_validation && custom_fields.nil?
        fail ArgumentError, "Missing the required parameter 'custom_fields' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'device_code2' is set
      if @api_client.config.client_side_validation && device_code2.nil?
        fail ArgumentError, "Missing the required parameter 'device_code2' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'login_domain' is set
      if @api_client.config.client_side_validation && login_domain.nil?
        fail ArgumentError, "Missing the required parameter 'login_domain' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling SnippetsCustomersApi.session_save_customer"
      end
      # verify the required parameter 'session_key' is set
      if @api_client.config.client_side_validation && session_key.nil?
        fail ArgumentError, "Missing the required parameter 'session_key' when calling SnippetsCustomersApi.session_save_customer"
      end
      # resource path
      local_var_path = '/api/v4/{loginDomain}/{deviceCode}/snippets/customer/{sessionKey}/commands/saves'.sub('{' + 'loginDomain' + '}', login_domain.to_s).sub('{' + 'deviceCode' + '}', device_code.to_s).sub('{' + 'sessionKey' + '}', session_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['ExternalId'] = external_id
      form_params['Code'] = code
      form_params['FirstName'] = first_name
      form_params['LastName'] = last_name
      form_params['FirstName2'] = first_name2
      form_params['LastName2'] = last_name2
      form_params['Address'] = address
      form_params['CompanyName'] = company_name
      form_params['Phone1'] = phone1
      form_params['MobilePhone'] = mobile_phone
      form_params['EmailAddress'] = email_address
      form_params['FacebookId'] = facebook_id
      form_params['TwitterId'] = twitter_id
      form_params['MobileDeviceId'] = mobile_device_id
      form_params['LoyaltyCardNumber'] = loyalty_card_number
      form_params['TaxExempt'] = tax_exempt
      form_params['BirthDate'] = birth_date
      form_params['Type'] = type
      form_params['PriceLevel'] = price_level
      form_params['SignupChannelUid'] = signup_channel_uid
      form_params['SignupStoreUid'] = signup_store_uid
      form_params['SignupStoreCode'] = signup_store_code
      form_params['SignupStoreExternalId'] = signup_store_external_id
      form_params['NoEmail'] = no_email
      form_params['Salutation'] = salutation
      form_params['ValidateAddress'] = validate_address
      form_params['CustomFields'] = custom_fields
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCustomer' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnippetsCustomersApi#session_save_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param login_domain 
    # @param device_code 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCustomer]
    def session_signup_customer(body, login_domain, device_code, opts = {})
      data, _status_code, _headers = session_signup_customer_with_http_info(body, login_domain, device_code, opts)
      data
    end

    # @param body 
    # @param login_domain 
    # @param device_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCustomer, Integer, Hash)>] ServerResponseCustomer data, response status code and response headers
    def session_signup_customer_with_http_info(body, login_domain, device_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnippetsCustomersApi.session_signup_customer ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'login_domain' is set
      if @api_client.config.client_side_validation && login_domain.nil?
        fail ArgumentError, "Missing the required parameter 'login_domain' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # resource path
      local_var_path = '/api/v4/{loginDomain}/{deviceCode}/snippets/customer/commands/signups'.sub('{' + 'loginDomain' + '}', login_domain.to_s).sub('{' + 'deviceCode' + '}', device_code.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['ExternalId'] = external_id
      form_params['Code'] = code
      form_params['FirstName'] = first_name
      form_params['LastName'] = last_name
      form_params['FirstName2'] = first_name2
      form_params['LastName2'] = last_name2
      form_params['Address'] = address
      form_params['CompanyName'] = company_name
      form_params['Phone1'] = phone1
      form_params['MobilePhone'] = mobile_phone
      form_params['EmailAddress'] = email_address
      form_params['FacebookId'] = facebook_id
      form_params['TwitterId'] = twitter_id
      form_params['MobileDeviceId'] = mobile_device_id
      form_params['LoyaltyCardNumber'] = loyalty_card_number
      form_params['TaxExempt'] = tax_exempt
      form_params['BirthDate'] = birth_date
      form_params['Type'] = type
      form_params['PriceLevel'] = price_level
      form_params['SignupChannelUid'] = signup_channel_uid
      form_params['SignupStoreUid'] = signup_store_uid
      form_params['SignupStoreCode'] = signup_store_code
      form_params['SignupStoreExternalId'] = signup_store_external_id
      form_params['NoEmail'] = no_email
      form_params['Salutation'] = salutation
      form_params['CustomCode1'] = custom_code1
      form_params['CustomCode2'] = custom_code2
      form_params['CustomCode3'] = custom_code3
      form_params['CustomCode4'] = custom_code4
      form_params['CustomCode5'] = custom_code5
      form_params['CustomCode6'] = custom_code6
      form_params['CustomCode7'] = custom_code7
      form_params['CustomCode8'] = custom_code8
      form_params['GroupsToJoin'] = @api_client.build_collection_param(groups_to_join, :multi)
      form_params['Password'] = password
      form_params['ValidateAddress'] = validate_address
      form_params['CustomFields'] = custom_fields
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCustomer' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnippetsCustomersApi#session_signup_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param external_id 
    # @param code 
    # @param first_name 
    # @param last_name 
    # @param first_name2 
    # @param last_name2 
    # @param address 
    # @param company_name 
    # @param phone1 
    # @param mobile_phone 
    # @param email_address 
    # @param facebook_id 
    # @param twitter_id 
    # @param mobile_device_id 
    # @param loyalty_card_number 
    # @param tax_exempt 
    # @param birth_date 
    # @param type 
    # @param price_level 
    # @param signup_channel_uid 
    # @param signup_store_uid 
    # @param signup_store_code 
    # @param signup_store_external_id 
    # @param no_email 
    # @param salutation 
    # @param custom_code1 
    # @param custom_code2 
    # @param custom_code3 
    # @param custom_code4 
    # @param custom_code5 
    # @param custom_code6 
    # @param custom_code7 
    # @param custom_code8 
    # @param groups_to_join 
    # @param password 
    # @param validate_address 
    # @param custom_fields 
    # @param device_uid 
    # @param store_code 
    # @param device_code2 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param login_domain 
    # @param device_code 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCustomer]
    def session_signup_customer(external_id, code, first_name, last_name, first_name2, last_name2, address, company_name, phone1, mobile_phone, email_address, facebook_id, twitter_id, mobile_device_id, loyalty_card_number, tax_exempt, birth_date, type, price_level, signup_channel_uid, signup_store_uid, signup_store_code, signup_store_external_id, no_email, salutation, custom_code1, custom_code2, custom_code3, custom_code4, custom_code5, custom_code6, custom_code7, custom_code8, groups_to_join, password, validate_address, custom_fields, device_uid, store_code, device_code2, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, login_domain, device_code, opts = {})
      data, _status_code, _headers = session_signup_customer_with_http_info(external_id, code, first_name, last_name, first_name2, last_name2, address, company_name, phone1, mobile_phone, email_address, facebook_id, twitter_id, mobile_device_id, loyalty_card_number, tax_exempt, birth_date, type, price_level, signup_channel_uid, signup_store_uid, signup_store_code, signup_store_external_id, no_email, salutation, custom_code1, custom_code2, custom_code3, custom_code4, custom_code5, custom_code6, custom_code7, custom_code8, groups_to_join, password, validate_address, custom_fields, device_uid, store_code, device_code2, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, login_domain, device_code, opts)
      data
    end

    # @param external_id 
    # @param code 
    # @param first_name 
    # @param last_name 
    # @param first_name2 
    # @param last_name2 
    # @param address 
    # @param company_name 
    # @param phone1 
    # @param mobile_phone 
    # @param email_address 
    # @param facebook_id 
    # @param twitter_id 
    # @param mobile_device_id 
    # @param loyalty_card_number 
    # @param tax_exempt 
    # @param birth_date 
    # @param type 
    # @param price_level 
    # @param signup_channel_uid 
    # @param signup_store_uid 
    # @param signup_store_code 
    # @param signup_store_external_id 
    # @param no_email 
    # @param salutation 
    # @param custom_code1 
    # @param custom_code2 
    # @param custom_code3 
    # @param custom_code4 
    # @param custom_code5 
    # @param custom_code6 
    # @param custom_code7 
    # @param custom_code8 
    # @param groups_to_join 
    # @param password 
    # @param validate_address 
    # @param custom_fields 
    # @param device_uid 
    # @param store_code 
    # @param device_code2 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param login_domain 
    # @param device_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCustomer, Integer, Hash)>] ServerResponseCustomer data, response status code and response headers
    def session_signup_customer_with_http_info(external_id, code, first_name, last_name, first_name2, last_name2, address, company_name, phone1, mobile_phone, email_address, facebook_id, twitter_id, mobile_device_id, loyalty_card_number, tax_exempt, birth_date, type, price_level, signup_channel_uid, signup_store_uid, signup_store_code, signup_store_external_id, no_email, salutation, custom_code1, custom_code2, custom_code3, custom_code4, custom_code5, custom_code6, custom_code7, custom_code8, groups_to_join, password, validate_address, custom_fields, device_uid, store_code, device_code2, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, login_domain, device_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnippetsCustomersApi.session_signup_customer ...'
      end
      # verify the required parameter 'external_id' is set
      if @api_client.config.client_side_validation && external_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_id' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'last_name' is set
      if @api_client.config.client_side_validation && last_name.nil?
        fail ArgumentError, "Missing the required parameter 'last_name' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'first_name2' is set
      if @api_client.config.client_side_validation && first_name2.nil?
        fail ArgumentError, "Missing the required parameter 'first_name2' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'last_name2' is set
      if @api_client.config.client_side_validation && last_name2.nil?
        fail ArgumentError, "Missing the required parameter 'last_name2' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'company_name' is set
      if @api_client.config.client_side_validation && company_name.nil?
        fail ArgumentError, "Missing the required parameter 'company_name' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'phone1' is set
      if @api_client.config.client_side_validation && phone1.nil?
        fail ArgumentError, "Missing the required parameter 'phone1' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'mobile_phone' is set
      if @api_client.config.client_side_validation && mobile_phone.nil?
        fail ArgumentError, "Missing the required parameter 'mobile_phone' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'email_address' is set
      if @api_client.config.client_side_validation && email_address.nil?
        fail ArgumentError, "Missing the required parameter 'email_address' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'facebook_id' is set
      if @api_client.config.client_side_validation && facebook_id.nil?
        fail ArgumentError, "Missing the required parameter 'facebook_id' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'twitter_id' is set
      if @api_client.config.client_side_validation && twitter_id.nil?
        fail ArgumentError, "Missing the required parameter 'twitter_id' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'mobile_device_id' is set
      if @api_client.config.client_side_validation && mobile_device_id.nil?
        fail ArgumentError, "Missing the required parameter 'mobile_device_id' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'loyalty_card_number' is set
      if @api_client.config.client_side_validation && loyalty_card_number.nil?
        fail ArgumentError, "Missing the required parameter 'loyalty_card_number' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'tax_exempt' is set
      if @api_client.config.client_side_validation && tax_exempt.nil?
        fail ArgumentError, "Missing the required parameter 'tax_exempt' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'birth_date' is set
      if @api_client.config.client_side_validation && birth_date.nil?
        fail ArgumentError, "Missing the required parameter 'birth_date' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'price_level' is set
      if @api_client.config.client_side_validation && price_level.nil?
        fail ArgumentError, "Missing the required parameter 'price_level' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'signup_channel_uid' is set
      if @api_client.config.client_side_validation && signup_channel_uid.nil?
        fail ArgumentError, "Missing the required parameter 'signup_channel_uid' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'signup_store_uid' is set
      if @api_client.config.client_side_validation && signup_store_uid.nil?
        fail ArgumentError, "Missing the required parameter 'signup_store_uid' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'signup_store_code' is set
      if @api_client.config.client_side_validation && signup_store_code.nil?
        fail ArgumentError, "Missing the required parameter 'signup_store_code' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'signup_store_external_id' is set
      if @api_client.config.client_side_validation && signup_store_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'signup_store_external_id' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'no_email' is set
      if @api_client.config.client_side_validation && no_email.nil?
        fail ArgumentError, "Missing the required parameter 'no_email' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'salutation' is set
      if @api_client.config.client_side_validation && salutation.nil?
        fail ArgumentError, "Missing the required parameter 'salutation' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'custom_code1' is set
      if @api_client.config.client_side_validation && custom_code1.nil?
        fail ArgumentError, "Missing the required parameter 'custom_code1' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'custom_code2' is set
      if @api_client.config.client_side_validation && custom_code2.nil?
        fail ArgumentError, "Missing the required parameter 'custom_code2' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'custom_code3' is set
      if @api_client.config.client_side_validation && custom_code3.nil?
        fail ArgumentError, "Missing the required parameter 'custom_code3' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'custom_code4' is set
      if @api_client.config.client_side_validation && custom_code4.nil?
        fail ArgumentError, "Missing the required parameter 'custom_code4' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'custom_code5' is set
      if @api_client.config.client_side_validation && custom_code5.nil?
        fail ArgumentError, "Missing the required parameter 'custom_code5' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'custom_code6' is set
      if @api_client.config.client_side_validation && custom_code6.nil?
        fail ArgumentError, "Missing the required parameter 'custom_code6' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'custom_code7' is set
      if @api_client.config.client_side_validation && custom_code7.nil?
        fail ArgumentError, "Missing the required parameter 'custom_code7' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'custom_code8' is set
      if @api_client.config.client_side_validation && custom_code8.nil?
        fail ArgumentError, "Missing the required parameter 'custom_code8' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'groups_to_join' is set
      if @api_client.config.client_side_validation && groups_to_join.nil?
        fail ArgumentError, "Missing the required parameter 'groups_to_join' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'password' is set
      if @api_client.config.client_side_validation && password.nil?
        fail ArgumentError, "Missing the required parameter 'password' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'validate_address' is set
      if @api_client.config.client_side_validation && validate_address.nil?
        fail ArgumentError, "Missing the required parameter 'validate_address' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'custom_fields' is set
      if @api_client.config.client_side_validation && custom_fields.nil?
        fail ArgumentError, "Missing the required parameter 'custom_fields' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'device_code2' is set
      if @api_client.config.client_side_validation && device_code2.nil?
        fail ArgumentError, "Missing the required parameter 'device_code2' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'login_domain' is set
      if @api_client.config.client_side_validation && login_domain.nil?
        fail ArgumentError, "Missing the required parameter 'login_domain' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling SnippetsCustomersApi.session_signup_customer"
      end
      # resource path
      local_var_path = '/api/v4/{loginDomain}/{deviceCode}/snippets/customer/commands/signups'.sub('{' + 'loginDomain' + '}', login_domain.to_s).sub('{' + 'deviceCode' + '}', device_code.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['ExternalId'] = external_id
      form_params['Code'] = code
      form_params['FirstName'] = first_name
      form_params['LastName'] = last_name
      form_params['FirstName2'] = first_name2
      form_params['LastName2'] = last_name2
      form_params['Address'] = address
      form_params['CompanyName'] = company_name
      form_params['Phone1'] = phone1
      form_params['MobilePhone'] = mobile_phone
      form_params['EmailAddress'] = email_address
      form_params['FacebookId'] = facebook_id
      form_params['TwitterId'] = twitter_id
      form_params['MobileDeviceId'] = mobile_device_id
      form_params['LoyaltyCardNumber'] = loyalty_card_number
      form_params['TaxExempt'] = tax_exempt
      form_params['BirthDate'] = birth_date
      form_params['Type'] = type
      form_params['PriceLevel'] = price_level
      form_params['SignupChannelUid'] = signup_channel_uid
      form_params['SignupStoreUid'] = signup_store_uid
      form_params['SignupStoreCode'] = signup_store_code
      form_params['SignupStoreExternalId'] = signup_store_external_id
      form_params['NoEmail'] = no_email
      form_params['Salutation'] = salutation
      form_params['CustomCode1'] = custom_code1
      form_params['CustomCode2'] = custom_code2
      form_params['CustomCode3'] = custom_code3
      form_params['CustomCode4'] = custom_code4
      form_params['CustomCode5'] = custom_code5
      form_params['CustomCode6'] = custom_code6
      form_params['CustomCode7'] = custom_code7
      form_params['CustomCode8'] = custom_code8
      form_params['GroupsToJoin'] = @api_client.build_collection_param(groups_to_join, :multi)
      form_params['Password'] = password
      form_params['ValidateAddress'] = validate_address
      form_params['CustomFields'] = custom_fields
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCustomer' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnippetsCustomersApi#session_signup_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
