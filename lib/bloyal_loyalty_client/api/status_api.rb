=begin
#bLoyal.LoyaltyService

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module BloyalLoyaltyClient
  class StatusApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param access_key 
    # @param type_name 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def system_status_get_cache_entity_sync_totals(access_key, type_name, opts = {})
      data, _status_code, _headers = system_status_get_cache_entity_sync_totals_with_http_info(access_key, type_name, opts)
      data
    end

    # @param access_key 
    # @param type_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def system_status_get_cache_entity_sync_totals_with_http_info(access_key, type_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusApi.system_status_get_cache_entity_sync_totals ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling StatusApi.system_status_get_cache_entity_sync_totals"
      end
      # verify the required parameter 'type_name' is set
      if @api_client.config.client_side_validation && type_name.nil?
        fail ArgumentError, "Missing the required parameter 'type_name' when calling StatusApi.system_status_get_cache_entity_sync_totals"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/SystemStatus/Cache/SyncTotals'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'typeName'] = type_name

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Object' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusApi#system_status_get_cache_entity_sync_totals\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type_name 
    # @return [Object]
    def system_status_get_cache_status(access_key, opts = {})
      data, _status_code, _headers = system_status_get_cache_status_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type_name 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def system_status_get_cache_status_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusApi.system_status_get_cache_status ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling StatusApi.system_status_get_cache_status"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/SystemStatus/Cache'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'typeName'] = opts[:'type_name'] if !opts[:'type_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Object' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusApi#system_status_get_cache_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param client_id 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def system_status_get_client_worker_queue_lengths(access_key, client_id, opts = {})
      data, _status_code, _headers = system_status_get_client_worker_queue_lengths_with_http_info(access_key, client_id, opts)
      data
    end

    # @param access_key 
    # @param client_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def system_status_get_client_worker_queue_lengths_with_http_info(access_key, client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusApi.system_status_get_client_worker_queue_lengths ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling StatusApi.system_status_get_client_worker_queue_lengths"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling StatusApi.system_status_get_client_worker_queue_lengths"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/SystemStatus/WorkerQueueStatus/Clients/Id/{clientId}'.sub('{' + 'accessKey' + '}', access_key.to_s).sub('{' + 'clientId' + '}', client_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Object' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusApi#system_status_get_client_worker_queue_lengths\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def system_status_get_customer_cache(access_key, uid, opts = {})
      data, _status_code, _headers = system_status_get_customer_cache_with_http_info(access_key, uid, opts)
      data
    end

    # @param access_key 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def system_status_get_customer_cache_with_http_info(access_key, uid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusApi.system_status_get_customer_cache ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling StatusApi.system_status_get_customer_cache"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling StatusApi.system_status_get_customer_cache"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/SystemStatus/Cache/Customers/{uid}'.sub('{' + 'accessKey' + '}', access_key.to_s).sub('{' + 'uid' + '}', uid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Object' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusApi#system_status_get_customer_cache\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def system_status_get_service_exception_queue_count(access_key, opts = {})
      data, _status_code, _headers = system_status_get_service_exception_queue_count_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def system_status_get_service_exception_queue_count_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusApi.system_status_get_service_exception_queue_count ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling StatusApi.system_status_get_service_exception_queue_count"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/SystemStatus/WorkerQueueStatus/Exceptions'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Object' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusApi#system_status_get_service_exception_queue_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def system_status_post_expire_cache_command(body, access_key, opts = {})
      data, _status_code, _headers = system_status_post_expire_cache_command_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def system_status_post_expire_cache_command_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusApi.system_status_post_expire_cache_command ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling StatusApi.system_status_post_expire_cache_command"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling StatusApi.system_status_post_expire_cache_command"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/SystemStatus/Cache/Commands'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CacheType'] = cache_type
      form_params['ClientUid'] = client_uid
      form_params['CacheRegion'] = cache_region
      form_params['CacheKey'] = cache_key
      form_params['Uid'] = uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'Object' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusApi#system_status_post_expire_cache_command\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param cache_type 
    # @param client_uid 
    # @param cache_region 
    # @param cache_key 
    # @param uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def system_status_post_expire_cache_command(cache_type, client_uid, cache_region, cache_key, uid, access_key, opts = {})
      data, _status_code, _headers = system_status_post_expire_cache_command_with_http_info(cache_type, client_uid, cache_region, cache_key, uid, access_key, opts)
      data
    end

    # @param cache_type 
    # @param client_uid 
    # @param cache_region 
    # @param cache_key 
    # @param uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def system_status_post_expire_cache_command_with_http_info(cache_type, client_uid, cache_region, cache_key, uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusApi.system_status_post_expire_cache_command ...'
      end
      # verify the required parameter 'cache_type' is set
      if @api_client.config.client_side_validation && cache_type.nil?
        fail ArgumentError, "Missing the required parameter 'cache_type' when calling StatusApi.system_status_post_expire_cache_command"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['KeyCache', 'ReferenceEntity', 'DomainCache', 'Tier1Cache', 'ApplicationDataCache'].include?(cache_type)
        fail ArgumentError, "invalid value for 'cache_type', must be one of KeyCache, ReferenceEntity, DomainCache, Tier1Cache, ApplicationDataCache"
      end
      # verify the required parameter 'client_uid' is set
      if @api_client.config.client_side_validation && client_uid.nil?
        fail ArgumentError, "Missing the required parameter 'client_uid' when calling StatusApi.system_status_post_expire_cache_command"
      end
      # verify the required parameter 'cache_region' is set
      if @api_client.config.client_side_validation && cache_region.nil?
        fail ArgumentError, "Missing the required parameter 'cache_region' when calling StatusApi.system_status_post_expire_cache_command"
      end
      # verify the required parameter 'cache_key' is set
      if @api_client.config.client_side_validation && cache_key.nil?
        fail ArgumentError, "Missing the required parameter 'cache_key' when calling StatusApi.system_status_post_expire_cache_command"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling StatusApi.system_status_post_expire_cache_command"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling StatusApi.system_status_post_expire_cache_command"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/SystemStatus/Cache/Commands'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CacheType'] = cache_type
      form_params['ClientUid'] = client_uid
      form_params['CacheRegion'] = cache_region
      form_params['CacheKey'] = cache_key
      form_params['Uid'] = uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'Object' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusApi#system_status_post_expire_cache_command\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
