=begin
#bLoyal.LoyaltyService

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module BloyalLoyaltyClient
  class SystemApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param access_key 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseIEnumerableChannel]
    def channels2_get_channels(access_key, uid, opts = {})
      data, _status_code, _headers = channels2_get_channels_with_http_info(access_key, uid, opts)
      data
    end

    # @param access_key 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseIEnumerableChannel, Integer, Hash)>] ServerResponseIEnumerableChannel data, response status code and response headers
    def channels2_get_channels_with_http_info(access_key, uid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemApi.channels2_get_channels ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling SystemApi.channels2_get_channels"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling SystemApi.channels2_get_channels"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/channels2/{uid}'.sub('{' + 'accessKey' + '}', access_key.to_s).sub('{' + 'uid' + '}', uid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIEnumerableChannel' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemApi#channels2_get_channels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :uid 
    # @return [ServerResponseIEnumerableChannel]
    def channels_get_channels_async(access_key, opts = {})
      data, _status_code, _headers = channels_get_channels_async_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :uid 
    # @return [Array<(ServerResponseIEnumerableChannel, Integer, Hash)>] ServerResponseIEnumerableChannel data, response status code and response headers
    def channels_get_channels_async_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemApi.channels_get_channels_async ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling SystemApi.channels_get_channels_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/channels'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'uid'] = opts[:'uid'] if !opts[:'uid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIEnumerableChannel' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemApi#channels_get_channels_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def chores_post_queue_chore(body, access_key, opts = {})
      data, _status_code, _headers = chores_post_queue_chore_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def chores_post_queue_chore_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemApi.chores_post_queue_chore ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SystemApi.chores_post_queue_chore"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling SystemApi.chores_post_queue_chore"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/Chores/Queue'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['ChoreName'] = chore_name
      form_params['Parameters'] = @api_client.build_collection_param(parameters, :multi)
      form_params['Scope'] = scope
      form_params['SecondsToDelay'] = seconds_to_delay
      form_params['Priority'] = priority
      form_params['ExceptionQueueOnFailure'] = exception_queue_on_failure
      form_params['FromEmail'] = from_email
      form_params['NotificationEmails'] = @api_client.build_collection_param(notification_emails, :multi)
      form_params['OnlyNotifyOnFailure'] = only_notify_on_failure

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'Object' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemApi#chores_post_queue_chore\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param chore_name 
    # @param parameters 
    # @param scope 
    # @param seconds_to_delay 
    # @param priority 
    # @param exception_queue_on_failure 
    # @param from_email 
    # @param notification_emails 
    # @param only_notify_on_failure 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def chores_post_queue_chore(chore_name, parameters, scope, seconds_to_delay, priority, exception_queue_on_failure, from_email, notification_emails, only_notify_on_failure, access_key, opts = {})
      data, _status_code, _headers = chores_post_queue_chore_with_http_info(chore_name, parameters, scope, seconds_to_delay, priority, exception_queue_on_failure, from_email, notification_emails, only_notify_on_failure, access_key, opts)
      data
    end

    # @param chore_name 
    # @param parameters 
    # @param scope 
    # @param seconds_to_delay 
    # @param priority 
    # @param exception_queue_on_failure 
    # @param from_email 
    # @param notification_emails 
    # @param only_notify_on_failure 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def chores_post_queue_chore_with_http_info(chore_name, parameters, scope, seconds_to_delay, priority, exception_queue_on_failure, from_email, notification_emails, only_notify_on_failure, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemApi.chores_post_queue_chore ...'
      end
      # verify the required parameter 'chore_name' is set
      if @api_client.config.client_side_validation && chore_name.nil?
        fail ArgumentError, "Missing the required parameter 'chore_name' when calling SystemApi.chores_post_queue_chore"
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling SystemApi.chores_post_queue_chore"
      end
      # verify the required parameter 'scope' is set
      if @api_client.config.client_side_validation && scope.nil?
        fail ArgumentError, "Missing the required parameter 'scope' when calling SystemApi.chores_post_queue_chore"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['Cluster', 'ServiceInstance', 'Server', 'Client'].include?(scope)
        fail ArgumentError, "invalid value for 'scope', must be one of Cluster, ServiceInstance, Server, Client"
      end
      # verify the required parameter 'seconds_to_delay' is set
      if @api_client.config.client_side_validation && seconds_to_delay.nil?
        fail ArgumentError, "Missing the required parameter 'seconds_to_delay' when calling SystemApi.chores_post_queue_chore"
      end
      # verify the required parameter 'priority' is set
      if @api_client.config.client_side_validation && priority.nil?
        fail ArgumentError, "Missing the required parameter 'priority' when calling SystemApi.chores_post_queue_chore"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['P1', 'P2'].include?(priority)
        fail ArgumentError, "invalid value for 'priority', must be one of P1, P2"
      end
      # verify the required parameter 'exception_queue_on_failure' is set
      if @api_client.config.client_side_validation && exception_queue_on_failure.nil?
        fail ArgumentError, "Missing the required parameter 'exception_queue_on_failure' when calling SystemApi.chores_post_queue_chore"
      end
      # verify the required parameter 'from_email' is set
      if @api_client.config.client_side_validation && from_email.nil?
        fail ArgumentError, "Missing the required parameter 'from_email' when calling SystemApi.chores_post_queue_chore"
      end
      # verify the required parameter 'notification_emails' is set
      if @api_client.config.client_side_validation && notification_emails.nil?
        fail ArgumentError, "Missing the required parameter 'notification_emails' when calling SystemApi.chores_post_queue_chore"
      end
      # verify the required parameter 'only_notify_on_failure' is set
      if @api_client.config.client_side_validation && only_notify_on_failure.nil?
        fail ArgumentError, "Missing the required parameter 'only_notify_on_failure' when calling SystemApi.chores_post_queue_chore"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling SystemApi.chores_post_queue_chore"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/Chores/Queue'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['ChoreName'] = chore_name
      form_params['Parameters'] = @api_client.build_collection_param(parameters, :multi)
      form_params['Scope'] = scope
      form_params['SecondsToDelay'] = seconds_to_delay
      form_params['Priority'] = priority
      form_params['ExceptionQueueOnFailure'] = exception_queue_on_failure
      form_params['FromEmail'] = from_email
      form_params['NotificationEmails'] = @api_client.build_collection_param(notification_emails, :multi)
      form_params['OnlyNotifyOnFailure'] = only_notify_on_failure

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'Object' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemApi#chores_post_queue_chore\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseIEnumerableEntityFieldMap]
    def custom_entity_definition_get_custom_fields_by_entity_async(access_key, uid, opts = {})
      data, _status_code, _headers = custom_entity_definition_get_custom_fields_by_entity_async_with_http_info(access_key, uid, opts)
      data
    end

    # @param access_key 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseIEnumerableEntityFieldMap, Integer, Hash)>] ServerResponseIEnumerableEntityFieldMap data, response status code and response headers
    def custom_entity_definition_get_custom_fields_by_entity_async_with_http_info(access_key, uid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemApi.custom_entity_definition_get_custom_fields_by_entity_async ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling SystemApi.custom_entity_definition_get_custom_fields_by_entity_async"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling SystemApi.custom_entity_definition_get_custom_fields_by_entity_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/channels/{uid}'.sub('{' + 'accessKey' + '}', access_key.to_s).sub('{' + 'uid' + '}', uid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIEnumerableEntityFieldMap' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemApi#custom_entity_definition_get_custom_fields_by_entity_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def devices_get_context_device_async(access_key, opts = {})
      data, _status_code, _headers = devices_get_context_device_async_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def devices_get_context_device_async_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemApi.devices_get_context_device_async ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling SystemApi.devices_get_context_device_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/contextdevices'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Object' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemApi#devices_get_context_device_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseDeviceProfile]
    def devices_get_device_async(access_key, opts = {})
      data, _status_code, _headers = devices_get_device_async_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseDeviceProfile, Integer, Hash)>] ServerResponseDeviceProfile data, response status code and response headers
    def devices_get_device_async_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemApi.devices_get_device_async ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling SystemApi.devices_get_device_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/devices'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseDeviceProfile' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemApi#devices_get_device_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseDeviceProfile]
    def devices_register_device_async(body, access_key, opts = {})
      data, _status_code, _headers = devices_register_device_async_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseDeviceProfile, Integer, Hash)>] ServerResponseDeviceProfile data, response status code and response headers
    def devices_register_device_async_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemApi.devices_register_device_async ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SystemApi.devices_register_device_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling SystemApi.devices_register_device_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/devices/registrations'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['Version'] = version
      form_params['MachineName'] = machine_name

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseDeviceProfile' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemApi#devices_register_device_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param version 
    # @param machine_name 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseDeviceProfile]
    def devices_register_device_async(version, machine_name, access_key, opts = {})
      data, _status_code, _headers = devices_register_device_async_with_http_info(version, machine_name, access_key, opts)
      data
    end

    # @param version 
    # @param machine_name 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseDeviceProfile, Integer, Hash)>] ServerResponseDeviceProfile data, response status code and response headers
    def devices_register_device_async_with_http_info(version, machine_name, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemApi.devices_register_device_async ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling SystemApi.devices_register_device_async"
      end
      # verify the required parameter 'machine_name' is set
      if @api_client.config.client_side_validation && machine_name.nil?
        fail ArgumentError, "Missing the required parameter 'machine_name' when calling SystemApi.devices_register_device_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling SystemApi.devices_register_device_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/devices/registrations'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['Version'] = version
      form_params['MachineName'] = machine_name

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseDeviceProfile' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemApi#devices_register_device_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponse]
    def entity_changes_post_sample(body, access_key, opts = {})
      data, _status_code, _headers = entity_changes_post_sample_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponse, Integer, Hash)>] ServerResponse data, response status code and response headers
    def entity_changes_post_sample_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemApi.entity_changes_post_sample ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SystemApi.entity_changes_post_sample"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling SystemApi.entity_changes_post_sample"
      end
      # resource path
      local_var_path = '/internal/v4/{accessKey}/notifications/entitychanges'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['Value'] = value
      form_params['AssemblyName'] = assembly_name
      form_params['TypeName'] = type_name
      form_params['UpdateType'] = update_type
      form_params['Uid'] = uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemApi#entity_changes_post_sample\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param value 
    # @param assembly_name 
    # @param type_name 
    # @param update_type 
    # @param uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponse]
    def entity_changes_post_sample(value, assembly_name, type_name, update_type, uid, access_key, opts = {})
      data, _status_code, _headers = entity_changes_post_sample_with_http_info(value, assembly_name, type_name, update_type, uid, access_key, opts)
      data
    end

    # @param value 
    # @param assembly_name 
    # @param type_name 
    # @param update_type 
    # @param uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponse, Integer, Hash)>] ServerResponse data, response status code and response headers
    def entity_changes_post_sample_with_http_info(value, assembly_name, type_name, update_type, uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemApi.entity_changes_post_sample ...'
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling SystemApi.entity_changes_post_sample"
      end
      # verify the required parameter 'assembly_name' is set
      if @api_client.config.client_side_validation && assembly_name.nil?
        fail ArgumentError, "Missing the required parameter 'assembly_name' when calling SystemApi.entity_changes_post_sample"
      end
      # verify the required parameter 'type_name' is set
      if @api_client.config.client_side_validation && type_name.nil?
        fail ArgumentError, "Missing the required parameter 'type_name' when calling SystemApi.entity_changes_post_sample"
      end
      # verify the required parameter 'update_type' is set
      if @api_client.config.client_side_validation && update_type.nil?
        fail ArgumentError, "Missing the required parameter 'update_type' when calling SystemApi.entity_changes_post_sample"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['Update', 'Delete'].include?(update_type)
        fail ArgumentError, "invalid value for 'update_type', must be one of Update, Delete"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling SystemApi.entity_changes_post_sample"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling SystemApi.entity_changes_post_sample"
      end
      # resource path
      local_var_path = '/internal/v4/{accessKey}/notifications/entitychanges'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['Value'] = value
      form_params['AssemblyName'] = assembly_name
      form_params['TypeName'] = type_name
      form_params['UpdateType'] = update_type
      form_params['Uid'] = uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemApi#entity_changes_post_sample\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseStore]
    def get_store_get_store(access_key, opts = {})
      data, _status_code, _headers = get_store_get_store_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseStore, Integer, Hash)>] ServerResponseStore data, response status code and response headers
    def get_store_get_store_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemApi.get_store_get_store ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling SystemApi.get_store_get_store"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/store'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseStore' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemApi#get_store_get_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context_key 
    # @return [ServerResponseIListLogEvent]
    def logger_get_server_logs_in_memory_async(access_key, opts = {})
      data, _status_code, _headers = logger_get_server_logs_in_memory_async_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context_key 
    # @return [Array<(ServerResponseIListLogEvent, Integer, Hash)>] ServerResponseIListLogEvent data, response status code and response headers
    def logger_get_server_logs_in_memory_async_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemApi.logger_get_server_logs_in_memory_async ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling SystemApi.logger_get_server_logs_in_memory_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/Logger/Logs/Memory'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'contextKey'] = opts[:'context_key'] if !opts[:'context_key'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIListLogEvent' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemApi#logger_get_server_logs_in_memory_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseIListPriceLevel]
    def price_levels_get_price_levels(access_key, opts = {})
      data, _status_code, _headers = price_levels_get_price_levels_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseIListPriceLevel, Integer, Hash)>] ServerResponseIListPriceLevel data, response status code and response headers
    def price_levels_get_price_levels_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemApi.price_levels_get_price_levels ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling SystemApi.price_levels_get_price_levels"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/pricelevels'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIListPriceLevel' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemApi#price_levels_get_price_levels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseIListPriceLevel]
    def price_levels_get_price_levels_0(access_key, uid, opts = {})
      data, _status_code, _headers = price_levels_get_price_levels_0_with_http_info(access_key, uid, opts)
      data
    end

    # @param access_key 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseIListPriceLevel, Integer, Hash)>] ServerResponseIListPriceLevel data, response status code and response headers
    def price_levels_get_price_levels_0_with_http_info(access_key, uid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemApi.price_levels_get_price_levels_0 ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling SystemApi.price_levels_get_price_levels_0"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling SystemApi.price_levels_get_price_levels_0"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/pricelevels/{uid}'.sub('{' + 'accessKey' + '}', access_key.to_s).sub('{' + 'uid' + '}', uid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIListPriceLevel' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemApi#price_levels_get_price_levels_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :code 
    # @option opts [BOOLEAN] :check_legacy 
    # @return [ServerResponseWebSnippetProfile]
    def query_web_snippet_profile_get_async(access_key, uid, opts = {})
      data, _status_code, _headers = query_web_snippet_profile_get_async_with_http_info(access_key, uid, opts)
      data
    end

    # @param access_key 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :code 
    # @option opts [BOOLEAN] :check_legacy 
    # @return [Array<(ServerResponseWebSnippetProfile, Integer, Hash)>] ServerResponseWebSnippetProfile data, response status code and response headers
    def query_web_snippet_profile_get_async_with_http_info(access_key, uid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemApi.query_web_snippet_profile_get_async ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling SystemApi.query_web_snippet_profile_get_async"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling SystemApi.query_web_snippet_profile_get_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/websnippetprofiles/profile/{uid}'.sub('{' + 'accessKey' + '}', access_key.to_s).sub('{' + 'uid' + '}', uid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'code'] = opts[:'code'] if !opts[:'code'].nil?
      query_params[:'checkLegacy'] = opts[:'check_legacy'] if !opts[:'check_legacy'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseWebSnippetProfile' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemApi#query_web_snippet_profile_get_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def reverse_command_reverse_command_async(body, access_key, opts = {})
      data, _status_code, _headers = reverse_command_reverse_command_async_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def reverse_command_reverse_command_async_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemApi.reverse_command_reverse_command_async ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SystemApi.reverse_command_reverse_command_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling SystemApi.reverse_command_reverse_command_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/commands/reversals'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CommandUid'] = command_uid
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemApi#reverse_command_reverse_command_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param command_uid 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def reverse_command_reverse_command_async(command_uid, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = reverse_command_reverse_command_async_with_http_info(command_uid, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param command_uid 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def reverse_command_reverse_command_async_with_http_info(command_uid, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemApi.reverse_command_reverse_command_async ...'
      end
      # verify the required parameter 'command_uid' is set
      if @api_client.config.client_side_validation && command_uid.nil?
        fail ArgumentError, "Missing the required parameter 'command_uid' when calling SystemApi.reverse_command_reverse_command_async"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling SystemApi.reverse_command_reverse_command_async"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling SystemApi.reverse_command_reverse_command_async"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling SystemApi.reverse_command_reverse_command_async"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling SystemApi.reverse_command_reverse_command_async"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling SystemApi.reverse_command_reverse_command_async"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling SystemApi.reverse_command_reverse_command_async"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling SystemApi.reverse_command_reverse_command_async"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling SystemApi.reverse_command_reverse_command_async"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling SystemApi.reverse_command_reverse_command_async"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling SystemApi.reverse_command_reverse_command_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling SystemApi.reverse_command_reverse_command_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/commands/reversals'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CommandUid'] = command_uid
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemApi#reverse_command_reverse_command_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :minutes 
    # @option opts [Integer] :hours 
    # @option opts [Integer] :days 
    # @return [ServerResponseSession]
    def session_get_device_session_async(access_key, opts = {})
      data, _status_code, _headers = session_get_device_session_async_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :minutes 
    # @option opts [Integer] :hours 
    # @option opts [Integer] :days 
    # @return [Array<(ServerResponseSession, Integer, Hash)>] ServerResponseSession data, response status code and response headers
    def session_get_device_session_async_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemApi.session_get_device_session_async ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling SystemApi.session_get_device_session_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/session'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'minutes'] = opts[:'minutes'] if !opts[:'minutes'].nil?
      query_params[:'hours'] = opts[:'hours'] if !opts[:'hours'].nil?
      query_params[:'days'] = opts[:'days'] if !opts[:'days'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseSession' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemApi#session_get_device_session_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
