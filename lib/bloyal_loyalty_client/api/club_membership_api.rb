=begin
#bLoyal.LoyaltyService

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module BloyalLoyaltyClient
  class ClubMembershipApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def close_club_close_club_async(body, access_key, opts = {})
      data, _status_code, _headers = close_club_close_club_async_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def close_club_close_club_async_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClubMembershipApi.close_club_close_club_async ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ClubMembershipApi.close_club_close_club_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling ClubMembershipApi.close_club_close_club_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/clubs/commands/closes'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CustomerUid'] = customer_uid
      form_params['ClubUid'] = club_uid
      form_params['CloseDate'] = close_date
      form_params['Created'] = created
      form_params['CreatedLocal'] = created_local
      form_params['TransactionUid'] = transaction_uid
      form_params['TransactionExternalId'] = transaction_external_id
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClubMembershipApi#close_club_close_club_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param customer_uid 
    # @param club_uid 
    # @param close_date 
    # @param created 
    # @param created_local 
    # @param transaction_uid 
    # @param transaction_external_id 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def close_club_close_club_async(customer_uid, club_uid, close_date, created, created_local, transaction_uid, transaction_external_id, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = close_club_close_club_async_with_http_info(customer_uid, club_uid, close_date, created, created_local, transaction_uid, transaction_external_id, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param customer_uid 
    # @param club_uid 
    # @param close_date 
    # @param created 
    # @param created_local 
    # @param transaction_uid 
    # @param transaction_external_id 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def close_club_close_club_async_with_http_info(customer_uid, club_uid, close_date, created, created_local, transaction_uid, transaction_external_id, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClubMembershipApi.close_club_close_club_async ...'
      end
      # verify the required parameter 'customer_uid' is set
      if @api_client.config.client_side_validation && customer_uid.nil?
        fail ArgumentError, "Missing the required parameter 'customer_uid' when calling ClubMembershipApi.close_club_close_club_async"
      end
      # verify the required parameter 'club_uid' is set
      if @api_client.config.client_side_validation && club_uid.nil?
        fail ArgumentError, "Missing the required parameter 'club_uid' when calling ClubMembershipApi.close_club_close_club_async"
      end
      # verify the required parameter 'close_date' is set
      if @api_client.config.client_side_validation && close_date.nil?
        fail ArgumentError, "Missing the required parameter 'close_date' when calling ClubMembershipApi.close_club_close_club_async"
      end
      # verify the required parameter 'created' is set
      if @api_client.config.client_side_validation && created.nil?
        fail ArgumentError, "Missing the required parameter 'created' when calling ClubMembershipApi.close_club_close_club_async"
      end
      # verify the required parameter 'created_local' is set
      if @api_client.config.client_side_validation && created_local.nil?
        fail ArgumentError, "Missing the required parameter 'created_local' when calling ClubMembershipApi.close_club_close_club_async"
      end
      # verify the required parameter 'transaction_uid' is set
      if @api_client.config.client_side_validation && transaction_uid.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_uid' when calling ClubMembershipApi.close_club_close_club_async"
      end
      # verify the required parameter 'transaction_external_id' is set
      if @api_client.config.client_side_validation && transaction_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_external_id' when calling ClubMembershipApi.close_club_close_club_async"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling ClubMembershipApi.close_club_close_club_async"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling ClubMembershipApi.close_club_close_club_async"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling ClubMembershipApi.close_club_close_club_async"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling ClubMembershipApi.close_club_close_club_async"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling ClubMembershipApi.close_club_close_club_async"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling ClubMembershipApi.close_club_close_club_async"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling ClubMembershipApi.close_club_close_club_async"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling ClubMembershipApi.close_club_close_club_async"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling ClubMembershipApi.close_club_close_club_async"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling ClubMembershipApi.close_club_close_club_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling ClubMembershipApi.close_club_close_club_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/clubs/commands/closes'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CustomerUid'] = customer_uid
      form_params['ClubUid'] = club_uid
      form_params['CloseDate'] = close_date
      form_params['Created'] = created
      form_params['CreatedLocal'] = created_local
      form_params['TransactionUid'] = transaction_uid
      form_params['TransactionExternalId'] = transaction_external_id
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClubMembershipApi#close_club_close_club_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseIEnumerableClub]
    def clubs_get_clubs(access_key, opts = {})
      data, _status_code, _headers = clubs_get_clubs_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseIEnumerableClub, Integer, Hash)>] ServerResponseIEnumerableClub data, response status code and response headers
    def clubs_get_clubs_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClubMembershipApi.clubs_get_clubs ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling ClubMembershipApi.clubs_get_clubs"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/clubs'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIEnumerableClub' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClubMembershipApi#clubs_get_clubs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def expire_club_expire_club_async(body, access_key, opts = {})
      data, _status_code, _headers = expire_club_expire_club_async_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def expire_club_expire_club_async_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClubMembershipApi.expire_club_expire_club_async ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ClubMembershipApi.expire_club_expire_club_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling ClubMembershipApi.expire_club_expire_club_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/clubs/commands/expirations'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CustomerUid'] = customer_uid
      form_params['ClubUid'] = club_uid
      form_params['ExpirationDate'] = expiration_date
      form_params['Created'] = created
      form_params['CreatedLocal'] = created_local
      form_params['TransactionUid'] = transaction_uid
      form_params['TransactionExternalId'] = transaction_external_id
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClubMembershipApi#expire_club_expire_club_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param customer_uid 
    # @param club_uid 
    # @param expiration_date 
    # @param created 
    # @param created_local 
    # @param transaction_uid 
    # @param transaction_external_id 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def expire_club_expire_club_async(customer_uid, club_uid, expiration_date, created, created_local, transaction_uid, transaction_external_id, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = expire_club_expire_club_async_with_http_info(customer_uid, club_uid, expiration_date, created, created_local, transaction_uid, transaction_external_id, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param customer_uid 
    # @param club_uid 
    # @param expiration_date 
    # @param created 
    # @param created_local 
    # @param transaction_uid 
    # @param transaction_external_id 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def expire_club_expire_club_async_with_http_info(customer_uid, club_uid, expiration_date, created, created_local, transaction_uid, transaction_external_id, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClubMembershipApi.expire_club_expire_club_async ...'
      end
      # verify the required parameter 'customer_uid' is set
      if @api_client.config.client_side_validation && customer_uid.nil?
        fail ArgumentError, "Missing the required parameter 'customer_uid' when calling ClubMembershipApi.expire_club_expire_club_async"
      end
      # verify the required parameter 'club_uid' is set
      if @api_client.config.client_side_validation && club_uid.nil?
        fail ArgumentError, "Missing the required parameter 'club_uid' when calling ClubMembershipApi.expire_club_expire_club_async"
      end
      # verify the required parameter 'expiration_date' is set
      if @api_client.config.client_side_validation && expiration_date.nil?
        fail ArgumentError, "Missing the required parameter 'expiration_date' when calling ClubMembershipApi.expire_club_expire_club_async"
      end
      # verify the required parameter 'created' is set
      if @api_client.config.client_side_validation && created.nil?
        fail ArgumentError, "Missing the required parameter 'created' when calling ClubMembershipApi.expire_club_expire_club_async"
      end
      # verify the required parameter 'created_local' is set
      if @api_client.config.client_side_validation && created_local.nil?
        fail ArgumentError, "Missing the required parameter 'created_local' when calling ClubMembershipApi.expire_club_expire_club_async"
      end
      # verify the required parameter 'transaction_uid' is set
      if @api_client.config.client_side_validation && transaction_uid.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_uid' when calling ClubMembershipApi.expire_club_expire_club_async"
      end
      # verify the required parameter 'transaction_external_id' is set
      if @api_client.config.client_side_validation && transaction_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_external_id' when calling ClubMembershipApi.expire_club_expire_club_async"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling ClubMembershipApi.expire_club_expire_club_async"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling ClubMembershipApi.expire_club_expire_club_async"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling ClubMembershipApi.expire_club_expire_club_async"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling ClubMembershipApi.expire_club_expire_club_async"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling ClubMembershipApi.expire_club_expire_club_async"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling ClubMembershipApi.expire_club_expire_club_async"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling ClubMembershipApi.expire_club_expire_club_async"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling ClubMembershipApi.expire_club_expire_club_async"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling ClubMembershipApi.expire_club_expire_club_async"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling ClubMembershipApi.expire_club_expire_club_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling ClubMembershipApi.expire_club_expire_club_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/clubs/commands/expirations'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CustomerUid'] = customer_uid
      form_params['ClubUid'] = club_uid
      form_params['ExpirationDate'] = expiration_date
      form_params['Created'] = created
      form_params['CreatedLocal'] = created_local
      form_params['TransactionUid'] = transaction_uid
      form_params['TransactionExternalId'] = transaction_external_id
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClubMembershipApi#expire_club_expire_club_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def inactivate_club_membership_inactivate_club_async(body, access_key, opts = {})
      data, _status_code, _headers = inactivate_club_membership_inactivate_club_async_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def inactivate_club_membership_inactivate_club_async_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClubMembershipApi.inactivate_club_membership_inactivate_club_async ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ClubMembershipApi.inactivate_club_membership_inactivate_club_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling ClubMembershipApi.inactivate_club_membership_inactivate_club_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/clubs/commands/inactivations'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['MembershipUid'] = membership_uid
      form_params['CustomerUid'] = customer_uid
      form_params['ClubUid'] = club_uid
      form_params['ActivationDate'] = activation_date
      form_params['EnableLoyaltyBenefitsWhileInactive'] = enable_loyalty_benefits_while_inactive
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClubMembershipApi#inactivate_club_membership_inactivate_club_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param membership_uid 
    # @param customer_uid 
    # @param club_uid 
    # @param activation_date 
    # @param enable_loyalty_benefits_while_inactive 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def inactivate_club_membership_inactivate_club_async(membership_uid, customer_uid, club_uid, activation_date, enable_loyalty_benefits_while_inactive, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = inactivate_club_membership_inactivate_club_async_with_http_info(membership_uid, customer_uid, club_uid, activation_date, enable_loyalty_benefits_while_inactive, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param membership_uid 
    # @param customer_uid 
    # @param club_uid 
    # @param activation_date 
    # @param enable_loyalty_benefits_while_inactive 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def inactivate_club_membership_inactivate_club_async_with_http_info(membership_uid, customer_uid, club_uid, activation_date, enable_loyalty_benefits_while_inactive, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClubMembershipApi.inactivate_club_membership_inactivate_club_async ...'
      end
      # verify the required parameter 'membership_uid' is set
      if @api_client.config.client_side_validation && membership_uid.nil?
        fail ArgumentError, "Missing the required parameter 'membership_uid' when calling ClubMembershipApi.inactivate_club_membership_inactivate_club_async"
      end
      # verify the required parameter 'customer_uid' is set
      if @api_client.config.client_side_validation && customer_uid.nil?
        fail ArgumentError, "Missing the required parameter 'customer_uid' when calling ClubMembershipApi.inactivate_club_membership_inactivate_club_async"
      end
      # verify the required parameter 'club_uid' is set
      if @api_client.config.client_side_validation && club_uid.nil?
        fail ArgumentError, "Missing the required parameter 'club_uid' when calling ClubMembershipApi.inactivate_club_membership_inactivate_club_async"
      end
      # verify the required parameter 'activation_date' is set
      if @api_client.config.client_side_validation && activation_date.nil?
        fail ArgumentError, "Missing the required parameter 'activation_date' when calling ClubMembershipApi.inactivate_club_membership_inactivate_club_async"
      end
      # verify the required parameter 'enable_loyalty_benefits_while_inactive' is set
      if @api_client.config.client_side_validation && enable_loyalty_benefits_while_inactive.nil?
        fail ArgumentError, "Missing the required parameter 'enable_loyalty_benefits_while_inactive' when calling ClubMembershipApi.inactivate_club_membership_inactivate_club_async"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling ClubMembershipApi.inactivate_club_membership_inactivate_club_async"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling ClubMembershipApi.inactivate_club_membership_inactivate_club_async"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling ClubMembershipApi.inactivate_club_membership_inactivate_club_async"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling ClubMembershipApi.inactivate_club_membership_inactivate_club_async"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling ClubMembershipApi.inactivate_club_membership_inactivate_club_async"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling ClubMembershipApi.inactivate_club_membership_inactivate_club_async"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling ClubMembershipApi.inactivate_club_membership_inactivate_club_async"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling ClubMembershipApi.inactivate_club_membership_inactivate_club_async"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling ClubMembershipApi.inactivate_club_membership_inactivate_club_async"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling ClubMembershipApi.inactivate_club_membership_inactivate_club_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling ClubMembershipApi.inactivate_club_membership_inactivate_club_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/clubs/commands/inactivations'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['MembershipUid'] = membership_uid
      form_params['CustomerUid'] = customer_uid
      form_params['ClubUid'] = club_uid
      form_params['ActivationDate'] = activation_date
      form_params['EnableLoyaltyBenefitsWhileInactive'] = enable_loyalty_benefits_while_inactive
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClubMembershipApi#inactivate_club_membership_inactivate_club_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def join_club_join_club_async(body, access_key, opts = {})
      data, _status_code, _headers = join_club_join_club_async_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def join_club_join_club_async_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClubMembershipApi.join_club_join_club_async ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ClubMembershipApi.join_club_join_club_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling ClubMembershipApi.join_club_join_club_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/clubs/commands/joins'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CustomerUid'] = customer_uid
      form_params['ClubUid'] = club_uid
      form_params['StartDate'] = start_date
      form_params['ExpirationDate'] = expiration_date
      form_params['Created'] = created
      form_params['CreatedLocal'] = created_local
      form_params['SponsorUid'] = sponsor_uid
      form_params['ReferralUid'] = referral_uid
      form_params['TransactionUid'] = transaction_uid
      form_params['TransactionExternalId'] = transaction_external_id
      form_params['Fulfillment'] = fulfillment
      form_params['Payment'] = payment
      form_params['AutoBillingDay'] = auto_billing_day
      form_params['AutoBillingStartDate'] = auto_billing_start_date
      form_params['MemberComment'] = member_comment
      form_params['ProductPreferenceType'] = product_preference_type
      form_params['ProductPreferences'] = @api_client.build_collection_param(product_preferences, :multi)
      form_params['CustomFields'] = custom_fields
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClubMembershipApi#join_club_join_club_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param customer_uid 
    # @param club_uid 
    # @param start_date 
    # @param expiration_date 
    # @param created 
    # @param created_local 
    # @param sponsor_uid 
    # @param referral_uid 
    # @param transaction_uid 
    # @param transaction_external_id 
    # @param fulfillment 
    # @param payment 
    # @param auto_billing_day 
    # @param auto_billing_start_date 
    # @param member_comment 
    # @param product_preference_type 
    # @param product_preferences 
    # @param custom_fields 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def join_club_join_club_async(customer_uid, club_uid, start_date, expiration_date, created, created_local, sponsor_uid, referral_uid, transaction_uid, transaction_external_id, fulfillment, payment, auto_billing_day, auto_billing_start_date, member_comment, product_preference_type, product_preferences, custom_fields, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = join_club_join_club_async_with_http_info(customer_uid, club_uid, start_date, expiration_date, created, created_local, sponsor_uid, referral_uid, transaction_uid, transaction_external_id, fulfillment, payment, auto_billing_day, auto_billing_start_date, member_comment, product_preference_type, product_preferences, custom_fields, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param customer_uid 
    # @param club_uid 
    # @param start_date 
    # @param expiration_date 
    # @param created 
    # @param created_local 
    # @param sponsor_uid 
    # @param referral_uid 
    # @param transaction_uid 
    # @param transaction_external_id 
    # @param fulfillment 
    # @param payment 
    # @param auto_billing_day 
    # @param auto_billing_start_date 
    # @param member_comment 
    # @param product_preference_type 
    # @param product_preferences 
    # @param custom_fields 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def join_club_join_club_async_with_http_info(customer_uid, club_uid, start_date, expiration_date, created, created_local, sponsor_uid, referral_uid, transaction_uid, transaction_external_id, fulfillment, payment, auto_billing_day, auto_billing_start_date, member_comment, product_preference_type, product_preferences, custom_fields, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClubMembershipApi.join_club_join_club_async ...'
      end
      # verify the required parameter 'customer_uid' is set
      if @api_client.config.client_side_validation && customer_uid.nil?
        fail ArgumentError, "Missing the required parameter 'customer_uid' when calling ClubMembershipApi.join_club_join_club_async"
      end
      # verify the required parameter 'club_uid' is set
      if @api_client.config.client_side_validation && club_uid.nil?
        fail ArgumentError, "Missing the required parameter 'club_uid' when calling ClubMembershipApi.join_club_join_club_async"
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling ClubMembershipApi.join_club_join_club_async"
      end
      # verify the required parameter 'expiration_date' is set
      if @api_client.config.client_side_validation && expiration_date.nil?
        fail ArgumentError, "Missing the required parameter 'expiration_date' when calling ClubMembershipApi.join_club_join_club_async"
      end
      # verify the required parameter 'created' is set
      if @api_client.config.client_side_validation && created.nil?
        fail ArgumentError, "Missing the required parameter 'created' when calling ClubMembershipApi.join_club_join_club_async"
      end
      # verify the required parameter 'created_local' is set
      if @api_client.config.client_side_validation && created_local.nil?
        fail ArgumentError, "Missing the required parameter 'created_local' when calling ClubMembershipApi.join_club_join_club_async"
      end
      # verify the required parameter 'sponsor_uid' is set
      if @api_client.config.client_side_validation && sponsor_uid.nil?
        fail ArgumentError, "Missing the required parameter 'sponsor_uid' when calling ClubMembershipApi.join_club_join_club_async"
      end
      # verify the required parameter 'referral_uid' is set
      if @api_client.config.client_side_validation && referral_uid.nil?
        fail ArgumentError, "Missing the required parameter 'referral_uid' when calling ClubMembershipApi.join_club_join_club_async"
      end
      # verify the required parameter 'transaction_uid' is set
      if @api_client.config.client_side_validation && transaction_uid.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_uid' when calling ClubMembershipApi.join_club_join_club_async"
      end
      # verify the required parameter 'transaction_external_id' is set
      if @api_client.config.client_side_validation && transaction_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_external_id' when calling ClubMembershipApi.join_club_join_club_async"
      end
      # verify the required parameter 'fulfillment' is set
      if @api_client.config.client_side_validation && fulfillment.nil?
        fail ArgumentError, "Missing the required parameter 'fulfillment' when calling ClubMembershipApi.join_club_join_club_async"
      end
      # verify the required parameter 'payment' is set
      if @api_client.config.client_side_validation && payment.nil?
        fail ArgumentError, "Missing the required parameter 'payment' when calling ClubMembershipApi.join_club_join_club_async"
      end
      # verify the required parameter 'auto_billing_day' is set
      if @api_client.config.client_side_validation && auto_billing_day.nil?
        fail ArgumentError, "Missing the required parameter 'auto_billing_day' when calling ClubMembershipApi.join_club_join_club_async"
      end
      # verify the required parameter 'auto_billing_start_date' is set
      if @api_client.config.client_side_validation && auto_billing_start_date.nil?
        fail ArgumentError, "Missing the required parameter 'auto_billing_start_date' when calling ClubMembershipApi.join_club_join_club_async"
      end
      # verify the required parameter 'member_comment' is set
      if @api_client.config.client_side_validation && member_comment.nil?
        fail ArgumentError, "Missing the required parameter 'member_comment' when calling ClubMembershipApi.join_club_join_club_async"
      end
      # verify the required parameter 'product_preference_type' is set
      if @api_client.config.client_side_validation && product_preference_type.nil?
        fail ArgumentError, "Missing the required parameter 'product_preference_type' when calling ClubMembershipApi.join_club_join_club_async"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['Undefined', 'Default', 'Replace', 'Append'].include?(product_preference_type)
        fail ArgumentError, "invalid value for 'product_preference_type', must be one of Undefined, Default, Replace, Append"
      end
      # verify the required parameter 'product_preferences' is set
      if @api_client.config.client_side_validation && product_preferences.nil?
        fail ArgumentError, "Missing the required parameter 'product_preferences' when calling ClubMembershipApi.join_club_join_club_async"
      end
      # verify the required parameter 'custom_fields' is set
      if @api_client.config.client_side_validation && custom_fields.nil?
        fail ArgumentError, "Missing the required parameter 'custom_fields' when calling ClubMembershipApi.join_club_join_club_async"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling ClubMembershipApi.join_club_join_club_async"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling ClubMembershipApi.join_club_join_club_async"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling ClubMembershipApi.join_club_join_club_async"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling ClubMembershipApi.join_club_join_club_async"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling ClubMembershipApi.join_club_join_club_async"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling ClubMembershipApi.join_club_join_club_async"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling ClubMembershipApi.join_club_join_club_async"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling ClubMembershipApi.join_club_join_club_async"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling ClubMembershipApi.join_club_join_club_async"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling ClubMembershipApi.join_club_join_club_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling ClubMembershipApi.join_club_join_club_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/clubs/commands/joins'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CustomerUid'] = customer_uid
      form_params['ClubUid'] = club_uid
      form_params['StartDate'] = start_date
      form_params['ExpirationDate'] = expiration_date
      form_params['Created'] = created
      form_params['CreatedLocal'] = created_local
      form_params['SponsorUid'] = sponsor_uid
      form_params['ReferralUid'] = referral_uid
      form_params['TransactionUid'] = transaction_uid
      form_params['TransactionExternalId'] = transaction_external_id
      form_params['Fulfillment'] = fulfillment
      form_params['Payment'] = payment
      form_params['AutoBillingDay'] = auto_billing_day
      form_params['AutoBillingStartDate'] = auto_billing_start_date
      form_params['MemberComment'] = member_comment
      form_params['ProductPreferenceType'] = product_preference_type
      form_params['ProductPreferences'] = @api_client.build_collection_param(product_preferences, :multi)
      form_params['CustomFields'] = custom_fields
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClubMembershipApi#join_club_join_club_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseIEnumerableClubMembership]
    def query_club_memberships_get_club_memberships_async(access_key, opts = {})
      data, _status_code, _headers = query_club_memberships_get_club_memberships_async_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseIEnumerableClubMembership, Integer, Hash)>] ServerResponseIEnumerableClubMembership data, response status code and response headers
    def query_club_memberships_get_club_memberships_async_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClubMembershipApi.query_club_memberships_get_club_memberships_async ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling ClubMembershipApi.query_club_memberships_get_club_memberships_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/customers/clubmemberships'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIEnumerableClubMembership' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClubMembershipApi#query_club_memberships_get_club_memberships_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def renew_club_membership_renew_club_async(body, access_key, opts = {})
      data, _status_code, _headers = renew_club_membership_renew_club_async_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def renew_club_membership_renew_club_async_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClubMembershipApi.renew_club_membership_renew_club_async ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ClubMembershipApi.renew_club_membership_renew_club_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling ClubMembershipApi.renew_club_membership_renew_club_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/clubs/commands/renewals'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['MembershipUid'] = membership_uid
      form_params['CustomerUid'] = customer_uid
      form_params['ClubUid'] = club_uid
      form_params['ExpirationDate'] = expiration_date
      form_params['TransactionUid'] = transaction_uid
      form_params['TransactionExternalId'] = transaction_external_id
      form_params['ReferralUid'] = referral_uid
      form_params['SponsorUid'] = sponsor_uid
      form_params['Fulfillment'] = fulfillment
      form_params['Payment'] = payment
      form_params['AutoBillingDay'] = auto_billing_day
      form_params['AutoBillingStartDate'] = auto_billing_start_date
      form_params['MemberComment'] = member_comment
      form_params['ProductPreferenceType'] = product_preference_type
      form_params['ProductPreferences'] = @api_client.build_collection_param(product_preferences, :multi)
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClubMembershipApi#renew_club_membership_renew_club_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param membership_uid 
    # @param customer_uid 
    # @param club_uid 
    # @param expiration_date 
    # @param transaction_uid 
    # @param transaction_external_id 
    # @param referral_uid 
    # @param sponsor_uid 
    # @param fulfillment 
    # @param payment 
    # @param auto_billing_day 
    # @param auto_billing_start_date 
    # @param member_comment 
    # @param product_preference_type 
    # @param product_preferences 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def renew_club_membership_renew_club_async(membership_uid, customer_uid, club_uid, expiration_date, transaction_uid, transaction_external_id, referral_uid, sponsor_uid, fulfillment, payment, auto_billing_day, auto_billing_start_date, member_comment, product_preference_type, product_preferences, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = renew_club_membership_renew_club_async_with_http_info(membership_uid, customer_uid, club_uid, expiration_date, transaction_uid, transaction_external_id, referral_uid, sponsor_uid, fulfillment, payment, auto_billing_day, auto_billing_start_date, member_comment, product_preference_type, product_preferences, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param membership_uid 
    # @param customer_uid 
    # @param club_uid 
    # @param expiration_date 
    # @param transaction_uid 
    # @param transaction_external_id 
    # @param referral_uid 
    # @param sponsor_uid 
    # @param fulfillment 
    # @param payment 
    # @param auto_billing_day 
    # @param auto_billing_start_date 
    # @param member_comment 
    # @param product_preference_type 
    # @param product_preferences 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def renew_club_membership_renew_club_async_with_http_info(membership_uid, customer_uid, club_uid, expiration_date, transaction_uid, transaction_external_id, referral_uid, sponsor_uid, fulfillment, payment, auto_billing_day, auto_billing_start_date, member_comment, product_preference_type, product_preferences, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClubMembershipApi.renew_club_membership_renew_club_async ...'
      end
      # verify the required parameter 'membership_uid' is set
      if @api_client.config.client_side_validation && membership_uid.nil?
        fail ArgumentError, "Missing the required parameter 'membership_uid' when calling ClubMembershipApi.renew_club_membership_renew_club_async"
      end
      # verify the required parameter 'customer_uid' is set
      if @api_client.config.client_side_validation && customer_uid.nil?
        fail ArgumentError, "Missing the required parameter 'customer_uid' when calling ClubMembershipApi.renew_club_membership_renew_club_async"
      end
      # verify the required parameter 'club_uid' is set
      if @api_client.config.client_side_validation && club_uid.nil?
        fail ArgumentError, "Missing the required parameter 'club_uid' when calling ClubMembershipApi.renew_club_membership_renew_club_async"
      end
      # verify the required parameter 'expiration_date' is set
      if @api_client.config.client_side_validation && expiration_date.nil?
        fail ArgumentError, "Missing the required parameter 'expiration_date' when calling ClubMembershipApi.renew_club_membership_renew_club_async"
      end
      # verify the required parameter 'transaction_uid' is set
      if @api_client.config.client_side_validation && transaction_uid.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_uid' when calling ClubMembershipApi.renew_club_membership_renew_club_async"
      end
      # verify the required parameter 'transaction_external_id' is set
      if @api_client.config.client_side_validation && transaction_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_external_id' when calling ClubMembershipApi.renew_club_membership_renew_club_async"
      end
      # verify the required parameter 'referral_uid' is set
      if @api_client.config.client_side_validation && referral_uid.nil?
        fail ArgumentError, "Missing the required parameter 'referral_uid' when calling ClubMembershipApi.renew_club_membership_renew_club_async"
      end
      # verify the required parameter 'sponsor_uid' is set
      if @api_client.config.client_side_validation && sponsor_uid.nil?
        fail ArgumentError, "Missing the required parameter 'sponsor_uid' when calling ClubMembershipApi.renew_club_membership_renew_club_async"
      end
      # verify the required parameter 'fulfillment' is set
      if @api_client.config.client_side_validation && fulfillment.nil?
        fail ArgumentError, "Missing the required parameter 'fulfillment' when calling ClubMembershipApi.renew_club_membership_renew_club_async"
      end
      # verify the required parameter 'payment' is set
      if @api_client.config.client_side_validation && payment.nil?
        fail ArgumentError, "Missing the required parameter 'payment' when calling ClubMembershipApi.renew_club_membership_renew_club_async"
      end
      # verify the required parameter 'auto_billing_day' is set
      if @api_client.config.client_side_validation && auto_billing_day.nil?
        fail ArgumentError, "Missing the required parameter 'auto_billing_day' when calling ClubMembershipApi.renew_club_membership_renew_club_async"
      end
      # verify the required parameter 'auto_billing_start_date' is set
      if @api_client.config.client_side_validation && auto_billing_start_date.nil?
        fail ArgumentError, "Missing the required parameter 'auto_billing_start_date' when calling ClubMembershipApi.renew_club_membership_renew_club_async"
      end
      # verify the required parameter 'member_comment' is set
      if @api_client.config.client_side_validation && member_comment.nil?
        fail ArgumentError, "Missing the required parameter 'member_comment' when calling ClubMembershipApi.renew_club_membership_renew_club_async"
      end
      # verify the required parameter 'product_preference_type' is set
      if @api_client.config.client_side_validation && product_preference_type.nil?
        fail ArgumentError, "Missing the required parameter 'product_preference_type' when calling ClubMembershipApi.renew_club_membership_renew_club_async"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['Undefined', 'Default', 'Replace', 'Append'].include?(product_preference_type)
        fail ArgumentError, "invalid value for 'product_preference_type', must be one of Undefined, Default, Replace, Append"
      end
      # verify the required parameter 'product_preferences' is set
      if @api_client.config.client_side_validation && product_preferences.nil?
        fail ArgumentError, "Missing the required parameter 'product_preferences' when calling ClubMembershipApi.renew_club_membership_renew_club_async"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling ClubMembershipApi.renew_club_membership_renew_club_async"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling ClubMembershipApi.renew_club_membership_renew_club_async"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling ClubMembershipApi.renew_club_membership_renew_club_async"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling ClubMembershipApi.renew_club_membership_renew_club_async"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling ClubMembershipApi.renew_club_membership_renew_club_async"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling ClubMembershipApi.renew_club_membership_renew_club_async"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling ClubMembershipApi.renew_club_membership_renew_club_async"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling ClubMembershipApi.renew_club_membership_renew_club_async"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling ClubMembershipApi.renew_club_membership_renew_club_async"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling ClubMembershipApi.renew_club_membership_renew_club_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling ClubMembershipApi.renew_club_membership_renew_club_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/clubs/commands/renewals'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['MembershipUid'] = membership_uid
      form_params['CustomerUid'] = customer_uid
      form_params['ClubUid'] = club_uid
      form_params['ExpirationDate'] = expiration_date
      form_params['TransactionUid'] = transaction_uid
      form_params['TransactionExternalId'] = transaction_external_id
      form_params['ReferralUid'] = referral_uid
      form_params['SponsorUid'] = sponsor_uid
      form_params['Fulfillment'] = fulfillment
      form_params['Payment'] = payment
      form_params['AutoBillingDay'] = auto_billing_day
      form_params['AutoBillingStartDate'] = auto_billing_start_date
      form_params['MemberComment'] = member_comment
      form_params['ProductPreferenceType'] = product_preference_type
      form_params['ProductPreferences'] = @api_client.build_collection_param(product_preferences, :multi)
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClubMembershipApi#renew_club_membership_renew_club_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def reverse_club_membership_reverse_club_membeship_async(body, access_key, opts = {})
      data, _status_code, _headers = reverse_club_membership_reverse_club_membeship_async_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def reverse_club_membership_reverse_club_membeship_async_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClubMembershipApi.reverse_club_membership_reverse_club_membeship_async ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ClubMembershipApi.reverse_club_membership_reverse_club_membeship_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling ClubMembershipApi.reverse_club_membership_reverse_club_membeship_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/clubs/commands/reversals'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['CommandUid'] = command_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClubMembershipApi#reverse_club_membership_reverse_club_membeship_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param uid 
    # @param reference_number 
    # @param command_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def reverse_club_membership_reverse_club_membeship_async(uid, reference_number, command_uid, access_key, opts = {})
      data, _status_code, _headers = reverse_club_membership_reverse_club_membeship_async_with_http_info(uid, reference_number, command_uid, access_key, opts)
      data
    end

    # @param uid 
    # @param reference_number 
    # @param command_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def reverse_club_membership_reverse_club_membeship_async_with_http_info(uid, reference_number, command_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClubMembershipApi.reverse_club_membership_reverse_club_membeship_async ...'
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling ClubMembershipApi.reverse_club_membership_reverse_club_membeship_async"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling ClubMembershipApi.reverse_club_membership_reverse_club_membeship_async"
      end
      # verify the required parameter 'command_uid' is set
      if @api_client.config.client_side_validation && command_uid.nil?
        fail ArgumentError, "Missing the required parameter 'command_uid' when calling ClubMembershipApi.reverse_club_membership_reverse_club_membeship_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling ClubMembershipApi.reverse_club_membership_reverse_club_membeship_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/clubs/commands/reversals'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['CommandUid'] = command_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClubMembershipApi#reverse_club_membership_reverse_club_membeship_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def void_club_membership_void_loyalty_points_async(body, access_key, opts = {})
      data, _status_code, _headers = void_club_membership_void_loyalty_points_async_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def void_club_membership_void_loyalty_points_async_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClubMembershipApi.void_club_membership_void_loyalty_points_async ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ClubMembershipApi.void_club_membership_void_loyalty_points_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling ClubMembershipApi.void_club_membership_void_loyalty_points_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/clubs/commands/voids'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['TransactionUid'] = transaction_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClubMembershipApi#void_club_membership_void_loyalty_points_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param uid 
    # @param reference_number 
    # @param transaction_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def void_club_membership_void_loyalty_points_async(uid, reference_number, transaction_uid, access_key, opts = {})
      data, _status_code, _headers = void_club_membership_void_loyalty_points_async_with_http_info(uid, reference_number, transaction_uid, access_key, opts)
      data
    end

    # @param uid 
    # @param reference_number 
    # @param transaction_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def void_club_membership_void_loyalty_points_async_with_http_info(uid, reference_number, transaction_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClubMembershipApi.void_club_membership_void_loyalty_points_async ...'
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling ClubMembershipApi.void_club_membership_void_loyalty_points_async"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling ClubMembershipApi.void_club_membership_void_loyalty_points_async"
      end
      # verify the required parameter 'transaction_uid' is set
      if @api_client.config.client_side_validation && transaction_uid.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_uid' when calling ClubMembershipApi.void_club_membership_void_loyalty_points_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling ClubMembershipApi.void_club_membership_void_loyalty_points_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/clubs/commands/voids'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['TransactionUid'] = transaction_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClubMembershipApi#void_club_membership_void_loyalty_points_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
