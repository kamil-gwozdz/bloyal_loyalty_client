=begin
#bLoyal.LoyaltyService

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module BloyalLoyaltyClient
  class CustomersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async(body, access_key, opts = {})
      data, _status_code, _headers = adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomersApi.adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/frequentbuyer/commands/adjustments'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CustomerUid'] = customer_uid
      form_params['CustomerExternalId'] = customer_external_id
      form_params['CustomerSourceExternalId'] = customer_source_external_id
      form_params['CustomerCode'] = customer_code
      form_params['RuleUid'] = rule_uid
      form_params['RuleCode'] = rule_code
      form_params['Quantity'] = quantity
      form_params['Comment'] = comment
      form_params['CreatedLocal'] = created_local
      form_params['Created'] = created
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param customer_uid 
    # @param customer_external_id 
    # @param customer_source_external_id 
    # @param customer_code 
    # @param rule_uid 
    # @param rule_code 
    # @param quantity 
    # @param comment 
    # @param created_local 
    # @param created 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async(customer_uid, customer_external_id, customer_source_external_id, customer_code, rule_uid, rule_code, quantity, comment, created_local, created, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async_with_http_info(customer_uid, customer_external_id, customer_source_external_id, customer_code, rule_uid, rule_code, quantity, comment, created_local, created, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param customer_uid 
    # @param customer_external_id 
    # @param customer_source_external_id 
    # @param customer_code 
    # @param rule_uid 
    # @param rule_code 
    # @param quantity 
    # @param comment 
    # @param created_local 
    # @param created 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async_with_http_info(customer_uid, customer_external_id, customer_source_external_id, customer_code, rule_uid, rule_code, quantity, comment, created_local, created, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async ...'
      end
      # verify the required parameter 'customer_uid' is set
      if @api_client.config.client_side_validation && customer_uid.nil?
        fail ArgumentError, "Missing the required parameter 'customer_uid' when calling CustomersApi.adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async"
      end
      # verify the required parameter 'customer_external_id' is set
      if @api_client.config.client_side_validation && customer_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_external_id' when calling CustomersApi.adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async"
      end
      # verify the required parameter 'customer_source_external_id' is set
      if @api_client.config.client_side_validation && customer_source_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_source_external_id' when calling CustomersApi.adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async"
      end
      # verify the required parameter 'customer_code' is set
      if @api_client.config.client_side_validation && customer_code.nil?
        fail ArgumentError, "Missing the required parameter 'customer_code' when calling CustomersApi.adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async"
      end
      # verify the required parameter 'rule_uid' is set
      if @api_client.config.client_side_validation && rule_uid.nil?
        fail ArgumentError, "Missing the required parameter 'rule_uid' when calling CustomersApi.adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async"
      end
      # verify the required parameter 'rule_code' is set
      if @api_client.config.client_side_validation && rule_code.nil?
        fail ArgumentError, "Missing the required parameter 'rule_code' when calling CustomersApi.adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async"
      end
      # verify the required parameter 'quantity' is set
      if @api_client.config.client_side_validation && quantity.nil?
        fail ArgumentError, "Missing the required parameter 'quantity' when calling CustomersApi.adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async"
      end
      # verify the required parameter 'comment' is set
      if @api_client.config.client_side_validation && comment.nil?
        fail ArgumentError, "Missing the required parameter 'comment' when calling CustomersApi.adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async"
      end
      # verify the required parameter 'created_local' is set
      if @api_client.config.client_side_validation && created_local.nil?
        fail ArgumentError, "Missing the required parameter 'created_local' when calling CustomersApi.adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async"
      end
      # verify the required parameter 'created' is set
      if @api_client.config.client_side_validation && created.nil?
        fail ArgumentError, "Missing the required parameter 'created' when calling CustomersApi.adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling CustomersApi.adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling CustomersApi.adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling CustomersApi.adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling CustomersApi.adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling CustomersApi.adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling CustomersApi.adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CustomersApi.adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling CustomersApi.adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling CustomersApi.adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling CustomersApi.adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/frequentbuyer/commands/adjustments'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CustomerUid'] = customer_uid
      form_params['CustomerExternalId'] = customer_external_id
      form_params['CustomerSourceExternalId'] = customer_source_external_id
      form_params['CustomerCode'] = customer_code
      form_params['RuleUid'] = rule_uid
      form_params['RuleCode'] = rule_code
      form_params['Quantity'] = quantity
      form_params['Comment'] = comment
      form_params['CreatedLocal'] = created_local
      form_params['Created'] = created
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#adjust_frequent_buyer_balance_adjust_frequent_buyer_balance_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseIListCustomerType]
    def customer_types_get_customer_types(access_key, uid, opts = {})
      data, _status_code, _headers = customer_types_get_customer_types_with_http_info(access_key, uid, opts)
      data
    end

    # @param access_key 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseIListCustomerType, Integer, Hash)>] ServerResponseIListCustomerType data, response status code and response headers
    def customer_types_get_customer_types_with_http_info(access_key, uid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.customer_types_get_customer_types ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.customer_types_get_customer_types"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CustomersApi.customer_types_get_customer_types"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/customertypes/{uid}'.sub('{' + 'accessKey' + '}', access_key.to_s).sub('{' + 'uid' + '}', uid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIListCustomerType' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#customer_types_get_customer_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def customers_update_external_reference_async(body, access_key, opts = {})
      data, _status_code, _headers = customers_update_external_reference_async_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def customers_update_external_reference_async_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.customers_update_external_reference_async ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomersApi.customers_update_external_reference_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.customers_update_external_reference_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/customers/ExternalReferences'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CustomerUid'] = customer_uid
      form_params['ExternalId'] = external_id
      form_params['Verified'] = verified
      form_params['Uid'] = uid
      form_params['Created'] = created
      form_params['Status'] = status
      form_params['StatusMessage'] = status_message
      form_params['RetryCount'] = retry_count
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['ReferenceNumber'] = reference_number

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'Object' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#customers_update_external_reference_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param customer_uid 
    # @param external_id 
    # @param verified 
    # @param uid 
    # @param created 
    # @param status 
    # @param status_message 
    # @param retry_count 
    # @param system_uid 
    # @param connector_uid 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param reference_number 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def customers_update_external_reference_async(customer_uid, external_id, verified, uid, created, status, status_message, retry_count, system_uid, connector_uid, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, reference_number, access_key, opts = {})
      data, _status_code, _headers = customers_update_external_reference_async_with_http_info(customer_uid, external_id, verified, uid, created, status, status_message, retry_count, system_uid, connector_uid, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, reference_number, access_key, opts)
      data
    end

    # @param customer_uid 
    # @param external_id 
    # @param verified 
    # @param uid 
    # @param created 
    # @param status 
    # @param status_message 
    # @param retry_count 
    # @param system_uid 
    # @param connector_uid 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param reference_number 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def customers_update_external_reference_async_with_http_info(customer_uid, external_id, verified, uid, created, status, status_message, retry_count, system_uid, connector_uid, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, reference_number, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.customers_update_external_reference_async ...'
      end
      # verify the required parameter 'customer_uid' is set
      if @api_client.config.client_side_validation && customer_uid.nil?
        fail ArgumentError, "Missing the required parameter 'customer_uid' when calling CustomersApi.customers_update_external_reference_async"
      end
      # verify the required parameter 'external_id' is set
      if @api_client.config.client_side_validation && external_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_id' when calling CustomersApi.customers_update_external_reference_async"
      end
      # verify the required parameter 'verified' is set
      if @api_client.config.client_side_validation && verified.nil?
        fail ArgumentError, "Missing the required parameter 'verified' when calling CustomersApi.customers_update_external_reference_async"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CustomersApi.customers_update_external_reference_async"
      end
      # verify the required parameter 'created' is set
      if @api_client.config.client_side_validation && created.nil?
        fail ArgumentError, "Missing the required parameter 'created' when calling CustomersApi.customers_update_external_reference_async"
      end
      # verify the required parameter 'status' is set
      if @api_client.config.client_side_validation && status.nil?
        fail ArgumentError, "Missing the required parameter 'status' when calling CustomersApi.customers_update_external_reference_async"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['Pending', 'Succeeded', 'Failed', 'Reversed', 'Processing'].include?(status)
        fail ArgumentError, "invalid value for 'status', must be one of Pending, Succeeded, Failed, Reversed, Processing"
      end
      # verify the required parameter 'status_message' is set
      if @api_client.config.client_side_validation && status_message.nil?
        fail ArgumentError, "Missing the required parameter 'status_message' when calling CustomersApi.customers_update_external_reference_async"
      end
      # verify the required parameter 'retry_count' is set
      if @api_client.config.client_side_validation && retry_count.nil?
        fail ArgumentError, "Missing the required parameter 'retry_count' when calling CustomersApi.customers_update_external_reference_async"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling CustomersApi.customers_update_external_reference_async"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling CustomersApi.customers_update_external_reference_async"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling CustomersApi.customers_update_external_reference_async"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling CustomersApi.customers_update_external_reference_async"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling CustomersApi.customers_update_external_reference_async"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling CustomersApi.customers_update_external_reference_async"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling CustomersApi.customers_update_external_reference_async"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling CustomersApi.customers_update_external_reference_async"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling CustomersApi.customers_update_external_reference_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.customers_update_external_reference_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/customers/ExternalReferences'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CustomerUid'] = customer_uid
      form_params['ExternalId'] = external_id
      form_params['Verified'] = verified
      form_params['Uid'] = uid
      form_params['Created'] = created
      form_params['Status'] = status
      form_params['StatusMessage'] = status_message
      form_params['RetryCount'] = retry_count
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['ReferenceNumber'] = reference_number

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'Object' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#customers_update_external_reference_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponse]
    def delete_payment_method_save_address(login_domain, device_code, session_key, uid, opts = {})
      data, _status_code, _headers = delete_payment_method_save_address_with_http_info(login_domain, device_code, session_key, uid, opts)
      data
    end

    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponse, Integer, Hash)>] ServerResponse data, response status code and response headers
    def delete_payment_method_save_address_with_http_info(login_domain, device_code, session_key, uid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.delete_payment_method_save_address ...'
      end
      # verify the required parameter 'login_domain' is set
      if @api_client.config.client_side_validation && login_domain.nil?
        fail ArgumentError, "Missing the required parameter 'login_domain' when calling CustomersApi.delete_payment_method_save_address"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling CustomersApi.delete_payment_method_save_address"
      end
      # verify the required parameter 'session_key' is set
      if @api_client.config.client_side_validation && session_key.nil?
        fail ArgumentError, "Missing the required parameter 'session_key' when calling CustomersApi.delete_payment_method_save_address"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CustomersApi.delete_payment_method_save_address"
      end
      # resource path
      local_var_path = '/api/v4/{loginDomain}/{deviceCode}/sessions/{sessionKey}/paymentmethods/{uid}'.sub('{' + 'loginDomain' + '}', login_domain.to_s).sub('{' + 'deviceCode' + '}', device_code.to_s).sub('{' + 'sessionKey' + '}', session_key.to_s).sub('{' + 'uid' + '}', uid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#delete_payment_method_save_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseFrequentBuyerProgram]
    def frequent_buyer_get_programs_async(access_key, uid, opts = {})
      data, _status_code, _headers = frequent_buyer_get_programs_async_with_http_info(access_key, uid, opts)
      data
    end

    # @param access_key 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseFrequentBuyerProgram, Integer, Hash)>] ServerResponseFrequentBuyerProgram data, response status code and response headers
    def frequent_buyer_get_programs_async_with_http_info(access_key, uid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.frequent_buyer_get_programs_async ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.frequent_buyer_get_programs_async"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CustomersApi.frequent_buyer_get_programs_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/frequentbuyerprograms/{uid}'.sub('{' + 'accessKey' + '}', access_key.to_s).sub('{' + 'uid' + '}', uid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseFrequentBuyerProgram' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#frequent_buyer_get_programs_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :uid 
    # @return [ServerResponseCoupon]
    def get_awarded_customer_coupons(access_key, opts = {})
      data, _status_code, _headers = get_awarded_customer_coupons_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :uid 
    # @return [Array<(ServerResponseCoupon, Integer, Hash)>] ServerResponseCoupon data, response status code and response headers
    def get_awarded_customer_coupons_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.get_awarded_customer_coupons ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.get_awarded_customer_coupons"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/customers/awardedcoupons'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'uid'] = opts[:'uid'] if !opts[:'uid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseCoupon' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#get_awarded_customer_coupons\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCustomer]
    def get_customer(access_key, uid, opts = {})
      data, _status_code, _headers = get_customer_with_http_info(access_key, uid, opts)
      data
    end

    # @param access_key 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCustomer, Integer, Hash)>] ServerResponseCustomer data, response status code and response headers
    def get_customer_with_http_info(access_key, uid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.get_customer ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.get_customer"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CustomersApi.get_customer"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/customers/{uid}'.sub('{' + 'accessKey' + '}', access_key.to_s).sub('{' + 'uid' + '}', uid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseCustomer' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#get_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :uid 
    # @return [ServerResponseIEnumerableCoupon]
    def get_customer_available_coupons_get_available_coupons_async(access_key, opts = {})
      data, _status_code, _headers = get_customer_available_coupons_get_available_coupons_async_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :uid 
    # @return [Array<(ServerResponseIEnumerableCoupon, Integer, Hash)>] ServerResponseIEnumerableCoupon data, response status code and response headers
    def get_customer_available_coupons_get_available_coupons_async_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.get_customer_available_coupons_get_available_coupons_async ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.get_customer_available_coupons_get_available_coupons_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/customers/availablecoupons'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'uid'] = opts[:'uid'] if !opts[:'uid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIEnumerableCoupon' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#get_customer_available_coupons_get_available_coupons_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseIListFrequentBuyerBalance]
    def get_customer_frequent_buyer_balances(access_key, uid, opts = {})
      data, _status_code, _headers = get_customer_frequent_buyer_balances_with_http_info(access_key, uid, opts)
      data
    end

    # @param access_key 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseIListFrequentBuyerBalance, Integer, Hash)>] ServerResponseIListFrequentBuyerBalance data, response status code and response headers
    def get_customer_frequent_buyer_balances_with_http_info(access_key, uid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.get_customer_frequent_buyer_balances ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.get_customer_frequent_buyer_balances"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CustomersApi.get_customer_frequent_buyer_balances"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/customers/frequentbuyerbalances'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'uid'] = uid

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIListFrequentBuyerBalance' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#get_customer_frequent_buyer_balances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customer_uid 
    # @return [ServerResponseCustomerRegisteredCards]
    def get_registered_cards(access_key, opts = {})
      data, _status_code, _headers = get_registered_cards_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customer_uid 
    # @return [Array<(ServerResponseCustomerRegisteredCards, Integer, Hash)>] ServerResponseCustomerRegisteredCards data, response status code and response headers
    def get_registered_cards_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.get_registered_cards ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.get_registered_cards"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/LoyaltyEnabledCards/RegisteredCards'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'customerUid'] = opts[:'customer_uid'] if !opts[:'customer_uid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseCustomerRegisteredCards' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#get_registered_cards\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponsePaymentMethod]
    def query_payment_method_get_payment_methods_async(access_key, uid, opts = {})
      data, _status_code, _headers = query_payment_method_get_payment_methods_async_with_http_info(access_key, uid, opts)
      data
    end

    # @param access_key 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponsePaymentMethod, Integer, Hash)>] ServerResponsePaymentMethod data, response status code and response headers
    def query_payment_method_get_payment_methods_async_with_http_info(access_key, uid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.query_payment_method_get_payment_methods_async ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.query_payment_method_get_payment_methods_async"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CustomersApi.query_payment_method_get_payment_methods_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/paymentmethods/{uid}'.sub('{' + 'accessKey' + '}', access_key.to_s).sub('{' + 'uid' + '}', uid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponsePaymentMethod' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#query_payment_method_get_payment_methods_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseIEnumerablePaymentMethod]
    def query_payment_methods_get_payment_methods_async(access_key, opts = {})
      data, _status_code, _headers = query_payment_methods_get_payment_methods_async_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseIEnumerablePaymentMethod, Integer, Hash)>] ServerResponseIEnumerablePaymentMethod data, response status code and response headers
    def query_payment_methods_get_payment_methods_async_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.query_payment_methods_get_payment_methods_async ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.query_payment_methods_get_payment_methods_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/customers/paymentmethods'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIEnumerablePaymentMethod' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#query_payment_methods_get_payment_methods_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseShippingAddress]
    def query_shipping_address_get_shipping_addresses_async(access_key, uid, opts = {})
      data, _status_code, _headers = query_shipping_address_get_shipping_addresses_async_with_http_info(access_key, uid, opts)
      data
    end

    # @param access_key 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseShippingAddress, Integer, Hash)>] ServerResponseShippingAddress data, response status code and response headers
    def query_shipping_address_get_shipping_addresses_async_with_http_info(access_key, uid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.query_shipping_address_get_shipping_addresses_async ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.query_shipping_address_get_shipping_addresses_async"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CustomersApi.query_shipping_address_get_shipping_addresses_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/shippingaddresses/{uid}'.sub('{' + 'accessKey' + '}', access_key.to_s).sub('{' + 'uid' + '}', uid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseShippingAddress' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#query_shipping_address_get_shipping_addresses_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseIEnumerableShippingAddress]
    def query_shipping_addresses_get_shipping_addresses_async(access_key, opts = {})
      data, _status_code, _headers = query_shipping_addresses_get_shipping_addresses_async_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseIEnumerableShippingAddress, Integer, Hash)>] ServerResponseIEnumerableShippingAddress data, response status code and response headers
    def query_shipping_addresses_get_shipping_addresses_async_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.query_shipping_addresses_get_shipping_addresses_async ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.query_shipping_addresses_get_shipping_addresses_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/customers/shippingaddresses'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIEnumerableShippingAddress' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#query_shipping_addresses_get_shipping_addresses_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponse]
    def redeem_coupons(body, access_key, opts = {})
      data, _status_code, _headers = redeem_coupons_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponse, Integer, Hash)>] ServerResponse data, response status code and response headers
    def redeem_coupons_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.redeem_coupons ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomersApi.redeem_coupons"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.redeem_coupons"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/coupons/commands/redeem'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['Uid'] = uid
      form_params['CustomerUid'] = customer_uid
      form_params['CustomerExternalId'] = customer_external_id
      form_params['CustomerCode'] = customer_code
      form_params['CouponUid'] = coupon_uid
      form_params['CouponCode'] = coupon_code
      form_params['Quantity'] = quantity

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#redeem_coupons\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param uid 
    # @param customer_uid 
    # @param customer_external_id 
    # @param customer_code 
    # @param coupon_uid 
    # @param coupon_code 
    # @param quantity 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponse]
    def redeem_coupons(uid, customer_uid, customer_external_id, customer_code, coupon_uid, coupon_code, quantity, access_key, opts = {})
      data, _status_code, _headers = redeem_coupons_with_http_info(uid, customer_uid, customer_external_id, customer_code, coupon_uid, coupon_code, quantity, access_key, opts)
      data
    end

    # @param uid 
    # @param customer_uid 
    # @param customer_external_id 
    # @param customer_code 
    # @param coupon_uid 
    # @param coupon_code 
    # @param quantity 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponse, Integer, Hash)>] ServerResponse data, response status code and response headers
    def redeem_coupons_with_http_info(uid, customer_uid, customer_external_id, customer_code, coupon_uid, coupon_code, quantity, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.redeem_coupons ...'
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CustomersApi.redeem_coupons"
      end
      # verify the required parameter 'customer_uid' is set
      if @api_client.config.client_side_validation && customer_uid.nil?
        fail ArgumentError, "Missing the required parameter 'customer_uid' when calling CustomersApi.redeem_coupons"
      end
      # verify the required parameter 'customer_external_id' is set
      if @api_client.config.client_side_validation && customer_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_external_id' when calling CustomersApi.redeem_coupons"
      end
      # verify the required parameter 'customer_code' is set
      if @api_client.config.client_side_validation && customer_code.nil?
        fail ArgumentError, "Missing the required parameter 'customer_code' when calling CustomersApi.redeem_coupons"
      end
      # verify the required parameter 'coupon_uid' is set
      if @api_client.config.client_side_validation && coupon_uid.nil?
        fail ArgumentError, "Missing the required parameter 'coupon_uid' when calling CustomersApi.redeem_coupons"
      end
      # verify the required parameter 'coupon_code' is set
      if @api_client.config.client_side_validation && coupon_code.nil?
        fail ArgumentError, "Missing the required parameter 'coupon_code' when calling CustomersApi.redeem_coupons"
      end
      # verify the required parameter 'quantity' is set
      if @api_client.config.client_side_validation && quantity.nil?
        fail ArgumentError, "Missing the required parameter 'quantity' when calling CustomersApi.redeem_coupons"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.redeem_coupons"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/coupons/commands/redeem'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['Uid'] = uid
      form_params['CustomerUid'] = customer_uid
      form_params['CustomerExternalId'] = customer_external_id
      form_params['CustomerCode'] = customer_code
      form_params['CouponUid'] = coupon_uid
      form_params['CouponCode'] = coupon_code
      form_params['Quantity'] = quantity

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#redeem_coupons\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :quick_search 
    # @option opts [String] :customer_token 
    # @option opts [String] :search_customer_external_id 
    # @option opts [String] :search_customer_first_name2 
    # @option opts [String] :search_customer_last_name2 
    # @option opts [BOOLEAN] :search_customer_address_modified 
    # @option opts [BOOLEAN] :search_customer_address_validated 
    # @option opts [String] :search_customer_company_name 
    # @option opts [String] :search_customer_phone1 
    # @option opts [String] :search_customer_phone2 
    # @option opts [String] :search_customer_mobile_phone 
    # @option opts [String] :search_customer_fax_number 
    # @option opts [String] :search_customer_email_address 
    # @option opts [String] :search_customer_facebook_id 
    # @option opts [String] :search_customer_twitter_id 
    # @option opts [String] :search_customer_mobile_device_id 
    # @option opts [BOOLEAN] :search_customer_loyalty_redemption_disabled 
    # @option opts [BOOLEAN] :search_customer_loyalty_accrual_disabled 
    # @option opts [String] :search_customer_loyalty_card_number 
    # @option opts [Integer] :search_customer_current_loyalty_points 
    # @option opts [Float] :search_customer_current_loyalty_currency 
    # @option opts [BOOLEAN] :search_customer_edit_at_pos 
    # @option opts [BOOLEAN] :search_customer_web_account 
    # @option opts [BOOLEAN] :search_customer_verified 
    # @option opts [BOOLEAN] :search_customer_tax_exempt 
    # @option opts [DateTime] :search_customer_birth_date 
    # @option opts [Array<Object>] :search_customer_loyalty_points_accounts 
    # @option opts [Array<Object>] :search_customer_loyalty_currency_accounts 
    # @option opts [String] :search_customer_type_uid 
    # @option opts [String] :search_customer_type_external_id 
    # @option opts [String] :search_customer_type_code 
    # @option opts [String] :search_customer_type_name 
    # @option opts [String] :search_customer_price_level_uid 
    # @option opts [String] :search_customer_price_level_code 
    # @option opts [String] :search_customer_price_level_name 
    # @option opts [Integer] :search_customer_transaction_count 
    # @option opts [Float] :search_customer_total_sales 
    # @option opts [Array<Object>] :search_customer_club_memberships 
    # @option opts [Array<Object>] :search_customer_subscriber_group_memberships 
    # @option opts [Array<Object>] :search_customer_loyaltyt_program_memberships 
    # @option opts [Array<Object>] :search_customer_loyalty_program_memberships 
    # @option opts [String] :search_customer_no_email 
    # @option opts [String] :search_customer_no_text_messages 
    # @option opts [String] :search_customer_salutation 
    # @option opts [String] :search_customer_parent_customer_uid 
    # @option opts [String] :search_customer_parent_customer_code 
    # @option opts [String] :search_customer_parent_external_id 
    # @option opts [String] :search_customer_referral_customer1_uid 
    # @option opts [String] :search_customer_referral_customer1_code 
    # @option opts [String] :search_customer_referral_customer2_uid 
    # @option opts [String] :search_customer_referral_customer2_code 
    # @option opts [Integer] :search_customer_alert_count 
    # @option opts [DateTime] :search_customer_created 
    # @option opts [DateTime] :search_customer_created_local 
    # @option opts [String] :search_customer_signup_channel_uid 
    # @option opts [String] :search_customer_signup_store_uid 
    # @option opts [String] :search_customer_signup_store_code 
    # @option opts [String] :search_customer_signup_store_external_id 
    # @option opts [Integer] :search_customer_id 
    # @option opts [String] :search_customer_uid 
    # @option opts [String] :search_customer_code 
    # @option opts [String] :search_customer_first_name 
    # @option opts [String] :search_customer_last_name 
    # @option opts [Object] :search_customer_custom_fields 
    # @return [ServerResponseCustomer]
    def resolve_customer(access_key, opts = {})
      data, _status_code, _headers = resolve_customer_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :quick_search 
    # @option opts [String] :customer_token 
    # @option opts [String] :search_customer_external_id 
    # @option opts [String] :search_customer_first_name2 
    # @option opts [String] :search_customer_last_name2 
    # @option opts [BOOLEAN] :search_customer_address_modified 
    # @option opts [BOOLEAN] :search_customer_address_validated 
    # @option opts [String] :search_customer_company_name 
    # @option opts [String] :search_customer_phone1 
    # @option opts [String] :search_customer_phone2 
    # @option opts [String] :search_customer_mobile_phone 
    # @option opts [String] :search_customer_fax_number 
    # @option opts [String] :search_customer_email_address 
    # @option opts [String] :search_customer_facebook_id 
    # @option opts [String] :search_customer_twitter_id 
    # @option opts [String] :search_customer_mobile_device_id 
    # @option opts [BOOLEAN] :search_customer_loyalty_redemption_disabled 
    # @option opts [BOOLEAN] :search_customer_loyalty_accrual_disabled 
    # @option opts [String] :search_customer_loyalty_card_number 
    # @option opts [Integer] :search_customer_current_loyalty_points 
    # @option opts [Float] :search_customer_current_loyalty_currency 
    # @option opts [BOOLEAN] :search_customer_edit_at_pos 
    # @option opts [BOOLEAN] :search_customer_web_account 
    # @option opts [BOOLEAN] :search_customer_verified 
    # @option opts [BOOLEAN] :search_customer_tax_exempt 
    # @option opts [DateTime] :search_customer_birth_date 
    # @option opts [Array<Object>] :search_customer_loyalty_points_accounts 
    # @option opts [Array<Object>] :search_customer_loyalty_currency_accounts 
    # @option opts [String] :search_customer_type_uid 
    # @option opts [String] :search_customer_type_external_id 
    # @option opts [String] :search_customer_type_code 
    # @option opts [String] :search_customer_type_name 
    # @option opts [String] :search_customer_price_level_uid 
    # @option opts [String] :search_customer_price_level_code 
    # @option opts [String] :search_customer_price_level_name 
    # @option opts [Integer] :search_customer_transaction_count 
    # @option opts [Float] :search_customer_total_sales 
    # @option opts [Array<Object>] :search_customer_club_memberships 
    # @option opts [Array<Object>] :search_customer_subscriber_group_memberships 
    # @option opts [Array<Object>] :search_customer_loyaltyt_program_memberships 
    # @option opts [Array<Object>] :search_customer_loyalty_program_memberships 
    # @option opts [String] :search_customer_no_email 
    # @option opts [String] :search_customer_no_text_messages 
    # @option opts [String] :search_customer_salutation 
    # @option opts [String] :search_customer_parent_customer_uid 
    # @option opts [String] :search_customer_parent_customer_code 
    # @option opts [String] :search_customer_parent_external_id 
    # @option opts [String] :search_customer_referral_customer1_uid 
    # @option opts [String] :search_customer_referral_customer1_code 
    # @option opts [String] :search_customer_referral_customer2_uid 
    # @option opts [String] :search_customer_referral_customer2_code 
    # @option opts [Integer] :search_customer_alert_count 
    # @option opts [DateTime] :search_customer_created 
    # @option opts [DateTime] :search_customer_created_local 
    # @option opts [String] :search_customer_signup_channel_uid 
    # @option opts [String] :search_customer_signup_store_uid 
    # @option opts [String] :search_customer_signup_store_code 
    # @option opts [String] :search_customer_signup_store_external_id 
    # @option opts [Integer] :search_customer_id 
    # @option opts [String] :search_customer_uid 
    # @option opts [String] :search_customer_code 
    # @option opts [String] :search_customer_first_name 
    # @option opts [String] :search_customer_last_name 
    # @option opts [Object] :search_customer_custom_fields 
    # @return [Array<(ServerResponseCustomer, Integer, Hash)>] ServerResponseCustomer data, response status code and response headers
    def resolve_customer_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.resolve_customer ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.resolve_customer"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/resolvedcustomers'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'quickSearch'] = opts[:'quick_search'] if !opts[:'quick_search'].nil?
      query_params[:'customerToken'] = opts[:'customer_token'] if !opts[:'customer_token'].nil?
      query_params[:'searchCustomer.externalId'] = opts[:'search_customer_external_id'] if !opts[:'search_customer_external_id'].nil?
      query_params[:'searchCustomer.firstName2'] = opts[:'search_customer_first_name2'] if !opts[:'search_customer_first_name2'].nil?
      query_params[:'searchCustomer.lastName2'] = opts[:'search_customer_last_name2'] if !opts[:'search_customer_last_name2'].nil?
      query_params[:'searchCustomer.addressModified'] = opts[:'search_customer_address_modified'] if !opts[:'search_customer_address_modified'].nil?
      query_params[:'searchCustomer.addressValidated'] = opts[:'search_customer_address_validated'] if !opts[:'search_customer_address_validated'].nil?
      query_params[:'searchCustomer.companyName'] = opts[:'search_customer_company_name'] if !opts[:'search_customer_company_name'].nil?
      query_params[:'searchCustomer.phone1'] = opts[:'search_customer_phone1'] if !opts[:'search_customer_phone1'].nil?
      query_params[:'searchCustomer.phone2'] = opts[:'search_customer_phone2'] if !opts[:'search_customer_phone2'].nil?
      query_params[:'searchCustomer.mobilePhone'] = opts[:'search_customer_mobile_phone'] if !opts[:'search_customer_mobile_phone'].nil?
      query_params[:'searchCustomer.faxNumber'] = opts[:'search_customer_fax_number'] if !opts[:'search_customer_fax_number'].nil?
      query_params[:'searchCustomer.emailAddress'] = opts[:'search_customer_email_address'] if !opts[:'search_customer_email_address'].nil?
      query_params[:'searchCustomer.facebookId'] = opts[:'search_customer_facebook_id'] if !opts[:'search_customer_facebook_id'].nil?
      query_params[:'searchCustomer.twitterId'] = opts[:'search_customer_twitter_id'] if !opts[:'search_customer_twitter_id'].nil?
      query_params[:'searchCustomer.mobileDeviceId'] = opts[:'search_customer_mobile_device_id'] if !opts[:'search_customer_mobile_device_id'].nil?
      query_params[:'searchCustomer.loyaltyRedemptionDisabled'] = opts[:'search_customer_loyalty_redemption_disabled'] if !opts[:'search_customer_loyalty_redemption_disabled'].nil?
      query_params[:'searchCustomer.loyaltyAccrualDisabled'] = opts[:'search_customer_loyalty_accrual_disabled'] if !opts[:'search_customer_loyalty_accrual_disabled'].nil?
      query_params[:'searchCustomer.loyaltyCardNumber'] = opts[:'search_customer_loyalty_card_number'] if !opts[:'search_customer_loyalty_card_number'].nil?
      query_params[:'searchCustomer.currentLoyaltyPoints'] = opts[:'search_customer_current_loyalty_points'] if !opts[:'search_customer_current_loyalty_points'].nil?
      query_params[:'searchCustomer.currentLoyaltyCurrency'] = opts[:'search_customer_current_loyalty_currency'] if !opts[:'search_customer_current_loyalty_currency'].nil?
      query_params[:'searchCustomer.editAtPOS'] = opts[:'search_customer_edit_at_pos'] if !opts[:'search_customer_edit_at_pos'].nil?
      query_params[:'searchCustomer.webAccount'] = opts[:'search_customer_web_account'] if !opts[:'search_customer_web_account'].nil?
      query_params[:'searchCustomer.verified'] = opts[:'search_customer_verified'] if !opts[:'search_customer_verified'].nil?
      query_params[:'searchCustomer.taxExempt'] = opts[:'search_customer_tax_exempt'] if !opts[:'search_customer_tax_exempt'].nil?
      query_params[:'searchCustomer.birthDate'] = opts[:'search_customer_birth_date'] if !opts[:'search_customer_birth_date'].nil?
      query_params[:'searchCustomer.loyaltyPointsAccounts'] = @api_client.build_collection_param(opts[:'search_customer_loyalty_points_accounts'], :multi) if !opts[:'search_customer_loyalty_points_accounts'].nil?
      query_params[:'searchCustomer.loyaltyCurrencyAccounts'] = @api_client.build_collection_param(opts[:'search_customer_loyalty_currency_accounts'], :multi) if !opts[:'search_customer_loyalty_currency_accounts'].nil?
      query_params[:'searchCustomer.type.uid'] = opts[:'search_customer_type_uid'] if !opts[:'search_customer_type_uid'].nil?
      query_params[:'searchCustomer.type.externalId'] = opts[:'search_customer_type_external_id'] if !opts[:'search_customer_type_external_id'].nil?
      query_params[:'searchCustomer.type.code'] = opts[:'search_customer_type_code'] if !opts[:'search_customer_type_code'].nil?
      query_params[:'searchCustomer.type.name'] = opts[:'search_customer_type_name'] if !opts[:'search_customer_type_name'].nil?
      query_params[:'searchCustomer.priceLevel.uid'] = opts[:'search_customer_price_level_uid'] if !opts[:'search_customer_price_level_uid'].nil?
      query_params[:'searchCustomer.priceLevel.code'] = opts[:'search_customer_price_level_code'] if !opts[:'search_customer_price_level_code'].nil?
      query_params[:'searchCustomer.priceLevel.name'] = opts[:'search_customer_price_level_name'] if !opts[:'search_customer_price_level_name'].nil?
      query_params[:'searchCustomer.transactionCount'] = opts[:'search_customer_transaction_count'] if !opts[:'search_customer_transaction_count'].nil?
      query_params[:'searchCustomer.totalSales'] = opts[:'search_customer_total_sales'] if !opts[:'search_customer_total_sales'].nil?
      query_params[:'searchCustomer.clubMemberships'] = @api_client.build_collection_param(opts[:'search_customer_club_memberships'], :multi) if !opts[:'search_customer_club_memberships'].nil?
      query_params[:'searchCustomer.subscriberGroupMemberships'] = @api_client.build_collection_param(opts[:'search_customer_subscriber_group_memberships'], :multi) if !opts[:'search_customer_subscriber_group_memberships'].nil?
      query_params[:'searchCustomer.loyaltytProgramMemberships'] = @api_client.build_collection_param(opts[:'search_customer_loyaltyt_program_memberships'], :multi) if !opts[:'search_customer_loyaltyt_program_memberships'].nil?
      query_params[:'searchCustomer.loyaltyProgramMemberships'] = @api_client.build_collection_param(opts[:'search_customer_loyalty_program_memberships'], :multi) if !opts[:'search_customer_loyalty_program_memberships'].nil?
      query_params[:'searchCustomer.noEmail'] = opts[:'search_customer_no_email'] if !opts[:'search_customer_no_email'].nil?
      query_params[:'searchCustomer.noTextMessages'] = opts[:'search_customer_no_text_messages'] if !opts[:'search_customer_no_text_messages'].nil?
      query_params[:'searchCustomer.salutation'] = opts[:'search_customer_salutation'] if !opts[:'search_customer_salutation'].nil?
      query_params[:'searchCustomer.parentCustomerUid'] = opts[:'search_customer_parent_customer_uid'] if !opts[:'search_customer_parent_customer_uid'].nil?
      query_params[:'searchCustomer.parentCustomerCode'] = opts[:'search_customer_parent_customer_code'] if !opts[:'search_customer_parent_customer_code'].nil?
      query_params[:'searchCustomer.parentExternalId'] = opts[:'search_customer_parent_external_id'] if !opts[:'search_customer_parent_external_id'].nil?
      query_params[:'searchCustomer.referralCustomer1Uid'] = opts[:'search_customer_referral_customer1_uid'] if !opts[:'search_customer_referral_customer1_uid'].nil?
      query_params[:'searchCustomer.referralCustomer1Code'] = opts[:'search_customer_referral_customer1_code'] if !opts[:'search_customer_referral_customer1_code'].nil?
      query_params[:'searchCustomer.referralCustomer2Uid'] = opts[:'search_customer_referral_customer2_uid'] if !opts[:'search_customer_referral_customer2_uid'].nil?
      query_params[:'searchCustomer.referralCustomer2Code'] = opts[:'search_customer_referral_customer2_code'] if !opts[:'search_customer_referral_customer2_code'].nil?
      query_params[:'searchCustomer.alertCount'] = opts[:'search_customer_alert_count'] if !opts[:'search_customer_alert_count'].nil?
      query_params[:'searchCustomer.created'] = opts[:'search_customer_created'] if !opts[:'search_customer_created'].nil?
      query_params[:'searchCustomer.createdLocal'] = opts[:'search_customer_created_local'] if !opts[:'search_customer_created_local'].nil?
      query_params[:'searchCustomer.signupChannelUid'] = opts[:'search_customer_signup_channel_uid'] if !opts[:'search_customer_signup_channel_uid'].nil?
      query_params[:'searchCustomer.signupStoreUid'] = opts[:'search_customer_signup_store_uid'] if !opts[:'search_customer_signup_store_uid'].nil?
      query_params[:'searchCustomer.signupStoreCode'] = opts[:'search_customer_signup_store_code'] if !opts[:'search_customer_signup_store_code'].nil?
      query_params[:'searchCustomer.signupStoreExternalId'] = opts[:'search_customer_signup_store_external_id'] if !opts[:'search_customer_signup_store_external_id'].nil?
      query_params[:'searchCustomer.id'] = opts[:'search_customer_id'] if !opts[:'search_customer_id'].nil?
      query_params[:'searchCustomer.uid'] = opts[:'search_customer_uid'] if !opts[:'search_customer_uid'].nil?
      query_params[:'searchCustomer.code'] = opts[:'search_customer_code'] if !opts[:'search_customer_code'].nil?
      query_params[:'searchCustomer.firstName'] = opts[:'search_customer_first_name'] if !opts[:'search_customer_first_name'].nil?
      query_params[:'searchCustomer.lastName'] = opts[:'search_customer_last_name'] if !opts[:'search_customer_last_name'].nil?
      query_params[:'searchCustomer.customFields'] = opts[:'search_customer_custom_fields'] if !opts[:'search_customer_custom_fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseCustomer' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#resolve_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :quick_search 
    # @option opts [String] :customer_token 
    # @option opts [String] :search_customer_external_id 
    # @option opts [String] :search_customer_first_name2 
    # @option opts [String] :search_customer_last_name2 
    # @option opts [BOOLEAN] :search_customer_address_modified 
    # @option opts [BOOLEAN] :search_customer_address_validated 
    # @option opts [String] :search_customer_company_name 
    # @option opts [String] :search_customer_phone1 
    # @option opts [String] :search_customer_phone2 
    # @option opts [String] :search_customer_mobile_phone 
    # @option opts [String] :search_customer_fax_number 
    # @option opts [String] :search_customer_email_address 
    # @option opts [String] :search_customer_facebook_id 
    # @option opts [String] :search_customer_twitter_id 
    # @option opts [String] :search_customer_mobile_device_id 
    # @option opts [BOOLEAN] :search_customer_loyalty_redemption_disabled 
    # @option opts [BOOLEAN] :search_customer_loyalty_accrual_disabled 
    # @option opts [String] :search_customer_loyalty_card_number 
    # @option opts [Integer] :search_customer_current_loyalty_points 
    # @option opts [Float] :search_customer_current_loyalty_currency 
    # @option opts [BOOLEAN] :search_customer_edit_at_pos 
    # @option opts [BOOLEAN] :search_customer_web_account 
    # @option opts [BOOLEAN] :search_customer_verified 
    # @option opts [BOOLEAN] :search_customer_tax_exempt 
    # @option opts [DateTime] :search_customer_birth_date 
    # @option opts [Array<Object>] :search_customer_loyalty_points_accounts 
    # @option opts [Array<Object>] :search_customer_loyalty_currency_accounts 
    # @option opts [String] :search_customer_type_uid 
    # @option opts [String] :search_customer_type_external_id 
    # @option opts [String] :search_customer_type_code 
    # @option opts [String] :search_customer_type_name 
    # @option opts [String] :search_customer_price_level_uid 
    # @option opts [String] :search_customer_price_level_code 
    # @option opts [String] :search_customer_price_level_name 
    # @option opts [Integer] :search_customer_transaction_count 
    # @option opts [Float] :search_customer_total_sales 
    # @option opts [Array<Object>] :search_customer_club_memberships 
    # @option opts [Array<Object>] :search_customer_subscriber_group_memberships 
    # @option opts [Array<Object>] :search_customer_loyaltyt_program_memberships 
    # @option opts [Array<Object>] :search_customer_loyalty_program_memberships 
    # @option opts [String] :search_customer_no_email 
    # @option opts [String] :search_customer_no_text_messages 
    # @option opts [String] :search_customer_salutation 
    # @option opts [String] :search_customer_parent_customer_uid 
    # @option opts [String] :search_customer_parent_customer_code 
    # @option opts [String] :search_customer_parent_external_id 
    # @option opts [String] :search_customer_referral_customer1_uid 
    # @option opts [String] :search_customer_referral_customer1_code 
    # @option opts [String] :search_customer_referral_customer2_uid 
    # @option opts [String] :search_customer_referral_customer2_code 
    # @option opts [Integer] :search_customer_alert_count 
    # @option opts [DateTime] :search_customer_created 
    # @option opts [DateTime] :search_customer_created_local 
    # @option opts [String] :search_customer_signup_channel_uid 
    # @option opts [String] :search_customer_signup_store_uid 
    # @option opts [String] :search_customer_signup_store_code 
    # @option opts [String] :search_customer_signup_store_external_id 
    # @option opts [Integer] :search_customer_id 
    # @option opts [String] :search_customer_uid 
    # @option opts [String] :search_customer_code 
    # @option opts [String] :search_customer_first_name 
    # @option opts [String] :search_customer_last_name 
    # @option opts [Object] :search_customer_custom_fields 
    # @return [ServerResponseCustomerSession]
    def resolve_customer_session(access_key, opts = {})
      data, _status_code, _headers = resolve_customer_session_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :quick_search 
    # @option opts [String] :customer_token 
    # @option opts [String] :search_customer_external_id 
    # @option opts [String] :search_customer_first_name2 
    # @option opts [String] :search_customer_last_name2 
    # @option opts [BOOLEAN] :search_customer_address_modified 
    # @option opts [BOOLEAN] :search_customer_address_validated 
    # @option opts [String] :search_customer_company_name 
    # @option opts [String] :search_customer_phone1 
    # @option opts [String] :search_customer_phone2 
    # @option opts [String] :search_customer_mobile_phone 
    # @option opts [String] :search_customer_fax_number 
    # @option opts [String] :search_customer_email_address 
    # @option opts [String] :search_customer_facebook_id 
    # @option opts [String] :search_customer_twitter_id 
    # @option opts [String] :search_customer_mobile_device_id 
    # @option opts [BOOLEAN] :search_customer_loyalty_redemption_disabled 
    # @option opts [BOOLEAN] :search_customer_loyalty_accrual_disabled 
    # @option opts [String] :search_customer_loyalty_card_number 
    # @option opts [Integer] :search_customer_current_loyalty_points 
    # @option opts [Float] :search_customer_current_loyalty_currency 
    # @option opts [BOOLEAN] :search_customer_edit_at_pos 
    # @option opts [BOOLEAN] :search_customer_web_account 
    # @option opts [BOOLEAN] :search_customer_verified 
    # @option opts [BOOLEAN] :search_customer_tax_exempt 
    # @option opts [DateTime] :search_customer_birth_date 
    # @option opts [Array<Object>] :search_customer_loyalty_points_accounts 
    # @option opts [Array<Object>] :search_customer_loyalty_currency_accounts 
    # @option opts [String] :search_customer_type_uid 
    # @option opts [String] :search_customer_type_external_id 
    # @option opts [String] :search_customer_type_code 
    # @option opts [String] :search_customer_type_name 
    # @option opts [String] :search_customer_price_level_uid 
    # @option opts [String] :search_customer_price_level_code 
    # @option opts [String] :search_customer_price_level_name 
    # @option opts [Integer] :search_customer_transaction_count 
    # @option opts [Float] :search_customer_total_sales 
    # @option opts [Array<Object>] :search_customer_club_memberships 
    # @option opts [Array<Object>] :search_customer_subscriber_group_memberships 
    # @option opts [Array<Object>] :search_customer_loyaltyt_program_memberships 
    # @option opts [Array<Object>] :search_customer_loyalty_program_memberships 
    # @option opts [String] :search_customer_no_email 
    # @option opts [String] :search_customer_no_text_messages 
    # @option opts [String] :search_customer_salutation 
    # @option opts [String] :search_customer_parent_customer_uid 
    # @option opts [String] :search_customer_parent_customer_code 
    # @option opts [String] :search_customer_parent_external_id 
    # @option opts [String] :search_customer_referral_customer1_uid 
    # @option opts [String] :search_customer_referral_customer1_code 
    # @option opts [String] :search_customer_referral_customer2_uid 
    # @option opts [String] :search_customer_referral_customer2_code 
    # @option opts [Integer] :search_customer_alert_count 
    # @option opts [DateTime] :search_customer_created 
    # @option opts [DateTime] :search_customer_created_local 
    # @option opts [String] :search_customer_signup_channel_uid 
    # @option opts [String] :search_customer_signup_store_uid 
    # @option opts [String] :search_customer_signup_store_code 
    # @option opts [String] :search_customer_signup_store_external_id 
    # @option opts [Integer] :search_customer_id 
    # @option opts [String] :search_customer_uid 
    # @option opts [String] :search_customer_code 
    # @option opts [String] :search_customer_first_name 
    # @option opts [String] :search_customer_last_name 
    # @option opts [Object] :search_customer_custom_fields 
    # @return [Array<(ServerResponseCustomerSession, Integer, Hash)>] ServerResponseCustomerSession data, response status code and response headers
    def resolve_customer_session_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.resolve_customer_session ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.resolve_customer_session"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/resolvedcustomersession'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'quickSearch'] = opts[:'quick_search'] if !opts[:'quick_search'].nil?
      query_params[:'customerToken'] = opts[:'customer_token'] if !opts[:'customer_token'].nil?
      query_params[:'searchCustomer.externalId'] = opts[:'search_customer_external_id'] if !opts[:'search_customer_external_id'].nil?
      query_params[:'searchCustomer.firstName2'] = opts[:'search_customer_first_name2'] if !opts[:'search_customer_first_name2'].nil?
      query_params[:'searchCustomer.lastName2'] = opts[:'search_customer_last_name2'] if !opts[:'search_customer_last_name2'].nil?
      query_params[:'searchCustomer.addressModified'] = opts[:'search_customer_address_modified'] if !opts[:'search_customer_address_modified'].nil?
      query_params[:'searchCustomer.addressValidated'] = opts[:'search_customer_address_validated'] if !opts[:'search_customer_address_validated'].nil?
      query_params[:'searchCustomer.companyName'] = opts[:'search_customer_company_name'] if !opts[:'search_customer_company_name'].nil?
      query_params[:'searchCustomer.phone1'] = opts[:'search_customer_phone1'] if !opts[:'search_customer_phone1'].nil?
      query_params[:'searchCustomer.phone2'] = opts[:'search_customer_phone2'] if !opts[:'search_customer_phone2'].nil?
      query_params[:'searchCustomer.mobilePhone'] = opts[:'search_customer_mobile_phone'] if !opts[:'search_customer_mobile_phone'].nil?
      query_params[:'searchCustomer.faxNumber'] = opts[:'search_customer_fax_number'] if !opts[:'search_customer_fax_number'].nil?
      query_params[:'searchCustomer.emailAddress'] = opts[:'search_customer_email_address'] if !opts[:'search_customer_email_address'].nil?
      query_params[:'searchCustomer.facebookId'] = opts[:'search_customer_facebook_id'] if !opts[:'search_customer_facebook_id'].nil?
      query_params[:'searchCustomer.twitterId'] = opts[:'search_customer_twitter_id'] if !opts[:'search_customer_twitter_id'].nil?
      query_params[:'searchCustomer.mobileDeviceId'] = opts[:'search_customer_mobile_device_id'] if !opts[:'search_customer_mobile_device_id'].nil?
      query_params[:'searchCustomer.loyaltyRedemptionDisabled'] = opts[:'search_customer_loyalty_redemption_disabled'] if !opts[:'search_customer_loyalty_redemption_disabled'].nil?
      query_params[:'searchCustomer.loyaltyAccrualDisabled'] = opts[:'search_customer_loyalty_accrual_disabled'] if !opts[:'search_customer_loyalty_accrual_disabled'].nil?
      query_params[:'searchCustomer.loyaltyCardNumber'] = opts[:'search_customer_loyalty_card_number'] if !opts[:'search_customer_loyalty_card_number'].nil?
      query_params[:'searchCustomer.currentLoyaltyPoints'] = opts[:'search_customer_current_loyalty_points'] if !opts[:'search_customer_current_loyalty_points'].nil?
      query_params[:'searchCustomer.currentLoyaltyCurrency'] = opts[:'search_customer_current_loyalty_currency'] if !opts[:'search_customer_current_loyalty_currency'].nil?
      query_params[:'searchCustomer.editAtPOS'] = opts[:'search_customer_edit_at_pos'] if !opts[:'search_customer_edit_at_pos'].nil?
      query_params[:'searchCustomer.webAccount'] = opts[:'search_customer_web_account'] if !opts[:'search_customer_web_account'].nil?
      query_params[:'searchCustomer.verified'] = opts[:'search_customer_verified'] if !opts[:'search_customer_verified'].nil?
      query_params[:'searchCustomer.taxExempt'] = opts[:'search_customer_tax_exempt'] if !opts[:'search_customer_tax_exempt'].nil?
      query_params[:'searchCustomer.birthDate'] = opts[:'search_customer_birth_date'] if !opts[:'search_customer_birth_date'].nil?
      query_params[:'searchCustomer.loyaltyPointsAccounts'] = @api_client.build_collection_param(opts[:'search_customer_loyalty_points_accounts'], :multi) if !opts[:'search_customer_loyalty_points_accounts'].nil?
      query_params[:'searchCustomer.loyaltyCurrencyAccounts'] = @api_client.build_collection_param(opts[:'search_customer_loyalty_currency_accounts'], :multi) if !opts[:'search_customer_loyalty_currency_accounts'].nil?
      query_params[:'searchCustomer.type.uid'] = opts[:'search_customer_type_uid'] if !opts[:'search_customer_type_uid'].nil?
      query_params[:'searchCustomer.type.externalId'] = opts[:'search_customer_type_external_id'] if !opts[:'search_customer_type_external_id'].nil?
      query_params[:'searchCustomer.type.code'] = opts[:'search_customer_type_code'] if !opts[:'search_customer_type_code'].nil?
      query_params[:'searchCustomer.type.name'] = opts[:'search_customer_type_name'] if !opts[:'search_customer_type_name'].nil?
      query_params[:'searchCustomer.priceLevel.uid'] = opts[:'search_customer_price_level_uid'] if !opts[:'search_customer_price_level_uid'].nil?
      query_params[:'searchCustomer.priceLevel.code'] = opts[:'search_customer_price_level_code'] if !opts[:'search_customer_price_level_code'].nil?
      query_params[:'searchCustomer.priceLevel.name'] = opts[:'search_customer_price_level_name'] if !opts[:'search_customer_price_level_name'].nil?
      query_params[:'searchCustomer.transactionCount'] = opts[:'search_customer_transaction_count'] if !opts[:'search_customer_transaction_count'].nil?
      query_params[:'searchCustomer.totalSales'] = opts[:'search_customer_total_sales'] if !opts[:'search_customer_total_sales'].nil?
      query_params[:'searchCustomer.clubMemberships'] = @api_client.build_collection_param(opts[:'search_customer_club_memberships'], :multi) if !opts[:'search_customer_club_memberships'].nil?
      query_params[:'searchCustomer.subscriberGroupMemberships'] = @api_client.build_collection_param(opts[:'search_customer_subscriber_group_memberships'], :multi) if !opts[:'search_customer_subscriber_group_memberships'].nil?
      query_params[:'searchCustomer.loyaltytProgramMemberships'] = @api_client.build_collection_param(opts[:'search_customer_loyaltyt_program_memberships'], :multi) if !opts[:'search_customer_loyaltyt_program_memberships'].nil?
      query_params[:'searchCustomer.loyaltyProgramMemberships'] = @api_client.build_collection_param(opts[:'search_customer_loyalty_program_memberships'], :multi) if !opts[:'search_customer_loyalty_program_memberships'].nil?
      query_params[:'searchCustomer.noEmail'] = opts[:'search_customer_no_email'] if !opts[:'search_customer_no_email'].nil?
      query_params[:'searchCustomer.noTextMessages'] = opts[:'search_customer_no_text_messages'] if !opts[:'search_customer_no_text_messages'].nil?
      query_params[:'searchCustomer.salutation'] = opts[:'search_customer_salutation'] if !opts[:'search_customer_salutation'].nil?
      query_params[:'searchCustomer.parentCustomerUid'] = opts[:'search_customer_parent_customer_uid'] if !opts[:'search_customer_parent_customer_uid'].nil?
      query_params[:'searchCustomer.parentCustomerCode'] = opts[:'search_customer_parent_customer_code'] if !opts[:'search_customer_parent_customer_code'].nil?
      query_params[:'searchCustomer.parentExternalId'] = opts[:'search_customer_parent_external_id'] if !opts[:'search_customer_parent_external_id'].nil?
      query_params[:'searchCustomer.referralCustomer1Uid'] = opts[:'search_customer_referral_customer1_uid'] if !opts[:'search_customer_referral_customer1_uid'].nil?
      query_params[:'searchCustomer.referralCustomer1Code'] = opts[:'search_customer_referral_customer1_code'] if !opts[:'search_customer_referral_customer1_code'].nil?
      query_params[:'searchCustomer.referralCustomer2Uid'] = opts[:'search_customer_referral_customer2_uid'] if !opts[:'search_customer_referral_customer2_uid'].nil?
      query_params[:'searchCustomer.referralCustomer2Code'] = opts[:'search_customer_referral_customer2_code'] if !opts[:'search_customer_referral_customer2_code'].nil?
      query_params[:'searchCustomer.alertCount'] = opts[:'search_customer_alert_count'] if !opts[:'search_customer_alert_count'].nil?
      query_params[:'searchCustomer.created'] = opts[:'search_customer_created'] if !opts[:'search_customer_created'].nil?
      query_params[:'searchCustomer.createdLocal'] = opts[:'search_customer_created_local'] if !opts[:'search_customer_created_local'].nil?
      query_params[:'searchCustomer.signupChannelUid'] = opts[:'search_customer_signup_channel_uid'] if !opts[:'search_customer_signup_channel_uid'].nil?
      query_params[:'searchCustomer.signupStoreUid'] = opts[:'search_customer_signup_store_uid'] if !opts[:'search_customer_signup_store_uid'].nil?
      query_params[:'searchCustomer.signupStoreCode'] = opts[:'search_customer_signup_store_code'] if !opts[:'search_customer_signup_store_code'].nil?
      query_params[:'searchCustomer.signupStoreExternalId'] = opts[:'search_customer_signup_store_external_id'] if !opts[:'search_customer_signup_store_external_id'].nil?
      query_params[:'searchCustomer.id'] = opts[:'search_customer_id'] if !opts[:'search_customer_id'].nil?
      query_params[:'searchCustomer.uid'] = opts[:'search_customer_uid'] if !opts[:'search_customer_uid'].nil?
      query_params[:'searchCustomer.code'] = opts[:'search_customer_code'] if !opts[:'search_customer_code'].nil?
      query_params[:'searchCustomer.firstName'] = opts[:'search_customer_first_name'] if !opts[:'search_customer_first_name'].nil?
      query_params[:'searchCustomer.lastName'] = opts[:'search_customer_last_name'] if !opts[:'search_customer_last_name'].nil?
      query_params[:'searchCustomer.customFields'] = opts[:'search_customer_custom_fields'] if !opts[:'search_customer_custom_fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseCustomerSession' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#resolve_customer_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCustomer]
    def save_customer(body, access_key, opts = {})
      data, _status_code, _headers = save_customer_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCustomer, Integer, Hash)>] ServerResponseCustomer data, response status code and response headers
    def save_customer_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.save_customer ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomersApi.save_customer"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.save_customer"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/customers/commands/saves'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CustomerToken'] = customer_token
      form_params['Customer'] = customer
      form_params['ValidateAddress'] = validate_address
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCustomer' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#save_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param customer_token 
    # @param customer 
    # @param validate_address 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCustomer]
    def save_customer(customer_token, customer, validate_address, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = save_customer_with_http_info(customer_token, customer, validate_address, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param customer_token 
    # @param customer 
    # @param validate_address 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCustomer, Integer, Hash)>] ServerResponseCustomer data, response status code and response headers
    def save_customer_with_http_info(customer_token, customer, validate_address, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.save_customer ...'
      end
      # verify the required parameter 'customer_token' is set
      if @api_client.config.client_side_validation && customer_token.nil?
        fail ArgumentError, "Missing the required parameter 'customer_token' when calling CustomersApi.save_customer"
      end
      # verify the required parameter 'customer' is set
      if @api_client.config.client_side_validation && customer.nil?
        fail ArgumentError, "Missing the required parameter 'customer' when calling CustomersApi.save_customer"
      end
      # verify the required parameter 'validate_address' is set
      if @api_client.config.client_side_validation && validate_address.nil?
        fail ArgumentError, "Missing the required parameter 'validate_address' when calling CustomersApi.save_customer"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling CustomersApi.save_customer"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling CustomersApi.save_customer"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling CustomersApi.save_customer"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling CustomersApi.save_customer"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling CustomersApi.save_customer"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling CustomersApi.save_customer"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CustomersApi.save_customer"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling CustomersApi.save_customer"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling CustomersApi.save_customer"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling CustomersApi.save_customer"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.save_customer"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/customers/commands/saves'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CustomerToken'] = customer_token
      form_params['Customer'] = customer
      form_params['ValidateAddress'] = validate_address
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCustomer' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#save_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseSavePaymentMethodResponse]
    def save_legacy_payment_method_save_legacy_method_async(body, access_key, opts = {})
      data, _status_code, _headers = save_legacy_payment_method_save_legacy_method_async_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseSavePaymentMethodResponse, Integer, Hash)>] ServerResponseSavePaymentMethodResponse data, response status code and response headers
    def save_legacy_payment_method_save_legacy_method_async_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.save_legacy_payment_method_save_legacy_method_async ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomersApi.save_legacy_payment_method_save_legacy_method_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.save_legacy_payment_method_save_legacy_method_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/legacypaymentmethods/commands/save'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CustomerUid'] = customer_uid
      form_params['PaymentMethodUid'] = payment_method_uid
      form_params['Title'] = title
      form_params['IsPrimary'] = is_primary
      form_params['PaymentType'] = payment_type
      form_params['CreditCard'] = credit_card
      form_params['GiftCard'] = gift_card
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseSavePaymentMethodResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#save_legacy_payment_method_save_legacy_method_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param customer_uid 
    # @param payment_method_uid 
    # @param title 
    # @param is_primary 
    # @param payment_type 
    # @param credit_card 
    # @param gift_card 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseSavePaymentMethodResponse]
    def save_legacy_payment_method_save_legacy_method_async(customer_uid, payment_method_uid, title, is_primary, payment_type, credit_card, gift_card, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = save_legacy_payment_method_save_legacy_method_async_with_http_info(customer_uid, payment_method_uid, title, is_primary, payment_type, credit_card, gift_card, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param customer_uid 
    # @param payment_method_uid 
    # @param title 
    # @param is_primary 
    # @param payment_type 
    # @param credit_card 
    # @param gift_card 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseSavePaymentMethodResponse, Integer, Hash)>] ServerResponseSavePaymentMethodResponse data, response status code and response headers
    def save_legacy_payment_method_save_legacy_method_async_with_http_info(customer_uid, payment_method_uid, title, is_primary, payment_type, credit_card, gift_card, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.save_legacy_payment_method_save_legacy_method_async ...'
      end
      # verify the required parameter 'customer_uid' is set
      if @api_client.config.client_side_validation && customer_uid.nil?
        fail ArgumentError, "Missing the required parameter 'customer_uid' when calling CustomersApi.save_legacy_payment_method_save_legacy_method_async"
      end
      # verify the required parameter 'payment_method_uid' is set
      if @api_client.config.client_side_validation && payment_method_uid.nil?
        fail ArgumentError, "Missing the required parameter 'payment_method_uid' when calling CustomersApi.save_legacy_payment_method_save_legacy_method_async"
      end
      # verify the required parameter 'title' is set
      if @api_client.config.client_side_validation && title.nil?
        fail ArgumentError, "Missing the required parameter 'title' when calling CustomersApi.save_legacy_payment_method_save_legacy_method_async"
      end
      # verify the required parameter 'is_primary' is set
      if @api_client.config.client_side_validation && is_primary.nil?
        fail ArgumentError, "Missing the required parameter 'is_primary' when calling CustomersApi.save_legacy_payment_method_save_legacy_method_async"
      end
      # verify the required parameter 'payment_type' is set
      if @api_client.config.client_side_validation && payment_type.nil?
        fail ArgumentError, "Missing the required parameter 'payment_type' when calling CustomersApi.save_legacy_payment_method_save_legacy_method_async"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['Unknown', 'CreditCard', 'GiftCard', 'ElectronicFunds', 'PayPal', 'ACH', 'LoyaltyCard'].include?(payment_type)
        fail ArgumentError, "invalid value for 'payment_type', must be one of Unknown, CreditCard, GiftCard, ElectronicFunds, PayPal, ACH, LoyaltyCard"
      end
      # verify the required parameter 'credit_card' is set
      if @api_client.config.client_side_validation && credit_card.nil?
        fail ArgumentError, "Missing the required parameter 'credit_card' when calling CustomersApi.save_legacy_payment_method_save_legacy_method_async"
      end
      # verify the required parameter 'gift_card' is set
      if @api_client.config.client_side_validation && gift_card.nil?
        fail ArgumentError, "Missing the required parameter 'gift_card' when calling CustomersApi.save_legacy_payment_method_save_legacy_method_async"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling CustomersApi.save_legacy_payment_method_save_legacy_method_async"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling CustomersApi.save_legacy_payment_method_save_legacy_method_async"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling CustomersApi.save_legacy_payment_method_save_legacy_method_async"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling CustomersApi.save_legacy_payment_method_save_legacy_method_async"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling CustomersApi.save_legacy_payment_method_save_legacy_method_async"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling CustomersApi.save_legacy_payment_method_save_legacy_method_async"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CustomersApi.save_legacy_payment_method_save_legacy_method_async"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling CustomersApi.save_legacy_payment_method_save_legacy_method_async"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling CustomersApi.save_legacy_payment_method_save_legacy_method_async"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling CustomersApi.save_legacy_payment_method_save_legacy_method_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.save_legacy_payment_method_save_legacy_method_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/legacypaymentmethods/commands/save'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CustomerUid'] = customer_uid
      form_params['PaymentMethodUid'] = payment_method_uid
      form_params['Title'] = title
      form_params['IsPrimary'] = is_primary
      form_params['PaymentType'] = payment_type
      form_params['CreditCard'] = credit_card
      form_params['GiftCard'] = gift_card
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseSavePaymentMethodResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#save_legacy_payment_method_save_legacy_method_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseSaveShippingAddressResponse]
    def save_shipping_address_save_address(body, access_key, opts = {})
      data, _status_code, _headers = save_shipping_address_save_address_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseSaveShippingAddressResponse, Integer, Hash)>] ServerResponseSaveShippingAddressResponse data, response status code and response headers
    def save_shipping_address_save_address_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.save_shipping_address_save_address ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomersApi.save_shipping_address_save_address"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.save_shipping_address_save_address"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/customers/commands/saveshippingaddress'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['ValidateAddress'] = validate_address
      form_params['CustomerUid'] = customer_uid
      form_params['ShippingAddressUid'] = shipping_address_uid
      form_params['Title'] = title
      form_params['IsPrimary'] = is_primary
      form_params['FirstName'] = first_name
      form_params['LastName'] = last_name
      form_params['Company'] = company
      form_params['Address'] = address
      form_params['EmailAddress'] = email_address
      form_params['Phone1'] = phone1
      form_params['Phone2'] = phone2
      form_params['MobilePhone'] = mobile_phone
      form_params['FaxNumber'] = fax_number
      form_params['BirthDate'] = birth_date
      form_params['Instructions'] = instructions
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseSaveShippingAddressResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#save_shipping_address_save_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param validate_address 
    # @param customer_uid 
    # @param shipping_address_uid 
    # @param title 
    # @param is_primary 
    # @param first_name 
    # @param last_name 
    # @param company 
    # @param address 
    # @param email_address 
    # @param phone1 
    # @param phone2 
    # @param mobile_phone 
    # @param fax_number 
    # @param birth_date 
    # @param instructions 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseSaveShippingAddressResponse]
    def save_shipping_address_save_address(validate_address, customer_uid, shipping_address_uid, title, is_primary, first_name, last_name, company, address, email_address, phone1, phone2, mobile_phone, fax_number, birth_date, instructions, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = save_shipping_address_save_address_with_http_info(validate_address, customer_uid, shipping_address_uid, title, is_primary, first_name, last_name, company, address, email_address, phone1, phone2, mobile_phone, fax_number, birth_date, instructions, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param validate_address 
    # @param customer_uid 
    # @param shipping_address_uid 
    # @param title 
    # @param is_primary 
    # @param first_name 
    # @param last_name 
    # @param company 
    # @param address 
    # @param email_address 
    # @param phone1 
    # @param phone2 
    # @param mobile_phone 
    # @param fax_number 
    # @param birth_date 
    # @param instructions 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseSaveShippingAddressResponse, Integer, Hash)>] ServerResponseSaveShippingAddressResponse data, response status code and response headers
    def save_shipping_address_save_address_with_http_info(validate_address, customer_uid, shipping_address_uid, title, is_primary, first_name, last_name, company, address, email_address, phone1, phone2, mobile_phone, fax_number, birth_date, instructions, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.save_shipping_address_save_address ...'
      end
      # verify the required parameter 'validate_address' is set
      if @api_client.config.client_side_validation && validate_address.nil?
        fail ArgumentError, "Missing the required parameter 'validate_address' when calling CustomersApi.save_shipping_address_save_address"
      end
      # verify the required parameter 'customer_uid' is set
      if @api_client.config.client_side_validation && customer_uid.nil?
        fail ArgumentError, "Missing the required parameter 'customer_uid' when calling CustomersApi.save_shipping_address_save_address"
      end
      # verify the required parameter 'shipping_address_uid' is set
      if @api_client.config.client_side_validation && shipping_address_uid.nil?
        fail ArgumentError, "Missing the required parameter 'shipping_address_uid' when calling CustomersApi.save_shipping_address_save_address"
      end
      # verify the required parameter 'title' is set
      if @api_client.config.client_side_validation && title.nil?
        fail ArgumentError, "Missing the required parameter 'title' when calling CustomersApi.save_shipping_address_save_address"
      end
      # verify the required parameter 'is_primary' is set
      if @api_client.config.client_side_validation && is_primary.nil?
        fail ArgumentError, "Missing the required parameter 'is_primary' when calling CustomersApi.save_shipping_address_save_address"
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling CustomersApi.save_shipping_address_save_address"
      end
      # verify the required parameter 'last_name' is set
      if @api_client.config.client_side_validation && last_name.nil?
        fail ArgumentError, "Missing the required parameter 'last_name' when calling CustomersApi.save_shipping_address_save_address"
      end
      # verify the required parameter 'company' is set
      if @api_client.config.client_side_validation && company.nil?
        fail ArgumentError, "Missing the required parameter 'company' when calling CustomersApi.save_shipping_address_save_address"
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling CustomersApi.save_shipping_address_save_address"
      end
      # verify the required parameter 'email_address' is set
      if @api_client.config.client_side_validation && email_address.nil?
        fail ArgumentError, "Missing the required parameter 'email_address' when calling CustomersApi.save_shipping_address_save_address"
      end
      # verify the required parameter 'phone1' is set
      if @api_client.config.client_side_validation && phone1.nil?
        fail ArgumentError, "Missing the required parameter 'phone1' when calling CustomersApi.save_shipping_address_save_address"
      end
      # verify the required parameter 'phone2' is set
      if @api_client.config.client_side_validation && phone2.nil?
        fail ArgumentError, "Missing the required parameter 'phone2' when calling CustomersApi.save_shipping_address_save_address"
      end
      # verify the required parameter 'mobile_phone' is set
      if @api_client.config.client_side_validation && mobile_phone.nil?
        fail ArgumentError, "Missing the required parameter 'mobile_phone' when calling CustomersApi.save_shipping_address_save_address"
      end
      # verify the required parameter 'fax_number' is set
      if @api_client.config.client_side_validation && fax_number.nil?
        fail ArgumentError, "Missing the required parameter 'fax_number' when calling CustomersApi.save_shipping_address_save_address"
      end
      # verify the required parameter 'birth_date' is set
      if @api_client.config.client_side_validation && birth_date.nil?
        fail ArgumentError, "Missing the required parameter 'birth_date' when calling CustomersApi.save_shipping_address_save_address"
      end
      # verify the required parameter 'instructions' is set
      if @api_client.config.client_side_validation && instructions.nil?
        fail ArgumentError, "Missing the required parameter 'instructions' when calling CustomersApi.save_shipping_address_save_address"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling CustomersApi.save_shipping_address_save_address"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling CustomersApi.save_shipping_address_save_address"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling CustomersApi.save_shipping_address_save_address"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling CustomersApi.save_shipping_address_save_address"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling CustomersApi.save_shipping_address_save_address"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling CustomersApi.save_shipping_address_save_address"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CustomersApi.save_shipping_address_save_address"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling CustomersApi.save_shipping_address_save_address"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling CustomersApi.save_shipping_address_save_address"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling CustomersApi.save_shipping_address_save_address"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.save_shipping_address_save_address"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/customers/commands/saveshippingaddress'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['ValidateAddress'] = validate_address
      form_params['CustomerUid'] = customer_uid
      form_params['ShippingAddressUid'] = shipping_address_uid
      form_params['Title'] = title
      form_params['IsPrimary'] = is_primary
      form_params['FirstName'] = first_name
      form_params['LastName'] = last_name
      form_params['Company'] = company
      form_params['Address'] = address
      form_params['EmailAddress'] = email_address
      form_params['Phone1'] = phone1
      form_params['Phone2'] = phone2
      form_params['MobilePhone'] = mobile_phone
      form_params['FaxNumber'] = fax_number
      form_params['BirthDate'] = birth_date
      form_params['Instructions'] = instructions
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseSaveShippingAddressResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#save_shipping_address_save_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :quick_search 
    # @option opts [Integer] :max_rows 
    # @option opts [String] :search_customer_external_id 
    # @option opts [String] :search_customer_first_name2 
    # @option opts [String] :search_customer_last_name2 
    # @option opts [BOOLEAN] :search_customer_address_modified 
    # @option opts [BOOLEAN] :search_customer_address_validated 
    # @option opts [String] :search_customer_company_name 
    # @option opts [String] :search_customer_phone1 
    # @option opts [String] :search_customer_phone2 
    # @option opts [String] :search_customer_mobile_phone 
    # @option opts [String] :search_customer_fax_number 
    # @option opts [String] :search_customer_email_address 
    # @option opts [String] :search_customer_facebook_id 
    # @option opts [String] :search_customer_twitter_id 
    # @option opts [String] :search_customer_mobile_device_id 
    # @option opts [BOOLEAN] :search_customer_loyalty_redemption_disabled 
    # @option opts [BOOLEAN] :search_customer_loyalty_accrual_disabled 
    # @option opts [String] :search_customer_loyalty_card_number 
    # @option opts [Integer] :search_customer_current_loyalty_points 
    # @option opts [Float] :search_customer_current_loyalty_currency 
    # @option opts [BOOLEAN] :search_customer_edit_at_pos 
    # @option opts [BOOLEAN] :search_customer_web_account 
    # @option opts [BOOLEAN] :search_customer_verified 
    # @option opts [BOOLEAN] :search_customer_tax_exempt 
    # @option opts [DateTime] :search_customer_birth_date 
    # @option opts [Array<Object>] :search_customer_loyalty_points_accounts 
    # @option opts [Array<Object>] :search_customer_loyalty_currency_accounts 
    # @option opts [String] :search_customer_type_uid 
    # @option opts [String] :search_customer_type_external_id 
    # @option opts [String] :search_customer_type_code 
    # @option opts [String] :search_customer_type_name 
    # @option opts [String] :search_customer_price_level_uid 
    # @option opts [String] :search_customer_price_level_code 
    # @option opts [String] :search_customer_price_level_name 
    # @option opts [Integer] :search_customer_transaction_count 
    # @option opts [Float] :search_customer_total_sales 
    # @option opts [Array<Object>] :search_customer_club_memberships 
    # @option opts [Array<Object>] :search_customer_subscriber_group_memberships 
    # @option opts [Array<Object>] :search_customer_loyaltyt_program_memberships 
    # @option opts [Array<Object>] :search_customer_loyalty_program_memberships 
    # @option opts [String] :search_customer_no_email 
    # @option opts [String] :search_customer_no_text_messages 
    # @option opts [String] :search_customer_salutation 
    # @option opts [String] :search_customer_parent_customer_uid 
    # @option opts [String] :search_customer_parent_customer_code 
    # @option opts [String] :search_customer_parent_external_id 
    # @option opts [String] :search_customer_referral_customer1_uid 
    # @option opts [String] :search_customer_referral_customer1_code 
    # @option opts [String] :search_customer_referral_customer2_uid 
    # @option opts [String] :search_customer_referral_customer2_code 
    # @option opts [Integer] :search_customer_alert_count 
    # @option opts [DateTime] :search_customer_created 
    # @option opts [DateTime] :search_customer_created_local 
    # @option opts [String] :search_customer_signup_channel_uid 
    # @option opts [String] :search_customer_signup_store_uid 
    # @option opts [String] :search_customer_signup_store_code 
    # @option opts [String] :search_customer_signup_store_external_id 
    # @option opts [Integer] :search_customer_id 
    # @option opts [String] :search_customer_uid 
    # @option opts [String] :search_customer_code 
    # @option opts [String] :search_customer_first_name 
    # @option opts [String] :search_customer_last_name 
    # @option opts [Object] :search_customer_custom_fields 
    # @return [ServerResponseIListCustomer]
    def search_customer(access_key, opts = {})
      data, _status_code, _headers = search_customer_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :quick_search 
    # @option opts [Integer] :max_rows 
    # @option opts [String] :search_customer_external_id 
    # @option opts [String] :search_customer_first_name2 
    # @option opts [String] :search_customer_last_name2 
    # @option opts [BOOLEAN] :search_customer_address_modified 
    # @option opts [BOOLEAN] :search_customer_address_validated 
    # @option opts [String] :search_customer_company_name 
    # @option opts [String] :search_customer_phone1 
    # @option opts [String] :search_customer_phone2 
    # @option opts [String] :search_customer_mobile_phone 
    # @option opts [String] :search_customer_fax_number 
    # @option opts [String] :search_customer_email_address 
    # @option opts [String] :search_customer_facebook_id 
    # @option opts [String] :search_customer_twitter_id 
    # @option opts [String] :search_customer_mobile_device_id 
    # @option opts [BOOLEAN] :search_customer_loyalty_redemption_disabled 
    # @option opts [BOOLEAN] :search_customer_loyalty_accrual_disabled 
    # @option opts [String] :search_customer_loyalty_card_number 
    # @option opts [Integer] :search_customer_current_loyalty_points 
    # @option opts [Float] :search_customer_current_loyalty_currency 
    # @option opts [BOOLEAN] :search_customer_edit_at_pos 
    # @option opts [BOOLEAN] :search_customer_web_account 
    # @option opts [BOOLEAN] :search_customer_verified 
    # @option opts [BOOLEAN] :search_customer_tax_exempt 
    # @option opts [DateTime] :search_customer_birth_date 
    # @option opts [Array<Object>] :search_customer_loyalty_points_accounts 
    # @option opts [Array<Object>] :search_customer_loyalty_currency_accounts 
    # @option opts [String] :search_customer_type_uid 
    # @option opts [String] :search_customer_type_external_id 
    # @option opts [String] :search_customer_type_code 
    # @option opts [String] :search_customer_type_name 
    # @option opts [String] :search_customer_price_level_uid 
    # @option opts [String] :search_customer_price_level_code 
    # @option opts [String] :search_customer_price_level_name 
    # @option opts [Integer] :search_customer_transaction_count 
    # @option opts [Float] :search_customer_total_sales 
    # @option opts [Array<Object>] :search_customer_club_memberships 
    # @option opts [Array<Object>] :search_customer_subscriber_group_memberships 
    # @option opts [Array<Object>] :search_customer_loyaltyt_program_memberships 
    # @option opts [Array<Object>] :search_customer_loyalty_program_memberships 
    # @option opts [String] :search_customer_no_email 
    # @option opts [String] :search_customer_no_text_messages 
    # @option opts [String] :search_customer_salutation 
    # @option opts [String] :search_customer_parent_customer_uid 
    # @option opts [String] :search_customer_parent_customer_code 
    # @option opts [String] :search_customer_parent_external_id 
    # @option opts [String] :search_customer_referral_customer1_uid 
    # @option opts [String] :search_customer_referral_customer1_code 
    # @option opts [String] :search_customer_referral_customer2_uid 
    # @option opts [String] :search_customer_referral_customer2_code 
    # @option opts [Integer] :search_customer_alert_count 
    # @option opts [DateTime] :search_customer_created 
    # @option opts [DateTime] :search_customer_created_local 
    # @option opts [String] :search_customer_signup_channel_uid 
    # @option opts [String] :search_customer_signup_store_uid 
    # @option opts [String] :search_customer_signup_store_code 
    # @option opts [String] :search_customer_signup_store_external_id 
    # @option opts [Integer] :search_customer_id 
    # @option opts [String] :search_customer_uid 
    # @option opts [String] :search_customer_code 
    # @option opts [String] :search_customer_first_name 
    # @option opts [String] :search_customer_last_name 
    # @option opts [Object] :search_customer_custom_fields 
    # @return [Array<(ServerResponseIListCustomer, Integer, Hash)>] ServerResponseIListCustomer data, response status code and response headers
    def search_customer_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.search_customer ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.search_customer"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/customers'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'quickSearch'] = opts[:'quick_search'] if !opts[:'quick_search'].nil?
      query_params[:'maxRows'] = opts[:'max_rows'] if !opts[:'max_rows'].nil?
      query_params[:'searchCustomer.externalId'] = opts[:'search_customer_external_id'] if !opts[:'search_customer_external_id'].nil?
      query_params[:'searchCustomer.firstName2'] = opts[:'search_customer_first_name2'] if !opts[:'search_customer_first_name2'].nil?
      query_params[:'searchCustomer.lastName2'] = opts[:'search_customer_last_name2'] if !opts[:'search_customer_last_name2'].nil?
      query_params[:'searchCustomer.addressModified'] = opts[:'search_customer_address_modified'] if !opts[:'search_customer_address_modified'].nil?
      query_params[:'searchCustomer.addressValidated'] = opts[:'search_customer_address_validated'] if !opts[:'search_customer_address_validated'].nil?
      query_params[:'searchCustomer.companyName'] = opts[:'search_customer_company_name'] if !opts[:'search_customer_company_name'].nil?
      query_params[:'searchCustomer.phone1'] = opts[:'search_customer_phone1'] if !opts[:'search_customer_phone1'].nil?
      query_params[:'searchCustomer.phone2'] = opts[:'search_customer_phone2'] if !opts[:'search_customer_phone2'].nil?
      query_params[:'searchCustomer.mobilePhone'] = opts[:'search_customer_mobile_phone'] if !opts[:'search_customer_mobile_phone'].nil?
      query_params[:'searchCustomer.faxNumber'] = opts[:'search_customer_fax_number'] if !opts[:'search_customer_fax_number'].nil?
      query_params[:'searchCustomer.emailAddress'] = opts[:'search_customer_email_address'] if !opts[:'search_customer_email_address'].nil?
      query_params[:'searchCustomer.facebookId'] = opts[:'search_customer_facebook_id'] if !opts[:'search_customer_facebook_id'].nil?
      query_params[:'searchCustomer.twitterId'] = opts[:'search_customer_twitter_id'] if !opts[:'search_customer_twitter_id'].nil?
      query_params[:'searchCustomer.mobileDeviceId'] = opts[:'search_customer_mobile_device_id'] if !opts[:'search_customer_mobile_device_id'].nil?
      query_params[:'searchCustomer.loyaltyRedemptionDisabled'] = opts[:'search_customer_loyalty_redemption_disabled'] if !opts[:'search_customer_loyalty_redemption_disabled'].nil?
      query_params[:'searchCustomer.loyaltyAccrualDisabled'] = opts[:'search_customer_loyalty_accrual_disabled'] if !opts[:'search_customer_loyalty_accrual_disabled'].nil?
      query_params[:'searchCustomer.loyaltyCardNumber'] = opts[:'search_customer_loyalty_card_number'] if !opts[:'search_customer_loyalty_card_number'].nil?
      query_params[:'searchCustomer.currentLoyaltyPoints'] = opts[:'search_customer_current_loyalty_points'] if !opts[:'search_customer_current_loyalty_points'].nil?
      query_params[:'searchCustomer.currentLoyaltyCurrency'] = opts[:'search_customer_current_loyalty_currency'] if !opts[:'search_customer_current_loyalty_currency'].nil?
      query_params[:'searchCustomer.editAtPOS'] = opts[:'search_customer_edit_at_pos'] if !opts[:'search_customer_edit_at_pos'].nil?
      query_params[:'searchCustomer.webAccount'] = opts[:'search_customer_web_account'] if !opts[:'search_customer_web_account'].nil?
      query_params[:'searchCustomer.verified'] = opts[:'search_customer_verified'] if !opts[:'search_customer_verified'].nil?
      query_params[:'searchCustomer.taxExempt'] = opts[:'search_customer_tax_exempt'] if !opts[:'search_customer_tax_exempt'].nil?
      query_params[:'searchCustomer.birthDate'] = opts[:'search_customer_birth_date'] if !opts[:'search_customer_birth_date'].nil?
      query_params[:'searchCustomer.loyaltyPointsAccounts'] = @api_client.build_collection_param(opts[:'search_customer_loyalty_points_accounts'], :multi) if !opts[:'search_customer_loyalty_points_accounts'].nil?
      query_params[:'searchCustomer.loyaltyCurrencyAccounts'] = @api_client.build_collection_param(opts[:'search_customer_loyalty_currency_accounts'], :multi) if !opts[:'search_customer_loyalty_currency_accounts'].nil?
      query_params[:'searchCustomer.type.uid'] = opts[:'search_customer_type_uid'] if !opts[:'search_customer_type_uid'].nil?
      query_params[:'searchCustomer.type.externalId'] = opts[:'search_customer_type_external_id'] if !opts[:'search_customer_type_external_id'].nil?
      query_params[:'searchCustomer.type.code'] = opts[:'search_customer_type_code'] if !opts[:'search_customer_type_code'].nil?
      query_params[:'searchCustomer.type.name'] = opts[:'search_customer_type_name'] if !opts[:'search_customer_type_name'].nil?
      query_params[:'searchCustomer.priceLevel.uid'] = opts[:'search_customer_price_level_uid'] if !opts[:'search_customer_price_level_uid'].nil?
      query_params[:'searchCustomer.priceLevel.code'] = opts[:'search_customer_price_level_code'] if !opts[:'search_customer_price_level_code'].nil?
      query_params[:'searchCustomer.priceLevel.name'] = opts[:'search_customer_price_level_name'] if !opts[:'search_customer_price_level_name'].nil?
      query_params[:'searchCustomer.transactionCount'] = opts[:'search_customer_transaction_count'] if !opts[:'search_customer_transaction_count'].nil?
      query_params[:'searchCustomer.totalSales'] = opts[:'search_customer_total_sales'] if !opts[:'search_customer_total_sales'].nil?
      query_params[:'searchCustomer.clubMemberships'] = @api_client.build_collection_param(opts[:'search_customer_club_memberships'], :multi) if !opts[:'search_customer_club_memberships'].nil?
      query_params[:'searchCustomer.subscriberGroupMemberships'] = @api_client.build_collection_param(opts[:'search_customer_subscriber_group_memberships'], :multi) if !opts[:'search_customer_subscriber_group_memberships'].nil?
      query_params[:'searchCustomer.loyaltytProgramMemberships'] = @api_client.build_collection_param(opts[:'search_customer_loyaltyt_program_memberships'], :multi) if !opts[:'search_customer_loyaltyt_program_memberships'].nil?
      query_params[:'searchCustomer.loyaltyProgramMemberships'] = @api_client.build_collection_param(opts[:'search_customer_loyalty_program_memberships'], :multi) if !opts[:'search_customer_loyalty_program_memberships'].nil?
      query_params[:'searchCustomer.noEmail'] = opts[:'search_customer_no_email'] if !opts[:'search_customer_no_email'].nil?
      query_params[:'searchCustomer.noTextMessages'] = opts[:'search_customer_no_text_messages'] if !opts[:'search_customer_no_text_messages'].nil?
      query_params[:'searchCustomer.salutation'] = opts[:'search_customer_salutation'] if !opts[:'search_customer_salutation'].nil?
      query_params[:'searchCustomer.parentCustomerUid'] = opts[:'search_customer_parent_customer_uid'] if !opts[:'search_customer_parent_customer_uid'].nil?
      query_params[:'searchCustomer.parentCustomerCode'] = opts[:'search_customer_parent_customer_code'] if !opts[:'search_customer_parent_customer_code'].nil?
      query_params[:'searchCustomer.parentExternalId'] = opts[:'search_customer_parent_external_id'] if !opts[:'search_customer_parent_external_id'].nil?
      query_params[:'searchCustomer.referralCustomer1Uid'] = opts[:'search_customer_referral_customer1_uid'] if !opts[:'search_customer_referral_customer1_uid'].nil?
      query_params[:'searchCustomer.referralCustomer1Code'] = opts[:'search_customer_referral_customer1_code'] if !opts[:'search_customer_referral_customer1_code'].nil?
      query_params[:'searchCustomer.referralCustomer2Uid'] = opts[:'search_customer_referral_customer2_uid'] if !opts[:'search_customer_referral_customer2_uid'].nil?
      query_params[:'searchCustomer.referralCustomer2Code'] = opts[:'search_customer_referral_customer2_code'] if !opts[:'search_customer_referral_customer2_code'].nil?
      query_params[:'searchCustomer.alertCount'] = opts[:'search_customer_alert_count'] if !opts[:'search_customer_alert_count'].nil?
      query_params[:'searchCustomer.created'] = opts[:'search_customer_created'] if !opts[:'search_customer_created'].nil?
      query_params[:'searchCustomer.createdLocal'] = opts[:'search_customer_created_local'] if !opts[:'search_customer_created_local'].nil?
      query_params[:'searchCustomer.signupChannelUid'] = opts[:'search_customer_signup_channel_uid'] if !opts[:'search_customer_signup_channel_uid'].nil?
      query_params[:'searchCustomer.signupStoreUid'] = opts[:'search_customer_signup_store_uid'] if !opts[:'search_customer_signup_store_uid'].nil?
      query_params[:'searchCustomer.signupStoreCode'] = opts[:'search_customer_signup_store_code'] if !opts[:'search_customer_signup_store_code'].nil?
      query_params[:'searchCustomer.signupStoreExternalId'] = opts[:'search_customer_signup_store_external_id'] if !opts[:'search_customer_signup_store_external_id'].nil?
      query_params[:'searchCustomer.id'] = opts[:'search_customer_id'] if !opts[:'search_customer_id'].nil?
      query_params[:'searchCustomer.uid'] = opts[:'search_customer_uid'] if !opts[:'search_customer_uid'].nil?
      query_params[:'searchCustomer.code'] = opts[:'search_customer_code'] if !opts[:'search_customer_code'].nil?
      query_params[:'searchCustomer.firstName'] = opts[:'search_customer_first_name'] if !opts[:'search_customer_first_name'].nil?
      query_params[:'searchCustomer.lastName'] = opts[:'search_customer_last_name'] if !opts[:'search_customer_last_name'].nil?
      query_params[:'searchCustomer.customFields'] = opts[:'search_customer_custom_fields'] if !opts[:'search_customer_custom_fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIListCustomer' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#search_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def send_customer_verification(body, access_key, opts = {})
      data, _status_code, _headers = send_customer_verification_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def send_customer_verification_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.send_customer_verification ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomersApi.send_customer_verification"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.send_customer_verification"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/customers/commands/sendverifications'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CustomerUid'] = customer_uid
      form_params['ExternalId'] = external_id
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#send_customer_verification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param customer_uid 
    # @param external_id 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def send_customer_verification(customer_uid, external_id, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = send_customer_verification_with_http_info(customer_uid, external_id, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param customer_uid 
    # @param external_id 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def send_customer_verification_with_http_info(customer_uid, external_id, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.send_customer_verification ...'
      end
      # verify the required parameter 'customer_uid' is set
      if @api_client.config.client_side_validation && customer_uid.nil?
        fail ArgumentError, "Missing the required parameter 'customer_uid' when calling CustomersApi.send_customer_verification"
      end
      # verify the required parameter 'external_id' is set
      if @api_client.config.client_side_validation && external_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_id' when calling CustomersApi.send_customer_verification"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling CustomersApi.send_customer_verification"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling CustomersApi.send_customer_verification"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling CustomersApi.send_customer_verification"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling CustomersApi.send_customer_verification"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling CustomersApi.send_customer_verification"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling CustomersApi.send_customer_verification"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CustomersApi.send_customer_verification"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling CustomersApi.send_customer_verification"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling CustomersApi.send_customer_verification"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling CustomersApi.send_customer_verification"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.send_customer_verification"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/customers/commands/sendverifications'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CustomerUid'] = customer_uid
      form_params['ExternalId'] = external_id
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#send_customer_verification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCustomer]
    def signup_customer_signup_customer_async(body, access_key, opts = {})
      data, _status_code, _headers = signup_customer_signup_customer_async_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCustomer, Integer, Hash)>] ServerResponseCustomer data, response status code and response headers
    def signup_customer_signup_customer_async_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.signup_customer_signup_customer_async ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomersApi.signup_customer_signup_customer_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.signup_customer_signup_customer_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/customers/commands/signups'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['Customer'] = customer
      form_params['GroupsToJoin'] = @api_client.build_collection_param(groups_to_join, :multi)
      form_params['ValidateAddress'] = validate_address
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCustomer' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#signup_customer_signup_customer_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param customer 
    # @param groups_to_join 
    # @param validate_address 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCustomer]
    def signup_customer_signup_customer_async(customer, groups_to_join, validate_address, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = signup_customer_signup_customer_async_with_http_info(customer, groups_to_join, validate_address, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param customer 
    # @param groups_to_join 
    # @param validate_address 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCustomer, Integer, Hash)>] ServerResponseCustomer data, response status code and response headers
    def signup_customer_signup_customer_async_with_http_info(customer, groups_to_join, validate_address, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.signup_customer_signup_customer_async ...'
      end
      # verify the required parameter 'customer' is set
      if @api_client.config.client_side_validation && customer.nil?
        fail ArgumentError, "Missing the required parameter 'customer' when calling CustomersApi.signup_customer_signup_customer_async"
      end
      # verify the required parameter 'groups_to_join' is set
      if @api_client.config.client_side_validation && groups_to_join.nil?
        fail ArgumentError, "Missing the required parameter 'groups_to_join' when calling CustomersApi.signup_customer_signup_customer_async"
      end
      # verify the required parameter 'validate_address' is set
      if @api_client.config.client_side_validation && validate_address.nil?
        fail ArgumentError, "Missing the required parameter 'validate_address' when calling CustomersApi.signup_customer_signup_customer_async"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling CustomersApi.signup_customer_signup_customer_async"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling CustomersApi.signup_customer_signup_customer_async"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling CustomersApi.signup_customer_signup_customer_async"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling CustomersApi.signup_customer_signup_customer_async"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling CustomersApi.signup_customer_signup_customer_async"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling CustomersApi.signup_customer_signup_customer_async"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CustomersApi.signup_customer_signup_customer_async"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling CustomersApi.signup_customer_signup_customer_async"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling CustomersApi.signup_customer_signup_customer_async"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling CustomersApi.signup_customer_signup_customer_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.signup_customer_signup_customer_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/customers/commands/signups'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['Customer'] = customer
      form_params['GroupsToJoin'] = @api_client.build_collection_param(groups_to_join, :multi)
      form_params['ValidateAddress'] = validate_address
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCustomer' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#signup_customer_signup_customer_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async(body, access_key, opts = {})
      data, _status_code, _headers = transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomersApi.transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/frequentbuyer/commands/transfers'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CustomerUid'] = customer_uid
      form_params['CustomerExternalId'] = customer_external_id
      form_params['CustomerSourceExternalId'] = customer_source_external_id
      form_params['CustomerCode'] = customer_code
      form_params['SourceRuleUid'] = source_rule_uid
      form_params['SourceRuleCode'] = source_rule_code
      form_params['TargetRuleUid'] = target_rule_uid
      form_params['TargetRuleCode'] = target_rule_code
      form_params['Quantity'] = quantity
      form_params['Comment'] = comment
      form_params['CreatedLocal'] = created_local
      form_params['Created'] = created
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param customer_uid 
    # @param customer_external_id 
    # @param customer_source_external_id 
    # @param customer_code 
    # @param source_rule_uid 
    # @param source_rule_code 
    # @param target_rule_uid 
    # @param target_rule_code 
    # @param quantity 
    # @param comment 
    # @param created_local 
    # @param created 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async(customer_uid, customer_external_id, customer_source_external_id, customer_code, source_rule_uid, source_rule_code, target_rule_uid, target_rule_code, quantity, comment, created_local, created, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async_with_http_info(customer_uid, customer_external_id, customer_source_external_id, customer_code, source_rule_uid, source_rule_code, target_rule_uid, target_rule_code, quantity, comment, created_local, created, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param customer_uid 
    # @param customer_external_id 
    # @param customer_source_external_id 
    # @param customer_code 
    # @param source_rule_uid 
    # @param source_rule_code 
    # @param target_rule_uid 
    # @param target_rule_code 
    # @param quantity 
    # @param comment 
    # @param created_local 
    # @param created 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async_with_http_info(customer_uid, customer_external_id, customer_source_external_id, customer_code, source_rule_uid, source_rule_code, target_rule_uid, target_rule_code, quantity, comment, created_local, created, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async ...'
      end
      # verify the required parameter 'customer_uid' is set
      if @api_client.config.client_side_validation && customer_uid.nil?
        fail ArgumentError, "Missing the required parameter 'customer_uid' when calling CustomersApi.transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async"
      end
      # verify the required parameter 'customer_external_id' is set
      if @api_client.config.client_side_validation && customer_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_external_id' when calling CustomersApi.transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async"
      end
      # verify the required parameter 'customer_source_external_id' is set
      if @api_client.config.client_side_validation && customer_source_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_source_external_id' when calling CustomersApi.transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async"
      end
      # verify the required parameter 'customer_code' is set
      if @api_client.config.client_side_validation && customer_code.nil?
        fail ArgumentError, "Missing the required parameter 'customer_code' when calling CustomersApi.transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async"
      end
      # verify the required parameter 'source_rule_uid' is set
      if @api_client.config.client_side_validation && source_rule_uid.nil?
        fail ArgumentError, "Missing the required parameter 'source_rule_uid' when calling CustomersApi.transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async"
      end
      # verify the required parameter 'source_rule_code' is set
      if @api_client.config.client_side_validation && source_rule_code.nil?
        fail ArgumentError, "Missing the required parameter 'source_rule_code' when calling CustomersApi.transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async"
      end
      # verify the required parameter 'target_rule_uid' is set
      if @api_client.config.client_side_validation && target_rule_uid.nil?
        fail ArgumentError, "Missing the required parameter 'target_rule_uid' when calling CustomersApi.transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async"
      end
      # verify the required parameter 'target_rule_code' is set
      if @api_client.config.client_side_validation && target_rule_code.nil?
        fail ArgumentError, "Missing the required parameter 'target_rule_code' when calling CustomersApi.transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async"
      end
      # verify the required parameter 'quantity' is set
      if @api_client.config.client_side_validation && quantity.nil?
        fail ArgumentError, "Missing the required parameter 'quantity' when calling CustomersApi.transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async"
      end
      # verify the required parameter 'comment' is set
      if @api_client.config.client_side_validation && comment.nil?
        fail ArgumentError, "Missing the required parameter 'comment' when calling CustomersApi.transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async"
      end
      # verify the required parameter 'created_local' is set
      if @api_client.config.client_side_validation && created_local.nil?
        fail ArgumentError, "Missing the required parameter 'created_local' when calling CustomersApi.transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async"
      end
      # verify the required parameter 'created' is set
      if @api_client.config.client_side_validation && created.nil?
        fail ArgumentError, "Missing the required parameter 'created' when calling CustomersApi.transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling CustomersApi.transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling CustomersApi.transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling CustomersApi.transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling CustomersApi.transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling CustomersApi.transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling CustomersApi.transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CustomersApi.transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling CustomersApi.transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling CustomersApi.transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling CustomersApi.transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/frequentbuyer/commands/transfers'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CustomerUid'] = customer_uid
      form_params['CustomerExternalId'] = customer_external_id
      form_params['CustomerSourceExternalId'] = customer_source_external_id
      form_params['CustomerCode'] = customer_code
      form_params['SourceRuleUid'] = source_rule_uid
      form_params['SourceRuleCode'] = source_rule_code
      form_params['TargetRuleUid'] = target_rule_uid
      form_params['TargetRuleCode'] = target_rule_code
      form_params['Quantity'] = quantity
      form_params['Comment'] = comment
      form_params['CreatedLocal'] = created_local
      form_params['Created'] = created
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#transfer_frequent_buyer_balance_transfer_frequent_buyer_balance_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def update_external_id(body, access_key, opts = {})
      data, _status_code, _headers = update_external_id_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def update_external_id_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.update_external_id ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomersApi.update_external_id"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.update_external_id"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/customers/commands/updateexternalid'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CustomerUid'] = customer_uid
      form_params['ExternalId'] = external_id
      form_params['SourceExternalId'] = source_external_id
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#update_external_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param customer_uid 
    # @param external_id 
    # @param source_external_id 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def update_external_id(customer_uid, external_id, source_external_id, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = update_external_id_with_http_info(customer_uid, external_id, source_external_id, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param customer_uid 
    # @param external_id 
    # @param source_external_id 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def update_external_id_with_http_info(customer_uid, external_id, source_external_id, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.update_external_id ...'
      end
      # verify the required parameter 'customer_uid' is set
      if @api_client.config.client_side_validation && customer_uid.nil?
        fail ArgumentError, "Missing the required parameter 'customer_uid' when calling CustomersApi.update_external_id"
      end
      # verify the required parameter 'external_id' is set
      if @api_client.config.client_side_validation && external_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_id' when calling CustomersApi.update_external_id"
      end
      # verify the required parameter 'source_external_id' is set
      if @api_client.config.client_side_validation && source_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'source_external_id' when calling CustomersApi.update_external_id"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling CustomersApi.update_external_id"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling CustomersApi.update_external_id"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling CustomersApi.update_external_id"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling CustomersApi.update_external_id"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling CustomersApi.update_external_id"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling CustomersApi.update_external_id"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CustomersApi.update_external_id"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling CustomersApi.update_external_id"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling CustomersApi.update_external_id"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling CustomersApi.update_external_id"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.update_external_id"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/customers/commands/updateexternalid'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CustomerUid'] = customer_uid
      form_params['ExternalId'] = external_id
      form_params['SourceExternalId'] = source_external_id
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#update_external_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def verify_age_verify_age(body, access_key, opts = {})
      data, _status_code, _headers = verify_age_verify_age_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def verify_age_verify_age_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.verify_age_verify_age ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomersApi.verify_age_verify_age"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.verify_age_verify_age"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/customers/commands/verifyage'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CustomerUid'] = customer_uid
      form_params['CustomerExternalId'] = customer_external_id
      form_params['CustomerCode'] = customer_code
      form_params['CashierName'] = cashier_name
      form_params['Created'] = created
      form_params['CreatedLocal'] = created_local
      form_params['Method'] = method
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#verify_age_verify_age\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param customer_uid 
    # @param customer_external_id 
    # @param customer_code 
    # @param cashier_name 
    # @param created 
    # @param created_local 
    # @param method 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def verify_age_verify_age(customer_uid, customer_external_id, customer_code, cashier_name, created, created_local, method, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = verify_age_verify_age_with_http_info(customer_uid, customer_external_id, customer_code, cashier_name, created, created_local, method, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param customer_uid 
    # @param customer_external_id 
    # @param customer_code 
    # @param cashier_name 
    # @param created 
    # @param created_local 
    # @param method 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def verify_age_verify_age_with_http_info(customer_uid, customer_external_id, customer_code, cashier_name, created, created_local, method, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.verify_age_verify_age ...'
      end
      # verify the required parameter 'customer_uid' is set
      if @api_client.config.client_side_validation && customer_uid.nil?
        fail ArgumentError, "Missing the required parameter 'customer_uid' when calling CustomersApi.verify_age_verify_age"
      end
      # verify the required parameter 'customer_external_id' is set
      if @api_client.config.client_side_validation && customer_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_external_id' when calling CustomersApi.verify_age_verify_age"
      end
      # verify the required parameter 'customer_code' is set
      if @api_client.config.client_side_validation && customer_code.nil?
        fail ArgumentError, "Missing the required parameter 'customer_code' when calling CustomersApi.verify_age_verify_age"
      end
      # verify the required parameter 'cashier_name' is set
      if @api_client.config.client_side_validation && cashier_name.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_name' when calling CustomersApi.verify_age_verify_age"
      end
      # verify the required parameter 'created' is set
      if @api_client.config.client_side_validation && created.nil?
        fail ArgumentError, "Missing the required parameter 'created' when calling CustomersApi.verify_age_verify_age"
      end
      # verify the required parameter 'created_local' is set
      if @api_client.config.client_side_validation && created_local.nil?
        fail ArgumentError, "Missing the required parameter 'created_local' when calling CustomersApi.verify_age_verify_age"
      end
      # verify the required parameter 'method' is set
      if @api_client.config.client_side_validation && method.nil?
        fail ArgumentError, "Missing the required parameter 'method' when calling CustomersApi.verify_age_verify_age"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['Unknown', 'InPerson', 'OnFile', 'EstablishedMember', 'External', 'Employee', 'Other'].include?(method)
        fail ArgumentError, "invalid value for 'method', must be one of Unknown, InPerson, OnFile, EstablishedMember, External, Employee, Other"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling CustomersApi.verify_age_verify_age"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling CustomersApi.verify_age_verify_age"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling CustomersApi.verify_age_verify_age"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling CustomersApi.verify_age_verify_age"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling CustomersApi.verify_age_verify_age"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling CustomersApi.verify_age_verify_age"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling CustomersApi.verify_age_verify_age"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling CustomersApi.verify_age_verify_age"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling CustomersApi.verify_age_verify_age"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling CustomersApi.verify_age_verify_age"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling CustomersApi.verify_age_verify_age"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/customers/commands/verifyage'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CustomerUid'] = customer_uid
      form_params['CustomerExternalId'] = customer_external_id
      form_params['CustomerCode'] = customer_code
      form_params['CashierName'] = cashier_name
      form_params['Created'] = created
      form_params['CreatedLocal'] = created_local
      form_params['Method'] = method
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#verify_age_verify_age\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
