=begin
#bLoyal.LoyaltyService

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module BloyalLoyaltyClient
  class SnippetsCustomerSessionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param body 
    # @param login_domain 
    # @param device_code 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCustomerSession]
    def create_customer_session(body, login_domain, device_code, opts = {})
      data, _status_code, _headers = create_customer_session_with_http_info(body, login_domain, device_code, opts)
      data
    end

    # @param body 
    # @param login_domain 
    # @param device_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCustomerSession, Integer, Hash)>] ServerResponseCustomerSession data, response status code and response headers
    def create_customer_session_with_http_info(body, login_domain, device_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnippetsCustomerSessionsApi.create_customer_session ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SnippetsCustomerSessionsApi.create_customer_session"
      end
      # verify the required parameter 'login_domain' is set
      if @api_client.config.client_side_validation && login_domain.nil?
        fail ArgumentError, "Missing the required parameter 'login_domain' when calling SnippetsCustomerSessionsApi.create_customer_session"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling SnippetsCustomerSessionsApi.create_customer_session"
      end
      # resource path
      local_var_path = '/api/v4/{loginDomain}/{deviceCode}/snippets/customersessions/commands/createsession'.sub('{' + 'loginDomain' + '}', login_domain.to_s).sub('{' + 'deviceCode' + '}', device_code.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CustomerUid'] = customer_uid
      form_params['CustomerCode'] = customer_code
      form_params['ExternalId'] = external_id
      form_params['EmailAddress'] = email_address
      form_params['LoyaltyCardNumber'] = loyalty_card_number
      form_params['Password'] = password
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCustomerSession' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnippetsCustomerSessionsApi#create_customer_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param customer_uid 
    # @param customer_code 
    # @param external_id 
    # @param email_address 
    # @param loyalty_card_number 
    # @param password 
    # @param device_uid 
    # @param store_code 
    # @param device_code2 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param login_domain 
    # @param device_code 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCustomerSession]
    def create_customer_session(customer_uid, customer_code, external_id, email_address, loyalty_card_number, password, device_uid, store_code, device_code2, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, login_domain, device_code, opts = {})
      data, _status_code, _headers = create_customer_session_with_http_info(customer_uid, customer_code, external_id, email_address, loyalty_card_number, password, device_uid, store_code, device_code2, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, login_domain, device_code, opts)
      data
    end

    # @param customer_uid 
    # @param customer_code 
    # @param external_id 
    # @param email_address 
    # @param loyalty_card_number 
    # @param password 
    # @param device_uid 
    # @param store_code 
    # @param device_code2 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param login_domain 
    # @param device_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCustomerSession, Integer, Hash)>] ServerResponseCustomerSession data, response status code and response headers
    def create_customer_session_with_http_info(customer_uid, customer_code, external_id, email_address, loyalty_card_number, password, device_uid, store_code, device_code2, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, login_domain, device_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnippetsCustomerSessionsApi.create_customer_session ...'
      end
      # verify the required parameter 'customer_uid' is set
      if @api_client.config.client_side_validation && customer_uid.nil?
        fail ArgumentError, "Missing the required parameter 'customer_uid' when calling SnippetsCustomerSessionsApi.create_customer_session"
      end
      # verify the required parameter 'customer_code' is set
      if @api_client.config.client_side_validation && customer_code.nil?
        fail ArgumentError, "Missing the required parameter 'customer_code' when calling SnippetsCustomerSessionsApi.create_customer_session"
      end
      # verify the required parameter 'external_id' is set
      if @api_client.config.client_side_validation && external_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_id' when calling SnippetsCustomerSessionsApi.create_customer_session"
      end
      # verify the required parameter 'email_address' is set
      if @api_client.config.client_side_validation && email_address.nil?
        fail ArgumentError, "Missing the required parameter 'email_address' when calling SnippetsCustomerSessionsApi.create_customer_session"
      end
      # verify the required parameter 'loyalty_card_number' is set
      if @api_client.config.client_side_validation && loyalty_card_number.nil?
        fail ArgumentError, "Missing the required parameter 'loyalty_card_number' when calling SnippetsCustomerSessionsApi.create_customer_session"
      end
      # verify the required parameter 'password' is set
      if @api_client.config.client_side_validation && password.nil?
        fail ArgumentError, "Missing the required parameter 'password' when calling SnippetsCustomerSessionsApi.create_customer_session"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling SnippetsCustomerSessionsApi.create_customer_session"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling SnippetsCustomerSessionsApi.create_customer_session"
      end
      # verify the required parameter 'device_code2' is set
      if @api_client.config.client_side_validation && device_code2.nil?
        fail ArgumentError, "Missing the required parameter 'device_code2' when calling SnippetsCustomerSessionsApi.create_customer_session"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling SnippetsCustomerSessionsApi.create_customer_session"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling SnippetsCustomerSessionsApi.create_customer_session"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling SnippetsCustomerSessionsApi.create_customer_session"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling SnippetsCustomerSessionsApi.create_customer_session"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling SnippetsCustomerSessionsApi.create_customer_session"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling SnippetsCustomerSessionsApi.create_customer_session"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling SnippetsCustomerSessionsApi.create_customer_session"
      end
      # verify the required parameter 'login_domain' is set
      if @api_client.config.client_side_validation && login_domain.nil?
        fail ArgumentError, "Missing the required parameter 'login_domain' when calling SnippetsCustomerSessionsApi.create_customer_session"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling SnippetsCustomerSessionsApi.create_customer_session"
      end
      # resource path
      local_var_path = '/api/v4/{loginDomain}/{deviceCode}/snippets/customersessions/commands/createsession'.sub('{' + 'loginDomain' + '}', login_domain.to_s).sub('{' + 'deviceCode' + '}', device_code.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CustomerUid'] = customer_uid
      form_params['CustomerCode'] = customer_code
      form_params['ExternalId'] = external_id
      form_params['EmailAddress'] = email_address
      form_params['LoyaltyCardNumber'] = loyalty_card_number
      form_params['Password'] = password
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCustomerSession' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnippetsCustomerSessionsApi#create_customer_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCustomerSession]
    def get_session(login_domain, device_code, session_key, opts = {})
      data, _status_code, _headers = get_session_with_http_info(login_domain, device_code, session_key, opts)
      data
    end

    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCustomerSession, Integer, Hash)>] ServerResponseCustomerSession data, response status code and response headers
    def get_session_with_http_info(login_domain, device_code, session_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnippetsCustomerSessionsApi.get_session ...'
      end
      # verify the required parameter 'login_domain' is set
      if @api_client.config.client_side_validation && login_domain.nil?
        fail ArgumentError, "Missing the required parameter 'login_domain' when calling SnippetsCustomerSessionsApi.get_session"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling SnippetsCustomerSessionsApi.get_session"
      end
      # verify the required parameter 'session_key' is set
      if @api_client.config.client_side_validation && session_key.nil?
        fail ArgumentError, "Missing the required parameter 'session_key' when calling SnippetsCustomerSessionsApi.get_session"
      end
      # resource path
      local_var_path = '/api/v4/{loginDomain}/{deviceCode}/snippets/customersession/{sessionKey}'.sub('{' + 'loginDomain' + '}', login_domain.to_s).sub('{' + 'deviceCode' + '}', device_code.to_s).sub('{' + 'sessionKey' + '}', session_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseCustomerSession' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnippetsCustomerSessionsApi#get_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
