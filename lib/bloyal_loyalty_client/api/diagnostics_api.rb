=begin
#bLoyal.LoyaltyService

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module BloyalLoyaltyClient
  class DiagnosticsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :table 
    # @option opts [String] :field 
    # @option opts [String] :value 
    # @option opts [BOOLEAN] :exact 
    # @return [Object]
    def diagnostic_customer_find_diagnostic_customer_find(access_key, opts = {})
      data, _status_code, _headers = diagnostic_customer_find_diagnostic_customer_find_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :table 
    # @option opts [String] :field 
    # @option opts [String] :value 
    # @option opts [BOOLEAN] :exact 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def diagnostic_customer_find_diagnostic_customer_find_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DiagnosticsApi.diagnostic_customer_find_diagnostic_customer_find ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling DiagnosticsApi.diagnostic_customer_find_diagnostic_customer_find"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/diagnostics/customerfind'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'table'] = opts[:'table'] if !opts[:'table'].nil?
      query_params[:'field'] = opts[:'field'] if !opts[:'field'].nil?
      query_params[:'value'] = opts[:'value'] if !opts[:'value'].nil?
      query_params[:'exact'] = opts[:'exact'] if !opts[:'exact'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Object' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DiagnosticsApi#diagnostic_customer_find_diagnostic_customer_find\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :table 
    # @option opts [String] :field 
    # @option opts [Integer] :page_number 
    # @option opts [Integer] :page_size 
    # @return [Object]
    def diagnostic_customer_get_page_diagnostic_customer_page(access_key, opts = {})
      data, _status_code, _headers = diagnostic_customer_get_page_diagnostic_customer_page_with_http_info(access_key, opts)
      data
    end

    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :table 
    # @option opts [String] :field 
    # @option opts [Integer] :page_number 
    # @option opts [Integer] :page_size 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def diagnostic_customer_get_page_diagnostic_customer_page_with_http_info(access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DiagnosticsApi.diagnostic_customer_get_page_diagnostic_customer_page ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling DiagnosticsApi.diagnostic_customer_get_page_diagnostic_customer_page"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/diagnostics/customerpage'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'table'] = opts[:'table'] if !opts[:'table'].nil?
      query_params[:'field'] = opts[:'field'] if !opts[:'field'].nil?
      query_params[:'pageNumber'] = opts[:'page_number'] if !opts[:'page_number'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Object' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DiagnosticsApi#diagnostic_customer_get_page_diagnostic_customer_page\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
