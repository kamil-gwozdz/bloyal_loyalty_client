=begin
#bLoyal.LoyaltyService

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module BloyalLoyaltyClient
  class LoyaltyApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseLoyaltyPointsTransaction]
    def accrue_points(body, access_key, opts = {})
      data, _status_code, _headers = accrue_points_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseLoyaltyPointsTransaction, Integer, Hash)>] ServerResponseLoyaltyPointsTransaction data, response status code and response headers
    def accrue_points_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoyaltyApi.accrue_points ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LoyaltyApi.accrue_points"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling LoyaltyApi.accrue_points"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/loyaltypoints/commands/accruals'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CustomerUid'] = customer_uid
      form_params['Points'] = points
      form_params['CreatedLocal'] = created_local
      form_params['Created'] = created
      form_params['Source'] = source
      form_params['SourceUid'] = source_uid
      form_params['SourceExternalId'] = source_external_id
      form_params['ReasonCode'] = reason_code
      form_params['Comment'] = comment
      form_params['AccountClassUid'] = account_class_uid
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseLoyaltyPointsTransaction' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoyaltyApi#accrue_points\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param customer_uid 
    # @param points 
    # @param created_local 
    # @param created 
    # @param source 
    # @param source_uid 
    # @param source_external_id 
    # @param reason_code 
    # @param comment 
    # @param account_class_uid 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseLoyaltyPointsTransaction]
    def accrue_points(customer_uid, points, created_local, created, source, source_uid, source_external_id, reason_code, comment, account_class_uid, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = accrue_points_with_http_info(customer_uid, points, created_local, created, source, source_uid, source_external_id, reason_code, comment, account_class_uid, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param customer_uid 
    # @param points 
    # @param created_local 
    # @param created 
    # @param source 
    # @param source_uid 
    # @param source_external_id 
    # @param reason_code 
    # @param comment 
    # @param account_class_uid 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseLoyaltyPointsTransaction, Integer, Hash)>] ServerResponseLoyaltyPointsTransaction data, response status code and response headers
    def accrue_points_with_http_info(customer_uid, points, created_local, created, source, source_uid, source_external_id, reason_code, comment, account_class_uid, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoyaltyApi.accrue_points ...'
      end
      # verify the required parameter 'customer_uid' is set
      if @api_client.config.client_side_validation && customer_uid.nil?
        fail ArgumentError, "Missing the required parameter 'customer_uid' when calling LoyaltyApi.accrue_points"
      end
      # verify the required parameter 'points' is set
      if @api_client.config.client_side_validation && points.nil?
        fail ArgumentError, "Missing the required parameter 'points' when calling LoyaltyApi.accrue_points"
      end
      # verify the required parameter 'created_local' is set
      if @api_client.config.client_side_validation && created_local.nil?
        fail ArgumentError, "Missing the required parameter 'created_local' when calling LoyaltyApi.accrue_points"
      end
      # verify the required parameter 'created' is set
      if @api_client.config.client_side_validation && created.nil?
        fail ArgumentError, "Missing the required parameter 'created' when calling LoyaltyApi.accrue_points"
      end
      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling LoyaltyApi.accrue_points"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['Undefined', 'SalesTransaction', 'Club', 'SubscriberGroup', 'LoyaltyProgram', 'Engagement'].include?(source)
        fail ArgumentError, "invalid value for 'source', must be one of Undefined, SalesTransaction, Club, SubscriberGroup, LoyaltyProgram, Engagement"
      end
      # verify the required parameter 'source_uid' is set
      if @api_client.config.client_side_validation && source_uid.nil?
        fail ArgumentError, "Missing the required parameter 'source_uid' when calling LoyaltyApi.accrue_points"
      end
      # verify the required parameter 'source_external_id' is set
      if @api_client.config.client_side_validation && source_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'source_external_id' when calling LoyaltyApi.accrue_points"
      end
      # verify the required parameter 'reason_code' is set
      if @api_client.config.client_side_validation && reason_code.nil?
        fail ArgumentError, "Missing the required parameter 'reason_code' when calling LoyaltyApi.accrue_points"
      end
      # verify the required parameter 'comment' is set
      if @api_client.config.client_side_validation && comment.nil?
        fail ArgumentError, "Missing the required parameter 'comment' when calling LoyaltyApi.accrue_points"
      end
      # verify the required parameter 'account_class_uid' is set
      if @api_client.config.client_side_validation && account_class_uid.nil?
        fail ArgumentError, "Missing the required parameter 'account_class_uid' when calling LoyaltyApi.accrue_points"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling LoyaltyApi.accrue_points"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling LoyaltyApi.accrue_points"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling LoyaltyApi.accrue_points"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling LoyaltyApi.accrue_points"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling LoyaltyApi.accrue_points"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling LoyaltyApi.accrue_points"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling LoyaltyApi.accrue_points"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling LoyaltyApi.accrue_points"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling LoyaltyApi.accrue_points"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling LoyaltyApi.accrue_points"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling LoyaltyApi.accrue_points"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/loyaltypoints/commands/accruals'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CustomerUid'] = customer_uid
      form_params['Points'] = points
      form_params['CreatedLocal'] = created_local
      form_params['Created'] = created
      form_params['Source'] = source
      form_params['SourceUid'] = source_uid
      form_params['SourceExternalId'] = source_external_id
      form_params['ReasonCode'] = reason_code
      form_params['Comment'] = comment
      form_params['AccountClassUid'] = account_class_uid
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseLoyaltyPointsTransaction' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoyaltyApi#accrue_points\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseLoyaltyPointsTransaction]
    def adjust_loyalty_points_adjust_points_async(body, access_key, opts = {})
      data, _status_code, _headers = adjust_loyalty_points_adjust_points_async_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseLoyaltyPointsTransaction, Integer, Hash)>] ServerResponseLoyaltyPointsTransaction data, response status code and response headers
    def adjust_loyalty_points_adjust_points_async_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoyaltyApi.adjust_loyalty_points_adjust_points_async ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LoyaltyApi.adjust_loyalty_points_adjust_points_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling LoyaltyApi.adjust_loyalty_points_adjust_points_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/loyaltypoints/commands/adjustments'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CustomerUid'] = customer_uid
      form_params['Points'] = points
      form_params['CreatedLocal'] = created_local
      form_params['Created'] = created
      form_params['Source'] = source
      form_params['SourceUid'] = source_uid
      form_params['SourceExternalId'] = source_external_id
      form_params['ReasonCode'] = reason_code
      form_params['Comment'] = comment
      form_params['AccountClassUid'] = account_class_uid
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseLoyaltyPointsTransaction' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoyaltyApi#adjust_loyalty_points_adjust_points_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param customer_uid 
    # @param points 
    # @param created_local 
    # @param created 
    # @param source 
    # @param source_uid 
    # @param source_external_id 
    # @param reason_code 
    # @param comment 
    # @param account_class_uid 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseLoyaltyPointsTransaction]
    def adjust_loyalty_points_adjust_points_async(customer_uid, points, created_local, created, source, source_uid, source_external_id, reason_code, comment, account_class_uid, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = adjust_loyalty_points_adjust_points_async_with_http_info(customer_uid, points, created_local, created, source, source_uid, source_external_id, reason_code, comment, account_class_uid, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param customer_uid 
    # @param points 
    # @param created_local 
    # @param created 
    # @param source 
    # @param source_uid 
    # @param source_external_id 
    # @param reason_code 
    # @param comment 
    # @param account_class_uid 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseLoyaltyPointsTransaction, Integer, Hash)>] ServerResponseLoyaltyPointsTransaction data, response status code and response headers
    def adjust_loyalty_points_adjust_points_async_with_http_info(customer_uid, points, created_local, created, source, source_uid, source_external_id, reason_code, comment, account_class_uid, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoyaltyApi.adjust_loyalty_points_adjust_points_async ...'
      end
      # verify the required parameter 'customer_uid' is set
      if @api_client.config.client_side_validation && customer_uid.nil?
        fail ArgumentError, "Missing the required parameter 'customer_uid' when calling LoyaltyApi.adjust_loyalty_points_adjust_points_async"
      end
      # verify the required parameter 'points' is set
      if @api_client.config.client_side_validation && points.nil?
        fail ArgumentError, "Missing the required parameter 'points' when calling LoyaltyApi.adjust_loyalty_points_adjust_points_async"
      end
      # verify the required parameter 'created_local' is set
      if @api_client.config.client_side_validation && created_local.nil?
        fail ArgumentError, "Missing the required parameter 'created_local' when calling LoyaltyApi.adjust_loyalty_points_adjust_points_async"
      end
      # verify the required parameter 'created' is set
      if @api_client.config.client_side_validation && created.nil?
        fail ArgumentError, "Missing the required parameter 'created' when calling LoyaltyApi.adjust_loyalty_points_adjust_points_async"
      end
      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling LoyaltyApi.adjust_loyalty_points_adjust_points_async"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['Undefined', 'SalesTransaction', 'Club', 'SubscriberGroup', 'LoyaltyProgram', 'Engagement'].include?(source)
        fail ArgumentError, "invalid value for 'source', must be one of Undefined, SalesTransaction, Club, SubscriberGroup, LoyaltyProgram, Engagement"
      end
      # verify the required parameter 'source_uid' is set
      if @api_client.config.client_side_validation && source_uid.nil?
        fail ArgumentError, "Missing the required parameter 'source_uid' when calling LoyaltyApi.adjust_loyalty_points_adjust_points_async"
      end
      # verify the required parameter 'source_external_id' is set
      if @api_client.config.client_side_validation && source_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'source_external_id' when calling LoyaltyApi.adjust_loyalty_points_adjust_points_async"
      end
      # verify the required parameter 'reason_code' is set
      if @api_client.config.client_side_validation && reason_code.nil?
        fail ArgumentError, "Missing the required parameter 'reason_code' when calling LoyaltyApi.adjust_loyalty_points_adjust_points_async"
      end
      # verify the required parameter 'comment' is set
      if @api_client.config.client_side_validation && comment.nil?
        fail ArgumentError, "Missing the required parameter 'comment' when calling LoyaltyApi.adjust_loyalty_points_adjust_points_async"
      end
      # verify the required parameter 'account_class_uid' is set
      if @api_client.config.client_side_validation && account_class_uid.nil?
        fail ArgumentError, "Missing the required parameter 'account_class_uid' when calling LoyaltyApi.adjust_loyalty_points_adjust_points_async"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling LoyaltyApi.adjust_loyalty_points_adjust_points_async"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling LoyaltyApi.adjust_loyalty_points_adjust_points_async"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling LoyaltyApi.adjust_loyalty_points_adjust_points_async"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling LoyaltyApi.adjust_loyalty_points_adjust_points_async"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling LoyaltyApi.adjust_loyalty_points_adjust_points_async"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling LoyaltyApi.adjust_loyalty_points_adjust_points_async"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling LoyaltyApi.adjust_loyalty_points_adjust_points_async"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling LoyaltyApi.adjust_loyalty_points_adjust_points_async"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling LoyaltyApi.adjust_loyalty_points_adjust_points_async"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling LoyaltyApi.adjust_loyalty_points_adjust_points_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling LoyaltyApi.adjust_loyalty_points_adjust_points_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/loyaltypoints/commands/adjustments'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CustomerUid'] = customer_uid
      form_params['Points'] = points
      form_params['CreatedLocal'] = created_local
      form_params['Created'] = created
      form_params['Source'] = source
      form_params['SourceUid'] = source_uid
      form_params['SourceExternalId'] = source_external_id
      form_params['ReasonCode'] = reason_code
      form_params['Comment'] = comment
      form_params['AccountClassUid'] = account_class_uid
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseLoyaltyPointsTransaction' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoyaltyApi#adjust_loyalty_points_adjust_points_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param access_key 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseIEnumerableLoyaltyAccountClass]
    def loyalty_account_class_get_account_classes(access_key, uid, opts = {})
      data, _status_code, _headers = loyalty_account_class_get_account_classes_with_http_info(access_key, uid, opts)
      data
    end

    # @param access_key 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseIEnumerableLoyaltyAccountClass, Integer, Hash)>] ServerResponseIEnumerableLoyaltyAccountClass data, response status code and response headers
    def loyalty_account_class_get_account_classes_with_http_info(access_key, uid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoyaltyApi.loyalty_account_class_get_account_classes ...'
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling LoyaltyApi.loyalty_account_class_get_account_classes"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling LoyaltyApi.loyalty_account_class_get_account_classes"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/loyaltyaccountclasses/{uid}'.sub('{' + 'accessKey' + '}', access_key.to_s).sub('{' + 'uid' + '}', uid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIEnumerableLoyaltyAccountClass' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoyaltyApi#loyalty_account_class_get_account_classes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseLoyaltyPointsTransaction]
    def redeem_points(body, access_key, opts = {})
      data, _status_code, _headers = redeem_points_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseLoyaltyPointsTransaction, Integer, Hash)>] ServerResponseLoyaltyPointsTransaction data, response status code and response headers
    def redeem_points_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoyaltyApi.redeem_points ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LoyaltyApi.redeem_points"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling LoyaltyApi.redeem_points"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/loyaltypoints/commands/redemptions'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CustomerUid'] = customer_uid
      form_params['Points'] = points
      form_params['CreatedLocal'] = created_local
      form_params['Created'] = created
      form_params['Source'] = source
      form_params['SourceUid'] = source_uid
      form_params['SourceExternalId'] = source_external_id
      form_params['ReasonCode'] = reason_code
      form_params['Comment'] = comment
      form_params['AccountClassUid'] = account_class_uid
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseLoyaltyPointsTransaction' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoyaltyApi#redeem_points\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param customer_uid 
    # @param points 
    # @param created_local 
    # @param created 
    # @param source 
    # @param source_uid 
    # @param source_external_id 
    # @param reason_code 
    # @param comment 
    # @param account_class_uid 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseLoyaltyPointsTransaction]
    def redeem_points(customer_uid, points, created_local, created, source, source_uid, source_external_id, reason_code, comment, account_class_uid, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      data, _status_code, _headers = redeem_points_with_http_info(customer_uid, points, created_local, created, source, source_uid, source_external_id, reason_code, comment, account_class_uid, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts)
      data
    end

    # @param customer_uid 
    # @param points 
    # @param created_local 
    # @param created 
    # @param source 
    # @param source_uid 
    # @param source_external_id 
    # @param reason_code 
    # @param comment 
    # @param account_class_uid 
    # @param device_uid 
    # @param store_code 
    # @param device_code 
    # @param cashier_uid 
    # @param cashier_code 
    # @param cashier_external_id 
    # @param uid 
    # @param reference_number 
    # @param system_uid 
    # @param connector_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseLoyaltyPointsTransaction, Integer, Hash)>] ServerResponseLoyaltyPointsTransaction data, response status code and response headers
    def redeem_points_with_http_info(customer_uid, points, created_local, created, source, source_uid, source_external_id, reason_code, comment, account_class_uid, device_uid, store_code, device_code, cashier_uid, cashier_code, cashier_external_id, uid, reference_number, system_uid, connector_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoyaltyApi.redeem_points ...'
      end
      # verify the required parameter 'customer_uid' is set
      if @api_client.config.client_side_validation && customer_uid.nil?
        fail ArgumentError, "Missing the required parameter 'customer_uid' when calling LoyaltyApi.redeem_points"
      end
      # verify the required parameter 'points' is set
      if @api_client.config.client_side_validation && points.nil?
        fail ArgumentError, "Missing the required parameter 'points' when calling LoyaltyApi.redeem_points"
      end
      # verify the required parameter 'created_local' is set
      if @api_client.config.client_side_validation && created_local.nil?
        fail ArgumentError, "Missing the required parameter 'created_local' when calling LoyaltyApi.redeem_points"
      end
      # verify the required parameter 'created' is set
      if @api_client.config.client_side_validation && created.nil?
        fail ArgumentError, "Missing the required parameter 'created' when calling LoyaltyApi.redeem_points"
      end
      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling LoyaltyApi.redeem_points"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['Undefined', 'SalesTransaction', 'Club', 'SubscriberGroup', 'LoyaltyProgram', 'Engagement'].include?(source)
        fail ArgumentError, "invalid value for 'source', must be one of Undefined, SalesTransaction, Club, SubscriberGroup, LoyaltyProgram, Engagement"
      end
      # verify the required parameter 'source_uid' is set
      if @api_client.config.client_side_validation && source_uid.nil?
        fail ArgumentError, "Missing the required parameter 'source_uid' when calling LoyaltyApi.redeem_points"
      end
      # verify the required parameter 'source_external_id' is set
      if @api_client.config.client_side_validation && source_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'source_external_id' when calling LoyaltyApi.redeem_points"
      end
      # verify the required parameter 'reason_code' is set
      if @api_client.config.client_side_validation && reason_code.nil?
        fail ArgumentError, "Missing the required parameter 'reason_code' when calling LoyaltyApi.redeem_points"
      end
      # verify the required parameter 'comment' is set
      if @api_client.config.client_side_validation && comment.nil?
        fail ArgumentError, "Missing the required parameter 'comment' when calling LoyaltyApi.redeem_points"
      end
      # verify the required parameter 'account_class_uid' is set
      if @api_client.config.client_side_validation && account_class_uid.nil?
        fail ArgumentError, "Missing the required parameter 'account_class_uid' when calling LoyaltyApi.redeem_points"
      end
      # verify the required parameter 'device_uid' is set
      if @api_client.config.client_side_validation && device_uid.nil?
        fail ArgumentError, "Missing the required parameter 'device_uid' when calling LoyaltyApi.redeem_points"
      end
      # verify the required parameter 'store_code' is set
      if @api_client.config.client_side_validation && store_code.nil?
        fail ArgumentError, "Missing the required parameter 'store_code' when calling LoyaltyApi.redeem_points"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling LoyaltyApi.redeem_points"
      end
      # verify the required parameter 'cashier_uid' is set
      if @api_client.config.client_side_validation && cashier_uid.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_uid' when calling LoyaltyApi.redeem_points"
      end
      # verify the required parameter 'cashier_code' is set
      if @api_client.config.client_side_validation && cashier_code.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_code' when calling LoyaltyApi.redeem_points"
      end
      # verify the required parameter 'cashier_external_id' is set
      if @api_client.config.client_side_validation && cashier_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'cashier_external_id' when calling LoyaltyApi.redeem_points"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling LoyaltyApi.redeem_points"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling LoyaltyApi.redeem_points"
      end
      # verify the required parameter 'system_uid' is set
      if @api_client.config.client_side_validation && system_uid.nil?
        fail ArgumentError, "Missing the required parameter 'system_uid' when calling LoyaltyApi.redeem_points"
      end
      # verify the required parameter 'connector_uid' is set
      if @api_client.config.client_side_validation && connector_uid.nil?
        fail ArgumentError, "Missing the required parameter 'connector_uid' when calling LoyaltyApi.redeem_points"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling LoyaltyApi.redeem_points"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/loyaltypoints/commands/redemptions'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['CustomerUid'] = customer_uid
      form_params['Points'] = points
      form_params['CreatedLocal'] = created_local
      form_params['Created'] = created
      form_params['Source'] = source
      form_params['SourceUid'] = source_uid
      form_params['SourceExternalId'] = source_external_id
      form_params['ReasonCode'] = reason_code
      form_params['Comment'] = comment
      form_params['AccountClassUid'] = account_class_uid
      form_params['DeviceUid'] = device_uid
      form_params['StoreCode'] = store_code
      form_params['DeviceCode'] = device_code
      form_params['CashierUid'] = cashier_uid
      form_params['CashierCode'] = cashier_code
      form_params['CashierExternalId'] = cashier_external_id
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['SystemUid'] = system_uid
      form_params['ConnectorUid'] = connector_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseLoyaltyPointsTransaction' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoyaltyApi#redeem_points\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def reverse_loyalty_points_reverse_loyalty_points_async(body, access_key, opts = {})
      data, _status_code, _headers = reverse_loyalty_points_reverse_loyalty_points_async_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def reverse_loyalty_points_reverse_loyalty_points_async_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoyaltyApi.reverse_loyalty_points_reverse_loyalty_points_async ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LoyaltyApi.reverse_loyalty_points_reverse_loyalty_points_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling LoyaltyApi.reverse_loyalty_points_reverse_loyalty_points_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/loyaltypoints/commands/reversals'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['CommandUid'] = command_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoyaltyApi#reverse_loyalty_points_reverse_loyalty_points_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param uid 
    # @param reference_number 
    # @param command_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def reverse_loyalty_points_reverse_loyalty_points_async(uid, reference_number, command_uid, access_key, opts = {})
      data, _status_code, _headers = reverse_loyalty_points_reverse_loyalty_points_async_with_http_info(uid, reference_number, command_uid, access_key, opts)
      data
    end

    # @param uid 
    # @param reference_number 
    # @param command_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def reverse_loyalty_points_reverse_loyalty_points_async_with_http_info(uid, reference_number, command_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoyaltyApi.reverse_loyalty_points_reverse_loyalty_points_async ...'
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling LoyaltyApi.reverse_loyalty_points_reverse_loyalty_points_async"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling LoyaltyApi.reverse_loyalty_points_reverse_loyalty_points_async"
      end
      # verify the required parameter 'command_uid' is set
      if @api_client.config.client_side_validation && command_uid.nil?
        fail ArgumentError, "Missing the required parameter 'command_uid' when calling LoyaltyApi.reverse_loyalty_points_reverse_loyalty_points_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling LoyaltyApi.reverse_loyalty_points_reverse_loyalty_points_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/loyaltypoints/commands/reversals'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['CommandUid'] = command_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoyaltyApi#reverse_loyalty_points_reverse_loyalty_points_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def void_loyalty_points_void_loyalty_points_async(body, access_key, opts = {})
      data, _status_code, _headers = void_loyalty_points_void_loyalty_points_async_with_http_info(body, access_key, opts)
      data
    end

    # @param body 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def void_loyalty_points_void_loyalty_points_async_with_http_info(body, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoyaltyApi.void_loyalty_points_void_loyalty_points_async ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LoyaltyApi.void_loyalty_points_void_loyalty_points_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling LoyaltyApi.void_loyalty_points_void_loyalty_points_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/loyaltypoints/commands/voids'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['TransactionUid'] = transaction_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoyaltyApi#void_loyalty_points_void_loyalty_points_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param uid 
    # @param reference_number 
    # @param transaction_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseCommandResponse]
    def void_loyalty_points_void_loyalty_points_async(uid, reference_number, transaction_uid, access_key, opts = {})
      data, _status_code, _headers = void_loyalty_points_void_loyalty_points_async_with_http_info(uid, reference_number, transaction_uid, access_key, opts)
      data
    end

    # @param uid 
    # @param reference_number 
    # @param transaction_uid 
    # @param access_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseCommandResponse, Integer, Hash)>] ServerResponseCommandResponse data, response status code and response headers
    def void_loyalty_points_void_loyalty_points_async_with_http_info(uid, reference_number, transaction_uid, access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoyaltyApi.void_loyalty_points_void_loyalty_points_async ...'
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling LoyaltyApi.void_loyalty_points_void_loyalty_points_async"
      end
      # verify the required parameter 'reference_number' is set
      if @api_client.config.client_side_validation && reference_number.nil?
        fail ArgumentError, "Missing the required parameter 'reference_number' when calling LoyaltyApi.void_loyalty_points_void_loyalty_points_async"
      end
      # verify the required parameter 'transaction_uid' is set
      if @api_client.config.client_side_validation && transaction_uid.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_uid' when calling LoyaltyApi.void_loyalty_points_void_loyalty_points_async"
      end
      # verify the required parameter 'access_key' is set
      if @api_client.config.client_side_validation && access_key.nil?
        fail ArgumentError, "Missing the required parameter 'access_key' when calling LoyaltyApi.void_loyalty_points_void_loyalty_points_async"
      end
      # resource path
      local_var_path = '/api/v4/{accessKey}/loyaltypoints/commands/voids'.sub('{' + 'accessKey' + '}', access_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['Uid'] = uid
      form_params['ReferenceNumber'] = reference_number
      form_params['TransactionUid'] = transaction_uid

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ServerResponseCommandResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoyaltyApi#void_loyalty_points_void_loyalty_points_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
