=begin
#bLoyal.LoyaltyService

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module BloyalLoyaltyClient
  class SnippetsSystemApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param login_domain 
    # @param device_code 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseSnippetDeviceProfile]
    def query_device_session_profile_get_async(login_domain, device_code, opts = {})
      data, _status_code, _headers = query_device_session_profile_get_async_with_http_info(login_domain, device_code, opts)
      data
    end

    # @param login_domain 
    # @param device_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseSnippetDeviceProfile, Integer, Hash)>] ServerResponseSnippetDeviceProfile data, response status code and response headers
    def query_device_session_profile_get_async_with_http_info(login_domain, device_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnippetsSystemApi.query_device_session_profile_get_async ...'
      end
      # verify the required parameter 'login_domain' is set
      if @api_client.config.client_side_validation && login_domain.nil?
        fail ArgumentError, "Missing the required parameter 'login_domain' when calling SnippetsSystemApi.query_device_session_profile_get_async"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling SnippetsSystemApi.query_device_session_profile_get_async"
      end
      # resource path
      local_var_path = '/api/v4/{loginDomain}/{deviceCode}/snippets/deviceprofile'.sub('{' + 'loginDomain' + '}', login_domain.to_s).sub('{' + 'deviceCode' + '}', device_code.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseSnippetDeviceProfile' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnippetsSystemApi#query_device_session_profile_get_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseIEnumerableLocation]
    def query_locations_session_query_locations(login_domain, device_code, session_key, opts = {})
      data, _status_code, _headers = query_locations_session_query_locations_with_http_info(login_domain, device_code, session_key, opts)
      data
    end

    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseIEnumerableLocation, Integer, Hash)>] ServerResponseIEnumerableLocation data, response status code and response headers
    def query_locations_session_query_locations_with_http_info(login_domain, device_code, session_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnippetsSystemApi.query_locations_session_query_locations ...'
      end
      # verify the required parameter 'login_domain' is set
      if @api_client.config.client_side_validation && login_domain.nil?
        fail ArgumentError, "Missing the required parameter 'login_domain' when calling SnippetsSystemApi.query_locations_session_query_locations"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling SnippetsSystemApi.query_locations_session_query_locations"
      end
      # verify the required parameter 'session_key' is set
      if @api_client.config.client_side_validation && session_key.nil?
        fail ArgumentError, "Missing the required parameter 'session_key' when calling SnippetsSystemApi.query_locations_session_query_locations"
      end
      # resource path
      local_var_path = '/api/v4/{loginDomain}/{deviceCode}/snippets/system/{sessionKey}/locations'.sub('{' + 'loginDomain' + '}', login_domain.to_s).sub('{' + 'deviceCode' + '}', device_code.to_s).sub('{' + 'sessionKey' + '}', session_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIEnumerableLocation' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnippetsSystemApi#query_locations_session_query_locations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseProduct]
    def query_products_session_query_product_async(login_domain, device_code, session_key, opts = {})
      data, _status_code, _headers = query_products_session_query_product_async_with_http_info(login_domain, device_code, session_key, opts)
      data
    end

    # @param login_domain 
    # @param device_code 
    # @param session_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseProduct, Integer, Hash)>] ServerResponseProduct data, response status code and response headers
    def query_products_session_query_product_async_with_http_info(login_domain, device_code, session_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnippetsSystemApi.query_products_session_query_product_async ...'
      end
      # verify the required parameter 'login_domain' is set
      if @api_client.config.client_side_validation && login_domain.nil?
        fail ArgumentError, "Missing the required parameter 'login_domain' when calling SnippetsSystemApi.query_products_session_query_product_async"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling SnippetsSystemApi.query_products_session_query_product_async"
      end
      # verify the required parameter 'session_key' is set
      if @api_client.config.client_side_validation && session_key.nil?
        fail ArgumentError, "Missing the required parameter 'session_key' when calling SnippetsSystemApi.query_products_session_query_product_async"
      end
      # resource path
      local_var_path = '/api/v4/{loginDomain}/{deviceCode}/snippets/system/{sessionKey}/products'.sub('{' + 'loginDomain' + '}', login_domain.to_s).sub('{' + 'deviceCode' + '}', device_code.to_s).sub('{' + 'sessionKey' + '}', session_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseProduct' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnippetsSystemApi#query_products_session_query_product_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param login_domain 
    # @param device_code 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @return [ServerResponseIEnumerableEntityFieldMap]
    def session_custom_entity_definition_get_custom_fields_by_entity_async(login_domain, device_code, uid, opts = {})
      data, _status_code, _headers = session_custom_entity_definition_get_custom_fields_by_entity_async_with_http_info(login_domain, device_code, uid, opts)
      data
    end

    # @param login_domain 
    # @param device_code 
    # @param uid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerResponseIEnumerableEntityFieldMap, Integer, Hash)>] ServerResponseIEnumerableEntityFieldMap data, response status code and response headers
    def session_custom_entity_definition_get_custom_fields_by_entity_async_with_http_info(login_domain, device_code, uid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnippetsSystemApi.session_custom_entity_definition_get_custom_fields_by_entity_async ...'
      end
      # verify the required parameter 'login_domain' is set
      if @api_client.config.client_side_validation && login_domain.nil?
        fail ArgumentError, "Missing the required parameter 'login_domain' when calling SnippetsSystemApi.session_custom_entity_definition_get_custom_fields_by_entity_async"
      end
      # verify the required parameter 'device_code' is set
      if @api_client.config.client_side_validation && device_code.nil?
        fail ArgumentError, "Missing the required parameter 'device_code' when calling SnippetsSystemApi.session_custom_entity_definition_get_custom_fields_by_entity_async"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling SnippetsSystemApi.session_custom_entity_definition_get_custom_fields_by_entity_async"
      end
      # resource path
      local_var_path = '/api/v4/{loginDomain}/{deviceCode}/snippets/system/customFields/{uid}'.sub('{' + 'loginDomain' + '}', login_domain.to_s).sub('{' + 'deviceCode' + '}', device_code.to_s).sub('{' + 'uid' + '}', uid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ServerResponseIEnumerableEntityFieldMap' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnippetsSystemApi#session_custom_entity_definition_get_custom_fields_by_entity_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
